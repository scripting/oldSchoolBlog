<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Wed, 19 Apr 2023 15:03:34 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: oldSchoolTemplate</title>
		<dateCreated>Sat, 27 May 2017 13:36:29 GMT</dateCreated>
		<dateModified>Wed, 19 Apr 2023 15:03:33 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 6, 70</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>84</windowTop>
		<windowLeft>199</windowLeft>
		<windowBottom>1253</windowBottom>
		<windowRight>1970</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/oldschool/">
			<outline text="Notes" isComment="true">
				<outline text="4/8/20; 9:38:06 AM by DW">
					<outline text="Moved from /fargo.io/code/shared/oldschool/ to /scripting.com/code/oldschool/. "/>
					</outline>
				<outline text="3/18/18; 2:26:30 PM by DW">
					<outline text="I made a mistake when creating the urlvideo attribute. ">
						<outline text="https://www.youtube.com/watch?v=YedqV4Gl_us"/>
						<outline text="https://www.youtube.com/embed/YedqV4Gl_us"/>
						</outline>
					<outline text="See fixYoutubeUrl below."/>
					</outline>
				<outline text="9/12/17; 12:38:07 PM by DW">
					<outline text="Replaced daytemplate.css and daytemplate.js with new versions that support the tabbed home page. "/>
					</outline>
				<outline text="9/8/17; 12:46:30 PM by DW">
					<outline text="It's called daytemplate but it's not -- it's the only template, used for the home page, for the monthly archive pages and for the extra pages (linkblog, river etc)."/>
					</outline>
				</outline>
			<outline text="worknotes.md" created="Fri, 03 Feb 2023 14:58:15 GMT">
				<outline text="#### 4/19/23; 10:57:34 AM by DW" created="Wed, 19 Apr 2023 14:57:34 GMT">
					<outline text="The links page comes from the new FeedLand-based linkblog feed." created="Wed, 19 Apr 2023 14:57:34 GMT"/>
					</outline>
				<outline text="#### 2/22/23; 9:06:56 AM by DW" created="Wed, 22 Feb 2023 14:06:56 GMT">
					<outline text="The About page outline is moved to my public folder so I can edit it in E/D." created="Wed, 22 Feb 2023 14:06:57 GMT"/>
					</outline>
				<outline text="#### 2/3/23; 9:58:19 AM by DW" created="Fri, 03 Feb 2023 14:58:18 GMT">
					<outline text="Turned off twitter comments, see flTwitterCommentsEnabled." created="Fri, 03 Feb 2023 14:58:19 GMT"/>
					<outline text="DIsabled twitter login, set the display style for divToggleConnect to none." created="Fri, 03 Feb 2023 14:58:48 GMT"/>
					</outline>
				</outline>
			<outline text="daytemplate.css">
				<outline text="@import url('https://fonts.googleapis.com/css?family=Oswald:400,700');"/>
				<outline text=""/>
				<outline text="body { ">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="font-size: 18px;"/>
					<outline text="background-color: whitesmoke;" isComment="true"/>
					<outline text="text-rendering: optimizeLegibility;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetop {">
					<outline text="width: 100%;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopImage {">
					<outline text="position: absolute;"/>
					<outline text="top: 0;"/>
					<outline text="left: 0;"/>
					<outline text="height: 230px;"/>
					<outline text="width: 100%;"/>
					<outline text="margin-left: 0;"/>
					<outline text="margin-top: 0;"/>
					<outline text="border-top: 1px solid silver;" isComment="true"/>
					<outline text="z-index: -1;"/>
					<outline text="-webkit-background-size: cover;"/>
					<outline text="-moz-background-size: cover;"/>
					<outline text="-o-background-size: cover;"/>
					<outline text="background-size: cover;"/>
					<outline text="background-position: center;"/>
					<outline text="background-repeat: no-repeat;"/>
					<outline text="background-color: black;"/>
					<outline text="z-index: 0;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTextBackground {">
					<outline text="position: absolute;"/>
					<outline text="top: 30;"/>
					<outline text="left: 15%;"/>
					<outline text="width: 70%;"/>
					<outline text="height: 140px;"/>
					<outline text="z-index: 1;"/>
					<outline text="background-color: black;"/>
					<outline text="opacity: 0.25;"/>
					<outline text="border-top: 1px solid white;"/>
					<outline text="display: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopText {">
					<outline text="position: absolute;"/>
					<outline text="text-align: center;"/>
					<outline text="top: 60;"/>
					<outline text="left: 15%;"/>
					<outline text="width: 65%;"/>
					<outline text="height: 200px;"/>
					<outline text="color: white;"/>
					<outline text="padding-top: 3px;"/>
					<outline text="padding-left: 20px;"/>
					<outline text="z-index: 2;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTitle {">
					<outline text="font-family: &quot;Oswald&quot;;"/>
					<outline text="font-size: 80px;"/>
					<outline text="font-weight: 700;"/>
					<outline text="font-style: normal;"/>
					<outline text="letter-spacing: -0.01em;"/>
					<outline text="line-height: 1.1;"/>
					<outline text="margin-bottom: 0;"/>
					<outline text="color: white;"/>
					<outline text="text-shadow: 1px 1px black;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTitle a {">
					<outline text="color: white;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTitle a:hover {">
					<outline text="text-decoration: none;"/>
					<outline text="color: lemonchiffon;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopDescription {">
					<outline text="font-family: &quot;Oswald&quot;;" isComment="true"/>
					<outline text="font-size: 20px;"/>
					<outline text="margin-top: 5px;"/>
					<outline text="text-shadow: 1px 1px black;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody { ">
					<outline text="width: 680px;"/>
					<outline text="width: 630px;" isComment="true"/>
					<outline text="margin-top: 280px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divDayContainer {">
					<outline text="background-color: white;"/>
					<outline text="padding: 50px;"/>
					<outline text="padding-top: 30px;"/>
					<outline text="padding-bottom: 30px;"/>
					<outline text="border: 1px solid silver;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divDayTitle {">
					<outline text="font-family: &quot;Oswald&quot;;"/>
					<outline text="font-size: 32px;"/>
					<outline text="font-weight: bold;"/>
					<outline text="margin-bottom: 30px;"/>
					<outline text="letter-spacing: -1px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divDayTitle a {">
					<outline text="color: black;"/>
					<outline text="opacity: .85;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divSingularItem {">
					<outline text="color: green;" isComment="true"/>
					<outline text="line-height: 150%;"/>
					<outline text="margin-bottom: .6em;"/>
					<outline text="font-family: &quot;Georgia&quot;;" isComment="true"/>
					<outline text="font-size: 20px;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem {">
					<outline text="color: blue;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem .divTitle {">
					<outline text="font-family: &quot;Oswald&quot;;"/>
					<outline text="font-size: 25px;"/>
					<outline text="color: black;" isComment="true"/>
					<outline text="margin-top: 20px;"/>
					<outline text="margin-bottom: .1em;"/>
					<outline text="font-weight: bold;"/>
					<outline text="line-height: 140%;"/>
					<outline text="letter-spacing: -1px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem .ulLevel0 {">
					<outline text="margin-left: 0;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem li {">
					<outline text="list-style-type: none;"/>
					<outline text="margin-bottom: .6em;"/>
					<outline text="line-height: 150%;"/>
					<outline text="font-family: &quot;Georgia&quot;;" isComment="true"/>
					<outline text="font-size: 20px;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".spLink {">
					<outline text="margin-left: .5em;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spLink a {">
					<outline text="color: gray;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spPermaLink {">
					<outline text="margin-left: .4em;"/>
					<outline text="display: none;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".spPermaLink a {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="color: purple;"/>
					<outline text="opacity: 0.3;"/>
					<outline text="opacity: 0.5;" isComment="true"/>
					<outline text="opacity: 0.2;" isComment="true"/>
					<outline text="font-weight: normal;"/>
					<outline text="font-size: .8em;" isComment="true"/>
					<outline text="font-size: 14px;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spPermaLink a:hover {">
					<outline text="opacity: 0.9;"/>
					<outline text="color: green;" created="Thu, 04 Mar 2021 14:34:49 GMT"/>
					<outline text="}"/>
					</outline>
				<outline text=".divArchivePageDay {">
					<outline text="margin-bottom: 40px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divArchivePageDay .divDayTitle {" isComment="true">
					<outline text="font-size: 1.5em;" isComment="true"/>
					<outline text="margin-bottom: 30px;" isComment="true"/>
					<outline text="color: green;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divFooter {" created="Fri, 07 Mar 2014 17:07:49 GMT" pgfnum="38596">
					<outline text="font-family: &quot;Ubuntu&quot;, sans-serif;" isComment="true"/>
					<outline text="margin-top: 400px;"/>
					<outline text="font-size: .80em;"/>
					<outline text="line-height: 180%;" created="Sun, 09 Mar 2014 22:42:38 GMT" pgfnum="38763"/>
					<outline text="border-top: 1px solid silver;" created="Fri, 07 Mar 2014 17:08:19 GMT" pgfnum="38600"/>
					<outline text="text-align: center;" created="Fri, 07 Mar 2014 17:10:00 GMT" pgfnum="38601"/>
					<outline text="padding-top: 15px;" created="Fri, 07 Mar 2014 17:12:24 GMT" pgfnum="38602"/>
					<outline text="height: 400px;" isComment="true" created="Fri, 07 Mar 2014 17:08:00 GMT" pgfnum="38598"/>
					<outline text="}" created="Fri, 07 Mar 2014 17:07:51 GMT" pgfnum="38597"/>
					</outline>
				<outline text=".divSocialMediaLinks {">
					<outline text="letter-spacing: 12px; "/>
					<outline text="font-size: 1.2em; " isComment="true"/>
					<outline text="margin-top: 5px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spTitleLink {">
					<outline text="color: black;"/>
					<outline text="opacity: .85;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".ulNumberedSubs li {">
					<outline text="list-style-type: decimal;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="/* 5/27/17 by DW -- snap.js */">
					<outline text=".divSnapIcon {">
						<outline text="position: fixed;"/>
						<outline text="top: 0;"/>
						<outline text="left: 0;"/>
						<outline text="z-index: 20;"/>
						<outline text="width: 98%;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divVersionNumber {">
						<outline text="position: absolute; "/>
						<outline text="top: 5;"/>
						<outline text="left: 95%;"/>
						<outline text="font-size: 12px;"/>
						<outline text="color: black;"/>
						<outline text="background-color: white;"/>
						<outline text="padding-left: 5px;"/>
						<outline text="padding-right: 5px;"/>
						<outline text="z-index: 20;"/>
						<outline text="line-height: 1em;" isComment="true"/>
						<outline text="border: 1px solid gray;"/>
						<outline text="opacity: 0.5;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divVersionNumber:hover {">
						<outline text="opacity: 1;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSnapIcon a {">
						<outline text="display: block;"/>
						<outline text="width: 44px;"/>
						<outline text="height: 44px;"/>
						<outline text="cursor: pointer;" created="Fri, 20 Dec 2013 00:10:13 GMT" pgfnum="33992"/>
						<outline text="background-color: black;" isComment="true" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="opacity: 0.15;" isComment="true"/>
						<outline text="float: left;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSnapIcon i {">
						<outline text="font-size: 22px;"/>
						<outline text="color: white;" isComment="true"/>
						<outline text="margin-left: 11px;"/>
						<outline text="margin-top: 10px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSnapIcon a {" isComment="true">
						<outline text="background: url(http://fargo.io/cms/snap/open.png) center center no-repeat;"/>
						<outline text="display: block;"/>
						<outline text="width: 44px;"/>
						<outline text="height: 44px;"/>
						<outline text="cursor: pointer;" created="Fri, 20 Dec 2013 00:10:13 GMT" pgfnum="33992"/>
						<outline text="background-color: black;" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="opacity: 0.15;" isComment="true"/>
						<outline text="float: left;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-content {">
						<outline text="background-color: white;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-drawers {">
						<outline text="background: gainsboro;"/>
						<outline text="width: 300px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-drawer {">
						<outline text="background: gainsboro;"/>
						<outline text="color: #eee;"/>
						<outline text="width: 300px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawerContent {">
						<outline text="margin-top: 30px;" isComment="true"/>
						<outline text="width: 80%;"/>
						<outline text="margin-left: 10%;"/>
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer h4 {">
						<outline text="color: black;"/>
						<outline text="font-size: 18px;"/>
						<outline text="font-weight: bold;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer p {">
						<outline text="margin-bottom: 20px;"/>
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer .divOutlineText {">
						<outline text="font-size: 14px;"/>
						<outline text="line-height: 100%;" isComment="true"/>
						<outline text="margin-bottom: 5px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer .divOutlineText a {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divOutlineDisplayer {">
						<outline text="margin-top: 60px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer .divRenderedOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text=".aSnapClosed {">
						<outline text="background-color: black;" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="}"/>
						</outline>
					<outline text=".aSnapClosed i {">
						<outline text="color: white;"/>
						<outline text="}"/>
						</outline>
					<outline text=".aSnapOpen {">
						<outline text="background-color: inherit;" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="border: 1px solid white;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".aSnapOpen i {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 5/27/17 by DW -- about outline */">
					<outline text=".divAboutOutline {">
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline ul {">
						<outline text="margin-left: 15px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline .divOutlineText {">
						<outline text="font-size: 17px;"/>
						<outline text="line-height: 160%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 7/13/17 by DW -- xrefs */">
					<outline text=".spScriptingNewsWedge {">
						<outline text="font-size: 1.1em;"/>
						<outline text="float: left;"/>
						<outline text="margin-left: -.7em;"/>
						<outline text="margin-top: .3em;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spScriptingNewsWedge i {">
						<outline text="color: black;"/>
						<outline text="opacity: .3;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefOutline {">
						<outline text="font-size: 16px;"/>
						<outline text="margin-top: 10px;"/>
						<outline text="padding-left: 25px;"/>
						<outline text="padding-right: 25px;"/>
						<outline text="padding-top: 15px;"/>
						<outline text="padding-bottom: 10px;"/>
						<outline text="margin-bottom: 10px;"/>
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid silver;"/>
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefOutline .divRenderedOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefPermalink {">
						<outline text="float: right;"/>
						<outline text="font-size: 14px;"/>
						<outline text="margin-top: -2px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".darkCaretColor {">
						<outline text="color: green;"/>
						<outline text="}"/>
						</outline>
					<outline text=".lightCaretColor {">
						<outline text="color: green;"/>
						<outline text="opacity: .3;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 7/24/17 by DW -- tweets */">
					<outline text=".divEmbeddedTweet {">
						<outline text="visibility: hidden;"/>
						<outline text="}"/>
						</outline>
					<outline text=".imgExpandable {">
						<outline text="display: block;"/>
						<outline text="visibility: hidden;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 7/25/17 by DW -- make emoji a little bigger */">
					<outline text=".spOldSchoolEmoji {">
						<outline text="font-size: 1.1em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDisqusThread {">
						<outline text="border: 1px solid silver;"/>
						<outline text="background-color: white;"/>
						<outline text="min-height: 200px"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 8/2/17 by DW */">
					<outline text=".divXrefOutline {">
						<outline text="line-height: 140%;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 9/11/17 by DW -- tabs*/">
					<outline text=".divPageBody {">
						<outline text="margin-top: 260px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divScriptingTab {">
						<outline text="min-height: 600px;"/>
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid rgb(221, 221, 221);"/>
						<outline text="}"/>
						</outline>
					<outline text=".iTabIcon {">
						<outline text="margin-right: .4em;"/>
						<outline text="opacity: .8;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divScriptingTabs li {">
						<outline text="width: 120px;"/>
						<outline text="color: gray;"/>
						<outline text="border-bottom: 1px solid white; /* 4/11/23 by DW */" created="Tue, 11 Apr 2023 22:04:32 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text=".active {">
						<outline text="background-color: white;" isComment="true"/>
						<outline text="color: black;"/>
						<outline text="font-weight: bold;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs {">
						<outline text="font-family: &quot;Oswald&quot;;" isComment="true"/>
						<outline text="margin-bottom: -1px;"/>
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a {">
						<outline text="cursor: pointer;"/>
						<outline text="color: inherit;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; .active &gt; a, .nav-tabs &gt; .active &gt; a:hover, .nav-tabs &gt; .active &gt; a:focus {">
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid silver;"/>
						<outline text="border-bottom-color: transparent;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a, .nav-pills &gt; li &gt; a {">
						<outline text="padding-left: 8px;"/>
						<outline text="padding-right: 8px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabContent {">
						<outline text="margin-top: 30px;"/>
						<outline text="margin-left: 40px;"/>
						<outline text="margin-right: 40px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline, .divAboutOutline .divOutlineText {">
						<outline text="font-size: 18px;"/>
						<outline text="line-height: 130%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divOutlineHead {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-size: 32px;"/>
						<outline text="letter-spacing: -1px;"/>
						<outline text="line-height: 100%;"/>
						<outline text="vertical-align: text-top;"/>
						<outline text="margin-top: -4px;"/>
						<outline text="margin-left: -5px;"/>
						<outline text="margin-bottom: .4em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-content {">
						<outline text="background-color: whitesmoke;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawerContent .divOutlineHead {">
						<outline text="font-family: &quot;Ubuntu&quot;;"/>
						<outline text="font-size: 20px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 9/28/17 by DW*/">
					<outline text=".divLastScriptingUpdate {">
						<outline text="float: right;"/>
						<outline text="font-size: 14px;"/>
						<outline text="color: rgb(128, 128, 128);"/>
						<outline text="padding-top: 12px;"/>
						<outline text="padding-right: 2px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 12/19/17 by DW -- discuss tab */">
					<outline text=".divDiscussIntro {">
						<outline text="font-size: 14px;"/>
						<outline text="line-height: 140%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divComments {">
						<outline text="border: 1px solid silver;"/>
						<outline text="padding: 8px;"/>
						<outline text="background-color: whitesmoke;"/>
						<outline text="margin-top: 30px;"/>
						<outline text="margin-bottom: 50px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 12/31/17 by DW -- story pages */">
					<outline text=".divStoryPageTitle {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-size: 32px;"/>
						<outline text="font-weight: bold;"/>
						<outline text="line-height: 100%;"/>
						<outline text="margin-bottom: 20px;"/>
						<outline text="letter-spacing: -1px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divStoryPageTitle a {">
						<outline text="color: black;"/>
						<outline text="opacity: .85;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divStoryPageTitle .spPermalink {">
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 2/6/18 by DW */">
					<outline text=".divStoryPageTitle {">
						<outline text="font-size: 48px;"/>
						<outline text="letter-spacing: -3px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 2/11/18 by DW */">
					<outline text=".divStoryPagePostTime {">
						<outline text="font-size: 18px;"/>
						<outline text="margin-bottom: 15px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 5/15/18 by DW -- collapse attribute, flBulletedList attribute */">
					<outline text=".ulCollapsed {">
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".ulBulletedSubs li {">
						<outline text="list-style-type: square;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  5/19/18 by DW */">
					<outline text=".divTextSizeControl {">
						<outline text="float: right;"/>
						<outline text="padding: 5px;"/>
						<outline text="border: 1px solid silver;" isComment="true"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  7/13/18 by DW -- tweak display of xrefs */">
					<outline text=".divXrefOutline .divRenderedOutline .divOutlineHead {">
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefOutline .divRenderedOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="margin-left: 7px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  11/8/18 by DW -- likes */">
					<outline text=".spLikes {">
						<outline text="font-size: 18px;"/>
						<outline text="cursor: pointer;"/>
						<outline text="color: silver;"/>
						<outline text="margin-left: 10px;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLikes:hover {">
						<outline text="color: gray;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLikes a {">
						<outline text="color: inherit;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLikes a:hover {" isComment="true">
						<outline text="font-weight: bold;"/>
						<outline text="color: black;"/>
						<outline text="text-decoration: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spThumb a {">
						<outline text="color: lightslategray;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  11/23/18 by DW -- likes */">
					<outline text=".spPermaLink {">
						<outline text="margin-left: 5px;"/>
						<outline text="margin-right: 8px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  12/14/18 by DW -- twitter comments */">
					<outline text=".spTwitterComment {">
						<outline text="margin-left: 0px;"/>
						<outline text="margin-right: 8px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spTwitterComment a {">
						<outline text="color: silver;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spTwitterComment a:hover {">
						<outline text="color: gray;"/>
						<outline text="color: #4099FF;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetDialogContainer {">
						<outline text="padding-top: 15px;"/>
						<outline text="padding-bottom: 15px;"/>
						<outline text="padding-left: 25px;"/>
						<outline text="padding-right: 25px;"/>
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetEditorContainer .divTweetPrompt {">
						<outline text="color: black;"/>
						<outline text="font-weight: normal;"/>
						<outline text="font-size: 16px;"/>
						<outline text="margin-bottom: 3px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetEditor {">
						<outline text="width: 97%;"/>
						<outline text="padding: 7px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetEditorPostButton {">
						<outline text="margin-top: 7px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".medium-editor-placeholder {">
						<outline text="position: relative; }"/>
						</outline>
					<outline text=".medium-editor-placeholder:after {">
						<outline text="left: 10;"/>
						<outline text="top: 10;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  4/22/19 by DW -- connect item, chat */">
					<outline text=".divToggleConnect {">
						<outline text="position: absolute;"/>
						<outline text="top: 5;"/>
						<outline text="left: 5;"/>
						<outline text="min-width: 58;"/>
						<outline text="z-index: 20;"/>
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid gray;"/>
						<outline text="font-size: 12px;"/>
						<outline text="padding-left: 5px;"/>
						<outline text="padding-right: 5px;"/>
						<outline text="cursor: pointer;"/>
						<outline text="opacity: 0.5;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divToggleConnect a {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divToggleConnect:hover {">
						<outline text="opacity: 1;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divChatMsgContainer {">
						<outline text="border: 1px solid gainsboro;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divChatBottomLine .spLikes {">
						<outline text="font-size: 14px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  6/9/19 by DW -- move the body up by 20px */">
					<outline text=".divPageBody {">
						<outline text="margin-top: 240px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  10/17/19 by DW -- More button and infinite scrolling */">
					<outline text=".divMoreButton {">
						<outline text="margin-top: 10px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  12/17/19 by DW -- Make code look un-crappy, bootstrap makes it red? why. oh the humanity. */">
					<outline text="code {">
						<outline text="color: inherit;"/>
						<outline text="white-space: normal;"/>
						<outline text="font-size: 15px;" created="Wed, 24 Mar 2021 16:17:08 GMT"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  1/3/20 by DW -- inlineImage styles. */">
					<outline text=".divInlineImage {">
						<outline text="padding: 10px;"/>
						<outline text="padding-left: 15px;"/>
						<outline text="padding-right: 15px;"/>
						<outline text="border: 1px dashed silver;"/>
						<outline text="font-size: 0.8em;"/>
						<outline text="line-height: 130%;"/>
						<outline text="text-align: center;"/>
						<outline text="}"/>
						</outline>
					<outline text=".imgInline, iframe {">
						<outline text="margin-bottom: 10px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  3/3/20 PM by DW */">
					<outline text=".spSpoiler {">
						<outline text="display: none;"/>
						<outline text="cursor: pointer;"/>
						<outline text="color: green;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  4/24/20 PM by DW */">
					<outline text=".ulCodeSubs {">
						<outline text="font-family: &quot;Lucida Console&quot;, Monaco, &quot;Courier New&quot;, &quot;Courier&quot;, monospace;"/>
						<outline text="font-size: 14px !important;"/>
						<outline text="}"/>
						</outline>
					<outline text=".ulCodeSubs li {">
						<outline text="line-height: 130%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".ulCodeSubs .spPermaLink {">
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  10/10/20 by DW -- biden/harris ad */">
					<outline text=".divBidenAd {">
						<outline text="display: none;"/>
						<outline text="position: fixed;"/>
						<outline text="top: 300;"/>
						<outline text="right: 100;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  1/20/21 by DW -- countdown to inauguration */" isComment="true">
					<outline text=".divInaugurationTitle {">
						<outline text="font-size: 24px;"/>
						<outline text="font-weight: bold;"/>
						<outline text="text-align: center;"/>
						<outline text="margin-bottom: 30px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divInaugurationHowLong {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-weight: 700;"/>
						<outline text="font-style: normal;"/>
						<outline text="letter-spacing: -0.02em;"/>
						<outline text="line-height: 1.1;"/>
						<outline text="margin-bottom: 0;"/>
						<outline text="color: white;" isComment="true"/>
						<outline text="text-shadow: 1px 1px black;" isComment="true"/>
						<outline text="font-size: 32px;"/>
						<outline text="line-height: 140%;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divInaugurationTweetThis {">
						<outline text="margin-top: 40px;"/>
						<outline text="text-align: center;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  7/17/21 by DW -- tagrefs */" created="Sat, 17 Jul 2021 16:13:57 GMT">
					<outline text=".spTagref { " created="Sat, 17 Jul 2021 16:14:00 GMT">
						<outline text="cursor: pointer;" created="Sat, 17 Jul 2021 16:14:12 GMT"/>
						<outline text="color: orange;" isComment="true" created="Sat, 17 Jul 2021 16:14:15 GMT"/>
						<outline text="}" created="Sat, 17 Jul 2021 16:14:03 GMT"/>
						</outline>
					<outline text=".divScriptingTab .spTagref, .divDayContainer .spTagref {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="color: #0088cc;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divScriptingTab .spTagref:hover, .divDayContainer .spTagref:hover {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="color: #0088cc;" isComment="true" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="text-decoration: underline;"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divScriptingTab .spTagref:before, .divDayContainer .spTagref:before {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;[&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divScriptingTab .spTagref:after, .divDayContainer .spTagref:after {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;]&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divDayContainer .spTagref:hover {" isComment="true" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="color: #0088cc;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divDayContainer .spTagref:before {" isComment="true" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;[&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divDayContainer .spTagref:after {" isComment="true" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;]&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					</outline>
				<outline text="/*  11/16/22 AM by DW -- misc */" created="Wed, 16 Nov 2022 13:45:08 GMT">
					<outline text=".divMastodonLink {" created="Wed, 16 Nov 2022 13:45:08 GMT">
						<outline text="margin-top: 10px;" created="Wed, 16 Nov 2022 13:49:10 GMT"/>
						<outline text="}" created="Wed, 16 Nov 2022 13:45:12 GMT"/>
						</outline>
					<outline text=".divMastodonLink a {" created="Wed, 16 Nov 2022 13:45:08 GMT">
						<outline text="color: inherit;" created="Wed, 16 Nov 2022 13:47:58 GMT"/>
						<outline text="}" created="Wed, 16 Nov 2022 13:45:12 GMT"/>
						</outline>
					</outline>
				<outline text="/*  2/3/23  by DW */" created="Fri, 03 Feb 2023 14:59:28 GMT">
					<outline text=".divToggleConnect {" created="Fri, 03 Feb 2023 14:59:28 GMT">
						<outline text="display: none;" created="Fri, 03 Feb 2023 14:59:36 GMT"/>
						<outline text="}" created="Fri, 03 Feb 2023 14:59:39 GMT"/>
						</outline>
					</outline>
				<outline text="/*  4/9/23 by DW */" created="Sun, 09 Apr 2023 15:47:22 GMT">
					<outline text=".divEmbeddedToot {" created="Sun, 09 Apr 2023 15:47:22 GMT">
						<outline text="visibility: hidden;"/>
						<outline text="}" created="Sun, 09 Apr 2023 15:47:26 GMT"/>
						</outline>
					</outline>
				<outline text="/* 4/19/23 by DW */" created="Wed, 19 Apr 2023 14:56:28 GMT">
					<outline text=".divLinkblogDay p {">
						<outline text="font-size: 16px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="/* styles for phone */" created="Sun, 09 Mar 2014 19:11:13 GMT" pgfnum="38719">
					<outline text="@media only screen "/>
					<outline text="and (min-device-width : 320px) "/>
					<outline text="and (max-device-width : 480px) {">
						<outline text="body {">
							<outline text="font-size: 16px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-top: 150px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopImage {">
							<outline text="height: 135px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopText {">
							<outline text="top: 20;"/>
							<outline text="width: 100%;"/>
							<outline text="left: 0;"/>
							<outline text="padding-left: 0;"/>
							<outline text="height: 100px;"/>
							<outline text="color: white;" isComment="true"/>
							<outline text="padding-top: 3px;" isComment="true"/>
							<outline text="z-index: 2;" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopTitle {">
							<outline text="font-size: 45px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopDescription {">
							<outline text="font-size: 16px;"/>
							<outline text="margin-top: 3px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divDayTitle {">
							<outline text="font-size: 22px;"/>
							<outline text="font-weight: normal;" isComment="true"/>
							<outline text="margin-bottom: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divStoryPageTitle {">
							<outline text="font-size: 28px;"/>
							<outline text="letter-spacing: -1px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divStoryPagePostTime {">
							<outline text="font-size: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divOutlineHead {">
							<outline text="font-size: 18px;"/>
							<outline text="margin-bottom: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divAboutOutline .divOutlineText {">
							<outline text="font-size: 16px;"/>
							<outline text="margin-bottom: 7px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divAboutOutline ul {">
							<outline text="margin-left: 5px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTitledItem .divTitle {">
							<outline text="font-size: 22px;"/>
							<outline text="margin-top: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".nav-tabs {">
							<outline text="font-size: 16px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".nav-tabs &gt; li &gt; a, .nav-pills &gt; li &gt; a {">
							<outline text="padding-left: 2px;"/>
							<outline text="padding-right: 6px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divScriptingTabs li {">
							<outline text="width: 92px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTabContent {">
							<outline text="margin-top: 20px;"/>
							<outline text="margin-left: 30px;"/>
							<outline text="margin-right: 30px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divLastScriptingUpdate {">
							<outline text="display: none;"/>
							<outline text="}"/>
							</outline>
						<outline text=" #discuss {">
							<outline text="display: none;"/>
							<outline text="}"/>
							</outline>
						<outline text=".modal, .divTweetDialog { /*  1/23/19 by DW -- so the confirm dialog fits on iphone screens, per Dries's report */">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="left: 5%;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTweetDialog { /*  1/23/19 by DW */">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divBidenAd {">
							<outline text="position: fixed;"/>
							<outline text="top: 0;"/>
							<outline text="right: 0;"/>
							<outline text="opacity: .5;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* styles for tablet */">
					<outline text="@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {">
						<outline text="body {" created="Mon, 27 Mar 2023 03:47:51 GMT">
							<outline text="font-size: 17px;" created="Mon, 27 Mar 2023 03:47:54 GMT"/>
							<outline text="}" created="Mon, 27 Mar 2023 03:47:58 GMT"/>
							</outline>
						<outline text=".divPagetopText {">
							<outline text="top: 30;"/>
							<outline text="width: 100%;"/>
							<outline text="left: 0;"/>
							<outline text="padding-left: 0;"/>
							<outline text="height: 200px;" isComment="true"/>
							<outline text="color: white;" isComment="true"/>
							<outline text="padding-top: 3px;" isComment="true"/>
							<outline text="z-index: 2;" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopImage {">
							<outline text="height: 185px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 95%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-top: 200px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divLastScriptingUpdate {">
							<outline text="display: none;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divBidenAd {">
							<outline text="position: fixed;"/>
							<outline text="top: 0;"/>
							<outline text="right: 0;"/>
							<outline text="opacity: .5;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="chattemplate.html">
				<outline text="&lt;button id=&quot;idTwitterButton&quot;  class=&quot;btn btnTwitterButton&quot; type=&quot;button&quot; onclick=&quot;chatToggleConnect ();&quot;&gt;&amp;nbsp;&lt;/button&gt;" isComment="true" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="&lt;div class=&quot;divToggleConnect&quot;&gt;&lt;a onclick=&quot;chatToggleConnect ();&quot; id=&quot;idToggleConnect&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;" isComment="true"/>
				<outline text=""/>
				<outline text="&lt;style&gt;" isComment="true">
					<outline text=".divServerStats {">
						<outline text="margin-top: 0px;"/>
						<outline text="color: silver;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divChatlogViewer {">
						<outline text="margin-top: 5px;"/>
						<outline text="}"/>
						</outline>
					<outline text="&lt;/style&gt;"/>
					</outline>
				<outline text=""/>
				<outline text="&lt;div class=&quot;divAreaAboveTextBox&quot; id=&quot;idAreaAboveTextBox&quot; style=&quot;display: none;&quot;&gt;">
					<outline text="&lt;span class=&quot;spLeadingQuestion&quot; id=&quot;idLeadingQuestion&quot;&gt;">
						<outline text="&lt;/span&gt;"/>
						</outline>
					<outline text="&lt;/div&gt;"/>
					</outline>
				<outline text="&lt;div class=&quot;divEditorSection&quot; id=&quot;idEditorSection&quot; style=&quot;display: none;&quot;&gt;">
					<outline text="&lt;div class=&quot;divTweetCheckbox&quot;&gt;">
						<outline text="&lt;a href=&quot;#&quot; rel=&quot;tooltip&quot; data-placement=&quot;top&quot; data-original-title=&quot;Add this hashtag to tweet?&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;inputEchoCheckbox&quot;  id=&quot;idHashtagCheckbox&quot; value=&quot;xxx&quot;&gt;&lt;span style=&quot;color: black; margin-right: .5em;&quot; id=&quot;idShowHashtag&quot;&gt;&lt;/span&gt;&lt;/a&gt;" isComment="true"/>
						<outline text="&lt;a href=&quot;#&quot; rel=&quot;tooltip&quot; data-placement=&quot;top&quot; data-original-title=&quot;Echo messages to Twitter?&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;inputEchoCheckbox&quot;  id=&quot;idTweetCheckbox&quot; name=&quot;flEchoPostsToTwitter&quot; value=&quot;xxx&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt; Echo &lt;i class=&quot;fa fa-twitter&quot; style=&quot;color: #4099FF;&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;"/>
						<outline text="&lt;/div&gt;"/>
						</outline>
					<outline text="&lt;div class=&quot;divPrompt&quot; id=&quot;idPrompt&quot;&gt;">
						<outline text="&lt;/div&gt;"/>
						</outline>
					<outline text="&lt;div class=&quot;divBodyEditorContainer&quot;&gt;">
						<outline text="&lt;div class=&quot;divBodyEditor&quot; id=&quot;idBodyEditor&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;/div&gt;"/>
						</outline>
					<outline text="&lt;div class=&quot;divStuffThatsHiddenWhenNotActive&quot; id=&quot;idStuffThatsHiddenWhenNotActive&quot;&gt;">
						<outline text="&lt;div class=&quot;divPostButton&quot;&gt;">
							<outline text="&lt;button id=&quot;idCancelButton&quot; class=&quot;btn btnPost&quot; type=&quot;button&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;i class=&quot;fa fa-close&quot;&gt;&lt;/i&gt; Cancel&lt;/button&gt;"/>
							<outline text="&lt;button id=&quot;idPostButton&quot; class=&quot;btn btnPost&quot; type=&quot;button&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;i class=&quot;fa fa-check&quot;&gt;&lt;/i&gt; Post&lt;/button&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divCharCount&quot; id=&quot;idCharCount&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;/div&gt;"/>
						</outline>
					<outline text="&lt;/div&gt;"/>
					</outline>
				<outline text="&lt;div class=&quot;divServerStats&quot; id=&quot;idServerStats&quot;&gt;">
					<outline text="&amp;nbsp;"/>
					<outline text="&lt;/div&gt;"/>
					</outline>
				<outline text="&lt;div class=&quot;divChatlogViewer&quot; id=&quot;idChatlogViewer&quot;&gt;">
					<outline text="&lt;/div&gt;"/>
					</outline>
				</outline>
			<outline text="daytemplate.js">
				<outline text="var myVersion = &quot;0.6.18&quot;;"/>
				<outline text=""/>
				<outline text="const flLikesEnabled = false; //2/7/20 by DW -- I want to reclaim the space, they weren't being used, and the server needs a new interface"/>
				<outline text=""/>
				<outline text="var mySnap, flSnapDrawerOpen = false;"/>
				<outline text="var urlSidebarOpml = &quot;http://scripting.com/misc/menubar.opml&quot;;"/>
				<outline text="var drawerWidth = 300;"/>
				<outline text=""/>
				<outline text="const rightCaret = &quot;fa fa-caret-right darkCaretColor&quot;, downCaret = &quot;fa fa-caret-down lightCaretColor&quot;;"/>
				<outline text="var tweetSerialnum = 0;"/>
				<outline text="var urlTwitterServer = &quot;http://electricserver.scripting.com/&quot;;"/>
				<outline text="var urlTwitterServer = &quot;http://twitter2.radio3.io:5342/&quot;;" isComment="true"/>
				<outline text="const urlLinkblogPage = &quot;http://scripting.com/?tab=links&quot;; //9/13/17 by DW"/>
				<outline text="var ctLikesInPage = 0; //11/10/18 by DW"/>
				<outline text="" created="Fri, 03 Feb 2023 14:54:55 GMT"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="//tabs -- 9/11/17 by DW">
					<outline text="var tabs = {">
						<outline text="blog: {">
							<outline text="enabled: true,"/>
							<outline text="path: &quot;index.html&quot;,"/>
							<outline text="title: &quot;Blog&quot;,"/>
							<outline text="icon: &quot;book&quot;,"/>
							<outline text="urlHomeHtml: &quot;http://scripting.com/homepage.html&quot;,"/>
							<outline text="click: viewBlogTab"/>
							<outline text="},"/>
							</outline>
						<outline text="linkblog: {">
							<outline text="enabled: true,"/>
							<outline text="path: &quot;links.html&quot;,"/>
							<outline text="title: &quot;Links&quot;,"/>
							<outline text="icon: &quot;link&quot;,"/>
							<outline text="htmltext: &quot;&lt;div class=\&quot;divLinkblogDays\&quot; id=\&quot;idLinkblogDays\&quot; data-title=\&quot;Linkblog\&quot;&gt;&lt;/div&gt;&lt;div class=\&quot;divLinkblogSubscribeInfo\&quot; id=\&quot;idLinkblogSubscribeInfo\&quot;&gt;Get the new links from this page &lt;a href=\&quot;https://groups.google.com/forum/?fromgroups#!forum/daves-linkblog\&quot; target=\&quot;_blank\&quot;&gt;sent via email&lt;/a&gt; every night.&lt;/div&gt;&quot;,"/>
							<outline text="savedtext: undefined,"/>
							<outline text="urlLinkblogJson: &quot;http://radio3.io/users/davewiner/linkblog.json&quot;,"/>
							<outline text="click: viewLinkblogTab"/>
							<outline text="},"/>
							</outline>
						<outline text="news: {">
							<outline text="enabled: true,"/>
							<outline text="path: &quot;news.html&quot;,"/>
							<outline text="title: &quot;News&quot;,"/>
							<outline text="icon: &quot;newspaper-o&quot;,"/>
							<outline text="htmltext: &quot;&lt;div class=\&quot;divRiverContainer\&quot;&gt;&lt;div class=\&quot;divRiverDisplay\&quot; id=\&quot;idRiverDisplay\&quot; data-title=\&quot;River\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;,"/>
							<outline text="urlRiver: &quot;http://radio3.io/rivers/iowa.js&quot;,"/>
							<outline text="click: viewNewsTab"/>
							<outline text="},"/>
							</outline>
						<outline text="river: {">
							<outline text="enabled: false,"/>
							<outline text="path: &quot;river.html&quot;,"/>
							<outline text="title: &quot;River&quot;,"/>
							<outline text="icon: &quot;newspaper-o&quot;,"/>
							<outline text="htmltext: &quot;&lt;div class=\&quot;divRiverContainer\&quot;&gt;&lt;div class=\&quot;divRiverDisplay\&quot; id=\&quot;idRiverDisplay\&quot; data-title=\&quot;River\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;,"/>
							<outline text="urlRiver: &quot;http://radio3.io/rivers/iowa.js&quot;,"/>
							<outline text="click: viewRiverTab"/>
							<outline text="},"/>
							</outline>
						<outline text="chat: {">
							<outline text="enabled: false, //10/27/19 by DW"/>
							<outline text="path: &quot;chat.html&quot;,"/>
							<outline text="title: &quot;Chat&quot;,"/>
							<outline text="icon: &quot;comment-o&quot;,"/>
							<outline text="htmltext: &quot;&lt;div class=\&quot;divScriptingDiscuss\&quot; id=\&quot;idScriptingDiscuss\&quot; data-title=\&quot;Discuss\&quot;&gt;&lt;/div&gt;&quot;," isComment="true"/>
							<outline text="htmltext: &quot;&lt;div class=\&quot;divChatArea\&quot; id=\&quot;idChatArea\&quot; data-title=\&quot;Chat\&quot;&gt;&lt;/div&gt;&quot;,"/>
							<outline text="click: viewChatTab"/>
							<outline text="},"/>
							</outline>
						<outline text="discuss: {" isComment="true">
							<outline text="enabled: true,"/>
							<outline text="path: &quot;discuss.html&quot;,"/>
							<outline text="title: &quot;Discuss&quot;,"/>
							<outline text="icon: &quot;comment-o&quot;,"/>
							<outline text="htmltext: &quot;&lt;div class=\&quot;divScriptingDiscuss\&quot; id=\&quot;idScriptingDiscuss\&quot; data-title=\&quot;Discuss\&quot;&gt;&lt;/div&gt;&quot;,"/>
							<outline text="click: viewDiscussTab"/>
							<outline text="},"/>
							</outline>
						<outline text="about: {">
							<outline text="enabled: true,"/>
							<outline text="path: &quot;about.html&quot;,"/>
							<outline text="title: &quot;About&quot;,"/>
							<outline text="icon: &quot;info-circle&quot;,"/>
							<outline text="htmltext: &quot;&lt;div class=\&quot;divAboutOutline\&quot; id=\&quot;idAboutOutline\&quot;&gt;&lt;/div&gt;&quot;,"/>
							<outline text="outlineTitle: &quot;About Scripting News&quot;,"/>
							<outline text="outlineTitle: &quot;Monday, September 11, 2017&quot;," isComment="true"/>
							<outline text="urlAboutOpml: &quot;http://scripting.com/publicfolder/scripting/aboutpage.opml&quot;, //2/22/23 by DW"/>
							<outline text="urlAboutOpml: &quot;http://scripting.com/aboutpage.opml&quot;," isComment="true"/>
							<outline text="click: viewAboutTab"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="var savedState = {">
						<outline text="currentTab: &quot;blog&quot;,"/>
						<outline text="aboutTabExpansionState: undefined"/>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="function saveState () {">
						<outline text="localStorage.savedState = jsonStringify (savedState);"/>
						<outline text="}"/>
						</outline>
					<outline text="function setTabContent (htmltext) {">
						<outline text="$(&quot;#idTabContent&quot;).html (htmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function initBlogTab (callback) {">
						<outline text="tabs.blog.savedtext = $(&quot;#idBodytext&quot;).html ();"/>
						<outline text="callback ();"/>
						<outline text="" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="readHttpFile (tabs.blog.urlHomeHtml, function (htmltext) {" isComment="true">
							<outline text="tabs.blog.savedtext = htmltext;"/>
							<outline text="if (callback != undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewBlogTab (callback) {">
						<outline text="setTabContent (tabs.blog.savedtext);"/>
						<outline text="}"/>
						</outline>
					<outline text="" created="Wed, 19 Apr 2023 13:44:16 GMT"/>
					<outline text="function readFeed (feedUrl, callback) { //4/19/23 by DW" created="Wed, 19 Apr 2023 13:44:17 GMT">
						<outline text="var url = &quot;http://feeder.scripting.com/returnjson?url=&quot; + encodeURIComponent (feedUrl);" created="Fri, 19 Nov 2021 18:13:04 GMT"/>
						<outline text="readHttpFile (url, function (jsontext) {">
							<outline text="if (jsontext === undefined) {">
								<outline text="callback (undefined);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="callback (jstruct); "/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="callback (undefined);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 19 Apr 2023 13:44:30 GMT"/>
						</outline>
					<outline text="" created="Wed, 19 Apr 2023 13:44:17 GMT"/>
					<outline text="" created="Wed, 19 Apr 2023 13:44:17 GMT"/>
					<outline text="function initLinkblog (callback) {">
						<outline text="Changes" isComment="true" created="Wed, 19 Apr 2023 13:41:49 GMT">
							<outline text="4/19/23; 9:41:53 AM by DW" created="Wed, 19 Apr 2023 13:41:52 GMT">
								<outline text="Yet another iteration on rendering the linkblog." created="Wed, 19 Apr 2023 13:41:54 GMT"/>
								</outline>
							</outline>
						<outline text="" created="Wed, 19 Apr 2023 14:52:28 GMT"/>
						<outline text="console.log (&quot;initLinkblog&quot;);" created="Wed, 19 Apr 2023 13:50:02 GMT"/>
						<outline text="const firstLinkblogDay = new Date (&quot;April 17, 2023&quot;);" created="Wed, 19 Apr 2023 14:52:29 GMT"/>
						<outline text="" created="Wed, 19 Apr 2023 13:52:07 GMT"/>
						<outline text="function buildDaysTable (theFeed) {" created="Wed, 19 Apr 2023 13:52:07 GMT">
							<outline text="var daysTable = new Object ();" created="Wed, 19 Apr 2023 13:52:31 GMT"/>
							<outline text="theFeed.items.forEach (function (item) {" created="Wed, 19 Apr 2023 13:54:54 GMT">
								<outline text="const pubDate = new Date (item.pubDate);" created="Wed, 19 Apr 2023 14:04:49 GMT"/>
								<outline text="if (dayGreaterThanOrEqual (pubDate, firstLinkblogDay)) {" created="Wed, 19 Apr 2023 14:53:43 GMT">
									<outline text="const datestring = pubDate.toLocaleDateString (); //something like 4/19/2023" created="Wed, 19 Apr 2023 13:56:02 GMT"/>
									<outline text="var bucket = daysTable [datestring];" created="Wed, 19 Apr 2023 13:58:14 GMT"/>
									<outline text="if (bucket === undefined) {" created="Wed, 19 Apr 2023 13:58:37 GMT">
										<outline text="daysTable [datestring] = new Array ();" created="Wed, 19 Apr 2023 13:58:47 GMT"/>
										<outline text="bucket = daysTable [datestring];" created="Wed, 19 Apr 2023 13:59:24 GMT"/>
										<outline text="}" created="Wed, 19 Apr 2023 13:58:43 GMT"/>
										</outline>
									<outline text="bucket.push (item);" created="Wed, 19 Apr 2023 13:59:35 GMT"/>
									<outline text="}" created="Wed, 19 Apr 2023 14:53:58 GMT"/>
									</outline>
								<outline text="});" created="Wed, 19 Apr 2023 13:55:02 GMT"/>
								</outline>
							<outline text="return (daysTable);" created="Wed, 19 Apr 2023 13:52:31 GMT"/>
							<outline text="}" created="Wed, 19 Apr 2023 13:52:11 GMT"/>
							</outline>
						<outline text="function cleanDescription (desc) { //4/18/23 by DW" created="Wed, 19 Apr 2023 02:35:15 GMT">
							<outline text="if (beginsWith (desc, &quot;&lt;p&gt;&quot;)) {" created="Wed, 19 Apr 2023 02:35:25 GMT">
								<outline text="desc = stringDelete (desc, 1, 3);" created="Wed, 19 Apr 2023 02:35:49 GMT"/>
								<outline text="}" created="Wed, 19 Apr 2023 02:35:45 GMT"/>
								</outline>
							<outline text="if (endsWith (desc, &quot;&lt;/p&gt;\n&quot;)) {" created="Wed, 19 Apr 2023 02:35:25 GMT">
								<outline text="desc = stringMid (desc, 1, desc.length - 5);" created="Wed, 19 Apr 2023 02:35:49 GMT"/>
								<outline text="}" created="Wed, 19 Apr 2023 02:35:45 GMT"/>
								</outline>
							<outline text="return (desc);" created="Wed, 19 Apr 2023 02:36:40 GMT"/>
							<outline text="}" created="Wed, 19 Apr 2023 02:35:22 GMT"/>
							</outline>
						<outline text="function appendDay (dayString, theDayItems) {">
							<outline text="Changes " isComment="true">
								<outline text="4/19/23; 10:28:13 AM by DW" created="Wed, 19 Apr 2023 14:28:13 GMT">
									<outline text="Adapt to the new reality." created="Wed, 19 Apr 2023 14:28:13 GMT"/>
									</outline>
								<outline text="9/11/17; 9:36:39 AM by DW">
									<outline text="Use divDayTitle to format the day title, so it agrees with the blog format."/>
									</outline>
								<outline text="5/28/17; 9:25:59 AM by DW">
									<outline text="Remove dependency on pagetable.homePageDateFormat."/>
									</outline>
								<outline text="10/15/14; 1:47:22 PM by DW">
									<outline text="urlSplitter doesn't do nice things with links that begin with a blank. It also shouldn't be possible for one badly formed item to kill the whole day. "/>
									</outline>
								</outline>
							<outline text="" created="Wed, 19 Apr 2023 14:29:41 GMT"/>
							<outline text="const when = new Date (dayString); //turn something like 4/19/2023 to a date object" created="Wed, 19 Apr 2023 14:29:43 GMT"/>
							<outline text="var daytext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="const dateFormat = &quot;%A, %B %e, %Y&quot;;"/>
							<outline text="var datestring = formatDate (when, dateFormat);"/>
							<outline text="function add (s) {" created="Wed, 19 Jun 2013 18:21:56 GMT" pgfnum="26656">
								<outline text="daytext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
								<outline text="}" created="Wed, 19 Jun 2013 18:22:01 GMT" pgfnum="26658"/>
								</outline>
							<outline text="console.log (&quot;appendDay: &quot; + datestring);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDay\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="theDayItems.forEach (function (item) {" created="Wed, 19 Apr 2023 14:32:49 GMT">
								<outline text="var link = &quot;&quot;;" created="Fri, 13 Jan 2023 13:10:13 GMT"/>
								<outline text="if (typeof item.link == &quot;string&quot;) { //1/13/23 by DW" created="Fri, 13 Jan 2023 13:10:33 GMT">
									<outline text="link = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot;&gt;&quot; + getDomainFromUrl (item.link) + &quot;&lt;/a&gt;&quot;;"/>
									<outline text="}" created="Fri, 13 Jan 2023 13:10:50 GMT"/>
									</outline>
								<outline text="add (&quot;&lt;p&gt;&quot; + cleanDescription (item.description) + &quot; &quot; + link + &quot;&lt;/p&gt;&quot;); //4/18/23 by DW"/>
								<outline text="});" created="Wed, 19 Apr 2023 14:32:57 GMT"/>
								</outline>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="return (daytext)"/>
							<outline text="}"/>
							</outline>
						<outline text="" created="Wed, 19 Apr 2023 13:50:07 GMT"/>
						<outline text="var feedUrl = &quot;http://data.feedland.org/feeds/davewiner.xml&quot;;" created="Wed, 19 Apr 2023 13:42:08 GMT"/>
						<outline text="readFeed (feedUrl, function (theFeed) {" created="Wed, 19 Apr 2023 13:47:04 GMT">
							<outline text="if (theFeed === undefined) {" created="Wed, 19 Apr 2023 13:47:24 GMT">
								<outline text="console.log (&quot;initLinkblog: theFeed == &quot; + theFeed);" created="Wed, 19 Apr 2023 13:47:35 GMT"/>
								<outline text="}" created="Wed, 19 Apr 2023 13:47:30 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 19 Apr 2023 13:47:31 GMT">
								<outline text="console.log (&quot;initLinkblog: theFeed == &quot; + jsonStringify (theFeed));" isComment="true" created="Wed, 19 Apr 2023 13:47:35 GMT"/>
								<outline text="var daysTable = buildDaysTable (theFeed), htmltext = &quot;&quot;;" created="Wed, 19 Apr 2023 13:51:56 GMT"/>
								<outline text="console.log (&quot;initLinkblog: daysTable == &quot; + jsonStringify (daysTable));" isComment="true" created="Wed, 19 Apr 2023 13:47:35 GMT"/>
								<outline text="for (var x in daysTable) {" created="Wed, 19 Apr 2023 14:26:35 GMT">
									<outline text="htmltext += appendDay (x, daysTable [x]);"/>
									<outline text="}" created="Wed, 19 Apr 2023 14:26:44 GMT"/>
									</outline>
								<outline text="tabs.linkblog.savedtext = htmltext"/>
								<outline text="}" created="Wed, 19 Apr 2023 13:47:32 GMT"/>
								</outline>
							<outline text="callback ();" created="Wed, 19 Apr 2023 14:21:25 GMT"/>
							<outline text="});" created="Wed, 19 Apr 2023 13:47:16 GMT"/>
							</outline>
						<outline text="" created="Wed, 19 Apr 2023 13:41:49 GMT"/>
						<outline text="var url = &quot;http://radio3.io/users/davewiner/linkblog.html&quot;;" isComment="true" created="Sat, 02 Oct 2021 14:16:32 GMT"/>
						<outline text="readHttpFile (url, function (htmltext) {" isComment="true">
							<outline text="tabs.linkblog.savedtext = htmltext"/>
							<outline text="if (callback != undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="" created="Sat, 02 Oct 2021 14:16:33 GMT"/>
						<outline text="viewRadio3Links (function (htmltext) { //10/1/21 by DW" isComment="true" created="Fri, 01 Oct 2021 14:11:37 GMT">
							<outline text="tabs.linkblog.savedtext = htmltext;"/>
							<outline text="if (callback != undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 01 Oct 2021 14:31:02 GMT"/>
							</outline>
						<outline text="" created="Fri, 01 Oct 2021 14:35:22 GMT"/>
						<outline text="function appendDay (jstruct) {" isComment="true">
							<outline text="Changes " isComment="true">
								<outline text="9/11/17; 9:36:39 AM by DW">
									<outline text="Use divDayTitle to format the day title, so it agrees with the blog format."/>
									</outline>
								<outline text="5/28/17; 9:25:59 AM by DW">
									<outline text="Remove dependency on pagetable.homePageDateFormat."/>
									</outline>
								<outline text="10/15/14; 1:47:22 PM by DW">
									<outline text="urlSplitter doesn't do nice things with links that begin with a blank. It also shouldn't be possible for one badly formed item to kill the whole day. "/>
									</outline>
								</outline>
							<outline text="var daytext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="var dateFormat = &quot;%A, %B %e, %Y&quot;;"/>
							<outline text="try {dateFormat = pagetable.homePageDateFormat} catch (err) {};"/>
							<outline text="var datestring = formatDate (jstruct.when, dateFormat);"/>
							<outline text="var datestring = formatDate (jstruct.when, pagetable.homePageDateFormat);" isComment="true"/>
							<outline text="function add (s) {" created="Wed, 19 Jun 2013 18:21:56 GMT" pgfnum="26656">
								<outline text="daytext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
								<outline text="}" created="Wed, 19 Jun 2013 18:22:01 GMT" pgfnum="26658"/>
								</outline>
							<outline text="console.log (&quot;appendDay: &quot; + datestring);" isComment="true"/>
							<outline text="add (&quot;&lt;div class=\&quot;divDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);" isComment="true"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDay\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="for (var i = 0; i &lt; jstruct.dayHistory.length; i++) {">
								<outline text="try {">
									<outline text="var item = jstruct.dayHistory [i], linktext = &quot;&quot;, icon = &quot;&quot;;"/>
									<outline text="//set linktext, icon">
										<outline text="if ((item.link != undefined) &amp;&amp; (item.link.length &gt; 0)) {">
											<outline text="var splitUrl = urlSplitter (trimLeading (item.link, &quot; &quot;)); //10/15/14 by DW -- remove leading blanks"/>
											<outline text="var host = splitUrl.host;"/>
											<outline text="if (beginsWith (host, &quot;www.&quot;)) {">
												<outline text="host = stringDelete (host, 1, 4);"/>
												<outline text="}"/>
												</outline>
											<outline text="linktext = &quot; &lt;a class=\&quot;aHost\&quot; href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&quot;;"/>
											<outline text=""/>
											<outline text="icon = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&lt;img class=\&quot;imgFavicon\&quot; src=\&quot;&quot; + getFavicon (item.link) + &quot;\&quot;&gt;&lt;/a&gt;&quot;; //9/26/14 by DW" isComment="true"/>
											<outline text=""/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="add (&quot;&lt;p&gt;&quot; + icon + item.text + linktext + &quot;&lt;/p&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (error) {">
									<outline text="console.log (&quot;appendDay: error == &quot; + error + &quot; while adding item == &quot; + item.text);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="return (daytext)"/>
							<outline text="}"/>
							</outline>
						<outline text="readHttpFile (tabs.linkblog.urlLinkblogJson, function (jsontext) {" isComment="true">
							<outline text="if (jsontext !== undefined) { //11/19/17 by DW">
								<outline text="var htmltext = &quot;&quot;, daysTable = JSON.parse (jsontext);"/>
								<outline text="for (var i = 0; i &lt; daysTable.length; i++) { //10/8/16 by DW">
									<outline text="htmltext += appendDay (daysTable [i].jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="tabs.linkblog.savedtext = htmltext"/>
								<outline text="}"/>
								</outline>
							<outline text="if (callback != undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewLinkblogTab (callback) {">
						<outline text="setTabContent (tabs.linkblog.htmltext);"/>
						<outline text="$(&quot;#idLinkblogDays&quot;).html (tabs.linkblog.savedtext);"/>
						<outline text="if (tabs.linkblog.savedtext !== undefined) {" isComment="true">
							<outline text="setTabContent (tabs.linkblog.htmltext);"/>
							<outline text="$(&quot;#idLinkblogDays&quot;).html (tabs.linkblog.savedtext);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {" isComment="true">
							<outline text="function appendDay (jstruct) {">
								<outline text="Changes " isComment="true">
									<outline text="9/11/17; 9:36:39 AM by DW">
										<outline text="Use divDayTitle to format the day title, so it agrees with the blog format."/>
										</outline>
									<outline text="5/28/17; 9:25:59 AM by DW">
										<outline text="Remove dependency on pagetable.homePageDateFormat."/>
										</outline>
									<outline text="10/15/14; 1:47:22 PM by DW">
										<outline text="urlSplitter doesn't do nice things with links that begin with a blank. It also shouldn't be possible for one badly formed item to kill the whole day. "/>
										</outline>
									</outline>
								<outline text="var daytext = &quot;&quot;, indentlevel = 0;"/>
								<outline text="var dateFormat = &quot;%A, %B %e, %Y&quot;;"/>
								<outline text="try {dateFormat = pagetable.homePageDateFormat} catch (err) {};"/>
								<outline text="var datestring = formatDate (jstruct.when, dateFormat);"/>
								<outline text="var datestring = formatDate (jstruct.when, pagetable.homePageDateFormat);" isComment="true"/>
								<outline text="function add (s) {" created="Wed, 19 Jun 2013 18:21:56 GMT" pgfnum="26656">
									<outline text="daytext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
									<outline text="}" created="Wed, 19 Jun 2013 18:22:01 GMT" pgfnum="26658"/>
									</outline>
								<outline text="console.log (&quot;appendDay: &quot; + datestring);" isComment="true"/>
								<outline text="add (&quot;&lt;div class=\&quot;divDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);"/>
								<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);" isComment="true"/>
								<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDay\&quot;&gt;&quot;); indentlevel++;"/>
								<outline text="for (var i = 0; i &lt; jstruct.dayHistory.length; i++) {">
									<outline text="try {">
										<outline text="var item = jstruct.dayHistory [i], linktext = &quot;&quot;, icon = &quot;&quot;;"/>
										<outline text="//set linktext, icon">
											<outline text="if ((item.link != undefined) &amp;&amp; (item.link.length &gt; 0)) {">
												<outline text="var splitUrl = urlSplitter (trimLeading (item.link, &quot; &quot;)); //10/15/14 by DW -- remove leading blanks"/>
												<outline text="var host = splitUrl.host;"/>
												<outline text="if (beginsWith (host, &quot;www.&quot;)) {">
													<outline text="host = stringDelete (host, 1, 4);"/>
													<outline text="}"/>
													</outline>
												<outline text="linktext = &quot; &lt;a class=\&quot;aHost\&quot; href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&quot;;"/>
												<outline text=""/>
												<outline text="icon = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&lt;img class=\&quot;imgFavicon\&quot; src=\&quot;&quot; + getFavicon (item.link) + &quot;\&quot;&gt;&lt;/a&gt;&quot;; //9/26/14 by DW" isComment="true"/>
												<outline text=""/>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="add (&quot;&lt;p&gt;&quot; + icon + item.text + linktext + &quot;&lt;/p&gt;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="catch (error) {">
										<outline text="console.log (&quot;appendDay: error == &quot; + error + &quot; while adding item == &quot; + item.text);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
								<outline text="return (daytext)"/>
								<outline text="}"/>
								</outline>
							<outline text="readHttpFile (&quot;http://radio3.io/users/davewiner/linkblog.json&quot;, function (jsontext) {">
								<outline text="var htmltext = &quot;&quot;, daysTable = JSON.parse (jsontext);"/>
								<outline text="for (var i = 0; i &lt; daysTable.length; i++) { //10/8/16 by DW">
									<outline text="htmltext += appendDay (daysTable [i].jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="setTabContent (tabs.linkblog.htmltext);"/>
								<outline text="tabs.linkblog.savedtext = htmltext"/>
								<outline text="$(&quot;#idLinkblogDays&quot;).html (htmltext);"/>
								<outline text="if (callback != undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewRiverTab (callback) {">
						<outline text="setTabContent (tabs.river.htmltext);"/>
						<outline text="httpGetRiver (tabs.river.urlRiver, &quot;idRiverDisplay&quot;, function () {">
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewDiscussTab (callback) {">
						<outline text="setTabContent (tabs.discuss.htmltext);"/>
						<outline text="viewDiscussPage ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function viewChatTab (callback) { //4/24/19 by DW">
						<outline text="setTabContent (tabs.chat.htmltext);"/>
						<outline text="viewChatPage ();"/>
						<outline text="setTabContent (&quot;&lt;p&gt;Coming soooon.&lt;/p&quot;);" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function viewNewsTab (callback) {" created="Tue, 18 Oct 2022 20:07:53 GMT">
						<outline text="window.location.href = &quot;http://news.scripting.com/&quot;;" isComment="true" created="Tue, 18 Oct 2022 20:08:02 GMT"/>
						<outline text="}" created="Tue, 18 Oct 2022 20:08:01 GMT"/>
						</outline>
					<outline text="function viewAboutTab (callback) {">
						<outline text="setTabContent (tabs.about.htmltext);"/>
						<outline text="outlineBrowserData.expandCollapseCallback = function (idnum) {">
							<outline text="savedState.aboutTabExpansionState = getExpansionState ();"/>
							<outline text="saveState ();"/>
							<outline text="}"/>
							</outline>
						<outline text="readOpmlFile (tabs.about.urlAboutOpml, &quot;idAboutOutline&quot;, tabs.about.outlineTitle, function () {">
							<outline text="if (savedState.aboutTabExpansionState !== undefined) {">
								<outline text="applyExpansionState (savedState.aboutTabExpansionState);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function initTab (tabname) {">
						<outline text="let theTab = tabs [tabname];"/>
						<outline text="if (theTab.click !== undefined) {">
							<outline text="theTab.click ();"/>
							<outline text="}"/>
							</outline>
						<outline text="savedState.currentTab = tabname;" isComment="true"/>
						<outline text="saveState ();" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function tabClick (tabname) {">
						<outline text="console.log (&quot;tabClick: tabname == &quot; + tabname);"/>
						<outline text="var redirectname = tabname;"/>
						<outline text="switch (tabname) {">
							<outline text="case &quot;blog&quot;:">
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;linkblog&quot;:">
								<outline text="redirectname = &quot;links&quot;;"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;news&quot;: //10/18/22 by DW">
								<outline text="window.location.href = &quot;http://news.scripting.com/&quot;;" created="Tue, 18 Oct 2022 20:08:02 GMT"/>
								<outline text="return;"/>
								</outline>
							<outline text="case &quot;about&quot;:">
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="window.location.href = &quot;?tab=&quot; + redirectname;"/>
						<outline text="}"/>
						</outline>
					<outline text="function startTabsIfHomePage (callback) { ">
						<outline text="if (config.flHomePage) {">
							<outline text="$(&quot;#idTabList&quot;).empty ();"/>
							<outline text="for (var x in tabs) { ">
								<outline text="var theTab = tabs [x];"/>
								<outline text="if (theTab.enabled) {">
									<outline text="var activetab = &quot;&quot;;"/>
									<outline text="if (x == savedState.currentTab) {">
										<outline text="activetab = &quot; class=\&quot;active\&quot;&quot;"/>
										<outline text="}"/>
										</outline>
									<outline text="var clickScript = &quot;tabClick (\&quot;&quot; + x + &quot;\&quot;)&quot;;"/>
									<outline text="var tabtitle = &quot;&lt;i class=\&quot;iTabIcon fa fa-&quot; + theTab.icon + &quot;\&quot;&gt;&lt;/i&gt;&quot; + theTab.title;"/>
									<outline text="$(&quot;#idTabList&quot;).append (&quot;&lt;li&quot; + activetab + &quot; id='&quot; + x + &quot;'&gt;&lt;a data-toggle=\&quot;tab\&quot; onclick='&quot; + clickScript + &quot;'&gt;&quot;  + tabtitle + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"/>
									<outline text="$(&quot;#&quot; + x).on (&quot;click&quot;, function (event) {">
										<outline text="var id = $(this).attr (&quot;id&quot;);"/>
										<outline text="console.log (&quot;You clicked on the tab with id == &quot; + id);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="initBlogTab (function () {">
								<outline text="initLinkblog (function () {">
									<outline text="initTab (savedState.currentTab);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					</outline>
				<outline text="//like -- 11/8/18 by DW">
					<outline text="const urlLikeServer = &quot;http://likes.scripting.com/&quot;;"/>
					<outline text=""/>
					<outline text="function ifConnected (confirmationPrompt, callback) { //12/15/18 by DW">
						<outline text="twStorageData.urlTwitterServer = urlLikeServer;"/>
						<outline text="if (twIsTwitterConnected ()) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="confirmDialog (confirmationPrompt, function () {">
								<outline text="twConnectToTwitter ();"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serverCall (verb, params, callback, server, method, data) {">
						<outline text="Changes" isComment="true">
							<outline text="10/30/18; 12:22:05 PM by DW">
								<outline text="New optional params, method and data. Rewrite to use jQuery ajax routine instead of utilities routine. "/>
								</outline>
							<outline text="10/29/18; 10:34:00 AM by DW">
								<outline text="If accessToken param is not present, add it. "/>
								</outline>
							<outline text="9/25/18; 1:01:04 PM by DW">
								<outline text="New optional param, server."/>
								</outline>
							</outline>
						<outline text="const timeoutInMilliseconds = 30000;"/>
						<outline text="if (method === undefined) {">
							<outline text="method = &quot;GET&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (params === undefined) {">
							<outline text="params = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (params.accessToken === undefined) { //10/29/18 by DW">
							<outline text="if (localStorage.twOauthToken !== undefined) {">
								<outline text="params.accessToken = localStorage.twOauthToken;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (server === undefined) { //9/25/18 by DW">
							<outline text="server = urlLikeServer;"/>
							<outline text="}"/>
							</outline>
						<outline text="var apiUrl = server + verb;"/>
						<outline text="var paramString = buildParamList (params);"/>
						<outline text="if (paramString.length &gt; 0) {">
							<outline text="apiUrl += &quot;?&quot; + paramString;"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (&quot;serverCall: verb == &quot; + verb + &quot;, apiUrl == &quot; + apiUrl);" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="var ajaxResult = $.ajax ({ ">
							<outline text="url: apiUrl,"/>
							<outline text="type: method,"/>
							<outline text="data: data,"/>
							<outline text="dataType: &quot;text&quot;, "/>
							<outline text="headers: undefined," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout: timeoutInMilliseconds "/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="for info about timeouts see this page." isComment="true">
								<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
								</outline>
							<outline text="console.log (&quot;serverCall: url == &quot; + apiUrl + &quot;, error == &quot; + jsonStringify (status));" created="Sun, 13 Jan 2013 14:34:21 GMT" pgfnum="17098"/>
							<outline text="callback ({message: &quot;Error reading the file.&quot;});"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function likeClick (idLikes, urlForLike) {">
						<outline text="ifConnected (&quot;Sign on to Twitter to enable Like/Unlike?&quot;, function () {">
							<outline text="var params = {">
								<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
								<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
								<outline text="url: urlForLike"/>
								<outline text="};"/>
								</outline>
							<outline text="console.log (&quot;likeClick:&quot;);"/>
							<outline text="$(&quot;#&quot; + idLikes).blur ();"/>
							<outline text="serverCall (&quot;toggle&quot;, params, function (err, jsontext) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;likeClick: err == &quot; + jsonStringify (err));"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;likeClick: jstruct == &quot; + jsonStringify (jstruct));"/>
									<outline text="viewLikes (idLikes, urlForLike, jstruct.likes);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="twStorageData.urlTwitterServer = urlLikeServer;" isComment="true"/>
						<outline text="if (twIsTwitterConnected ()) {" isComment="true">
							<outline text="var params = {">
								<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
								<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
								<outline text="url: urlForLike"/>
								<outline text="};"/>
								</outline>
							<outline text="console.log (&quot;likeClick:&quot;);"/>
							<outline text="$(&quot;#&quot; + idLikes).blur ();"/>
							<outline text="serverCall (&quot;toggle&quot;, params, function (err, jsontext) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;likeClick: err == &quot; + jsonStringify (err));"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;likeClick: jstruct == &quot; + jsonStringify (jstruct));"/>
									<outline text="viewLikes (idLikes, urlForLike, jstruct.likes);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {" isComment="true">
							<outline text="confirmDialog (&quot;Sign on to Twitter to enable Like/Unlike?&quot;, function () {">
								<outline text="twConnectToTwitter ();"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getLikes (url, callback) {">
						<outline text="var params = {">
							<outline text="url: url"/>
							<outline text="};"/>
							</outline>
						<outline text="serverCall (&quot;likes&quot;, params, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;getLikes: err == &quot; + jsonStringify (err));"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="console.log (&quot;getLikes: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getLikesArray (theArray, callback) { //2/7/20 by DW">
						<outline text="var params = {">
							<outline text="jsontext: jsonStringify (theArray)"/>
							<outline text="};"/>
							</outline>
						<outline text="serverCall (&quot;getlikesarray&quot;, params, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;getLikesArray: err == &quot; + jsonStringify (err));"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="console.log (&quot;getLikes: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewLikes (idLikes, myUrl, likes) { ">
						<outline text="Changes" isComment="true">
							<outline text="11/22/18; 1:55:46 PM by DW">
								<outline text="Instead of saying (thumb) 12 Likes say ">
									<outline text="(thumb) 12"/>
									</outline>
								</outline>
							<outline text="11/7/18; 3:49:43 PM by DW\">
								<outline text="&lt;span class=&quot;spLikes&quot;&gt;&lt;span class=&quot;spThumb&quot;&gt;&lt;a onclick=&quot;likeClick (15)&quot;&gt;&lt;i class=&quot;fa fa-thumbs-up&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&amp;nbsp;&lt;span rel=&quot;tooltip&quot; title=&quot;&quot; data-original-title=&quot;littleoutliner&quot;&gt;1 like&lt;/span&gt;&lt;/span&gt;" isComment="true"/>
								</outline>
							</outline>
						<outline text="function getThumbIcon (thumbDirection, flopen) {">
							<outline text="var open = &quot;&quot;;"/>
							<outline text="if (flopen) {">
								<outline text="open = &quot;o-&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (&quot;&lt;span class=\&quot;spThumb\&quot;&gt;&lt;i class=\&quot;fa fa-thumbs-&quot; + open + thumbDirection + &quot;\&quot;&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="var likesObject = $(&quot;#&quot; + idLikes);"/>
						<outline text="var ct = 0, likenames = &quot;&quot;, thumbDirection = &quot;up&quot;, flOpenThumb = true, myScreenname = twGetScreenName ();"/>
						<outline text="if (likes !== undefined) {">
							<outline text="likes.forEach (function (name) {">
								<outline text="ct++;"/>
								<outline text="likenames += name + &quot;, &quot;;"/>
								<outline text="if (name == myScreenname) {">
									<outline text="thumbDirection = &quot;down&quot;;"/>
									<outline text="flOpenThumb = false;"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var theThumb = getThumbIcon (&quot;up&quot;, flOpenThumb);"/>
						<outline text="var theThumb = &quot;&lt;span class=\&quot;spThumb\&quot;&gt;&lt;i class=\&quot;fa fa-thumbs-o-&quot; + thumbDirection + &quot;\&quot;&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&quot;;" isComment="true"/>
						<outline text=""/>
						<outline text="var ctLikes = ct; //11/22/18 by DW"/>
						<outline text="var ctLikes = ct + &quot; like&quot;;" isComment="true"/>
						<outline text="if (ct != 1) {" isComment="true">
							<outline text="ctLikes += &quot;s&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (ct &gt; 0) {">
							<outline text="likenames = stringMid (likenames, 1, likenames.length - 2); //pop off comma and blank at end"/>
							<outline text="ctLikes = &quot;&lt;span rel=\&quot;tooltip\&quot; title=\&quot;&quot; + likenames + &quot;\&quot;&gt;&quot; + ctLikes + &quot;&lt;/span&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="var htmltext = &quot;&lt;span class=\&quot;spLikes\&quot;&gt;&lt;a onclick=\&quot;likeClick ('&quot; + idLikes + &quot;', '&quot; + myUrl + &quot;')\&quot;&gt;&quot; + theThumb + &quot;&lt;/a&gt;&quot; + ctLikes + &quot;&lt;/span&gt;&quot;;"/>
						<outline text="likesObject.html (htmltext);"/>
						<outline text="$(&quot;[rel=\&quot;tooltip\&quot;]&quot;).tooltip ();"/>
						<outline text="$(&quot;.spThumb&quot;).hover (function () {" isComment="true">
							<outline text="console.log (&quot;hover&quot;);"/>
							<outline text="$(this).html (getThumbIcon (thumbDirection, false));"/>
							<outline text="});"/>
							</outline>
						<outline text="$(&quot;.spThumb&quot;).mouseleave (function () {" isComment="true">
							<outline text="console.log (&quot;mouseleave&quot;);"/>
							<outline text="$(this).html (getThumbIcon (thumbDirection, true));"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getPostPermalink (theItem) { //12/15/18 by DW">
						<outline text="var href = undefined;"/>
						<outline text="if (theItem.className == &quot;divTitledItem&quot;) {">
							<outline text="if (config.flHomePage) {">
								<outline text="$(theItem).children (&quot;.divTitle&quot;).each (function () {">
									<outline text="$(this).children (&quot;a&quot;).each (function () {">
										<outline text="var myhref = $(this).attr (&quot;href&quot;);"/>
										<outline text="if (myhref !== undefined) {">
											<outline text="href = myhref;"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="href = window.location.href;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="$(theItem).children (&quot;.spPermaLink&quot;).each (function () {">
								<outline text="$(this).children (&quot;a&quot;).each (function () {">
									<outline text="href = $(this).attr (&quot;href&quot;);"/>
									<outline text="console.log (&quot;setupLikes: href == &quot; + href);" isComment="true"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (href);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getPostText (theItem) { //used in prompts, for example -- 12/16/18 by DW">
						<outline text="var theClass = $(theItem).attr (&quot;class&quot;), theText;"/>
						<outline text="switch (theClass) {">
							<outline text="case &quot;divSingularItem&quot;:">
								<outline text="theText = $(theItem).text ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;divTitledItem&quot;:">
								<outline text="$(theItem).children (&quot;.divTitle&quot;).each (function () {">
									<outline text="$(this).children (&quot;a&quot;).each (function () {">
										<outline text="var myhref = $(this).attr (&quot;href&quot;);"/>
										<outline text="if (myhref !== undefined) {">
											<outline text="theText = $(this).text ();"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (theText);"/>
						<outline text="}"/>
						</outline>
					<outline text="function setupLikes () {">
						<outline text="Changes" isComment="true">
							<outline text="2/7/20; 4:11:55 PM by DW">
								<outline text="Turned off the feature."/>
								</outline>
							<outline text="2/7/20; 12:47:11 PM by DW">
								<outline text="Had to comment the code because the array was too big to transmit as a query param"/>
								<outline text="Make one call to the server for all the likeable objects.">
									<outline text="We send an array of hrefs, it sends us back an array of arrays (each listing the users who liked the object)."/>
									</outline>
								</outline>
							<outline text="11/22/18; 1:44:58 PM by DW">
								<outline text="All posts are by default likeable starting today on pages created after November 22, 2018."/>
								</outline>
							</outline>
						<outline text="if (flLikesEnabled) { //2/7/20 by DW">
							<outline text="$(&quot;.divTitledItem, .divSingularItem&quot;).each (function () {">
								<outline text="var theText = maxStringLength ($(this).text (), 25);"/>
								<outline text="var flLikeSetup = getBoolean ($(this).data (&quot;likesetup&quot;));"/>
								<outline text="var attval = $(this).data (&quot;fllikeable&quot;), flLikeable;"/>
								<outline text="if (dayGreaterThanOrEqual (config.now, &quot;November 22, 2018&quot;)) {">
									<outline text="flLikeable = true; //default -- 11/22/18 by DW"/>
									<outline text="if (attval !== undefined) {">
										<outline text="flLikeable = getBoolean (attval);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="flLikeable = getBoolean (attval);"/>
									<outline text="}"/>
									</outline>
								<outline text="if ((flLikeable) &amp;&amp; (!flLikeSetup)) {">
									<outline text="var id = &quot;idLike&quot; + ctLikesInPage++;"/>
									<outline text="var theLikes = [" isComment="true">
										<outline text="&quot;moose&quot;, &quot;emms&quot;, &quot;boo&quot;, &quot;igor&quot;, &quot;zita&quot;, &quot;irwin&quot;"/>
										<outline text="];"/>
										</outline>
									<outline text="console.log (&quot;setupLikes: likeable == &quot; + theText);" isComment="true"/>
									<outline text="$(this).attr (&quot;data-likesetup&quot;, true);"/>
									<outline text="$(this).append (&quot;&lt;span id=\&quot;&quot; + id + &quot;\&quot;&gt;&lt;/span&gt;&quot;);"/>
									<outline text=""/>
									<outline text="var href = getPostPermalink (this); //12/15/18 by DW"/>
									<outline text="getLikes (href, function (err, theLikes) {">
										<outline text="if (err) {">
											<outline text="console.log (&quot;setupLikes: err.message == &quot; + err.message);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="viewLikes (id, href, theLikes);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="var hrefs = new Array (); //2/7/20 by DW" isComment="true"/>
							<outline text="$(&quot;.divTitledItem, .divSingularItem&quot;).each (function () {" isComment="true">
								<outline text="var flLikeSetup = getBoolean ($(this).data (&quot;likesetup&quot;));"/>
								<outline text="var attval = $(this).data (&quot;fllikeable&quot;), flLikeable;"/>
								<outline text="if (dayGreaterThanOrEqual (config.now, &quot;November 22, 2018&quot;)) {">
									<outline text="flLikeable = true; //default -- 11/22/18 by DW"/>
									<outline text="if (attval !== undefined) {">
										<outline text="flLikeable = getBoolean (attval);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="flLikeable = getBoolean (attval);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (hrefs.length &lt; 5) {">
									<outline text="if ((flLikeable) &amp;&amp; (!flLikeSetup)) {">
										<outline text="var href = getPostPermalink (this);"/>
										<outline text="hrefs.push (href);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="console.log (&quot;setupLikes: hrefs == &quot; + jsonStringify (hrefs));" isComment="true"/>
							<outline text="getLikesArray (hrefs, function (err, theArray) {" isComment="true">
								<outline text="if (err) {">
									<outline text="console.log (&quot;setupLikes: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;setupLikes: theArray == &quot; + jsonStringify (theArray));"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//twitter comments -- 12/14/18 by DW">
					<outline text="const flTwitterCommentsEnabled = false; //2/3/23 by DW" created="Fri, 03 Feb 2023 14:54:55 GMT"/>
					<outline text="const tweetCommentHashtag = &quot;#scriptingnews&quot;;"/>
					<outline text="const ctUrlInTweetChars = 23;"/>
					<outline text=""/>
					<outline text="function startTweetDialog (thePrompt, callback) {">
						<outline text="$(&quot;#idTweetDialogTitle&quot;).html (&quot;Enter your tweet here.&quot;);" isComment="true"/>
						<outline text="var tweetEditorOptions = {">
							<outline text="ctHashTagChars: tweetCommentHashtag.length + 1 + ctUrlInTweetChars + 1, "/>
							<outline text="prompt: thePrompt,"/>
							<outline text="placeholderText: &quot;This text will appear in the body of your tweet.&quot;,"/>
							<outline text="savedTweetText: &quot;&quot;,"/>
							<outline text="flCustomHtml: false,"/>
							<outline text="flCancelButton: true"/>
							<outline text="}"/>
							</outline>
						<outline text="startTweetEditor (&quot;idMyTweetEditor&quot;, tweetEditorOptions, callback);"/>
						<outline text="$(&quot;#idTweetDialog&quot;).modal (&quot;show&quot;);"/>
						<outline text="$(&quot;#idMyTweetEditor&quot;).keyup (function (event) {" isComment="true">
							<outline text="console.log (&quot;Keyup in #idMyTweetEditor.&quot;);"/>
							<outline text="autosize (this);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function closeTweetDialog () {">
						<outline text="$(&quot;#idTweetDialog&quot;).modal (&quot;hide&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addItemToFeed (params, callback) {">
						<outline text="params.oauth_token = localStorage.twOauthToken;"/>
						<outline text="params.oauth_token_secret = localStorage.twOauthTokenSecret;"/>
						<outline text="serverCall (&quot;addtofeed&quot;, params, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;addItemToFeed: err == &quot; + jsonStringify (err));"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="console.log (&quot;addItemToFeed: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (undefined, jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function postTweetComment (editedText, urlPermalink) {">
						<outline text="var tweetText = editedText + &quot; &quot; + tweetCommentHashtag + &quot; &quot; + urlPermalink;"/>
						<outline text="console.log (&quot;postTweetComment: tweetText == &quot; + tweetText);"/>
						<outline text="twStorageData.urlTwitterServer = urlLikeServer;"/>
						<outline text="twTweet (tweetText, &quot;&quot;, function (data) {">
							<outline text="console.log (jsonStringify (data));" isComment="true"/>
							<outline text="closeTweetDialog ();"/>
							<outline text="var urlTweet = &quot;https://twitter.com/&quot; + twGetScreenName () + &quot;/status/&quot; + data.id_str;"/>
							<outline text="window.open (urlTweet);"/>
							<outline text="var item = {">
								<outline text="link: urlTweet, "/>
								<outline text="text: editedText,"/>
								<outline text="category: tweetCommentHashtag,"/>
								<outline text="permalink: urlTweet "/>
								<outline text="};"/>
								</outline>
							<outline text="addItemToFeed (item, function (err, data) {">
								<outline text="console.log (jsonStringify (data));"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function setupTwitterComments () {">
						<outline text="if (flTwitterCommentsEnabled) {" created="Fri, 03 Feb 2023 14:55:17 GMT">
							<outline text="const shareIcon = &quot;&lt;i class=\&quot;fa fa-retweet\&quot;&gt;&lt;/i&gt;&quot;;"/>
							<outline text="const shareIcon = &quot;&lt;i class=\&quot;fa fa-share\&quot;&gt;&lt;/i&gt;&quot;;" isComment="true"/>
							<outline text="const shareIcon = &quot;&lt;i class=\&quot;fab fa-twitter\&quot;&gt;&lt;/i&gt;&quot;;" isComment="true"/>
							<outline text="const maxTextLengthForPrompt = 50;"/>
							<outline text="$(&quot;.divTitledItem, .divSingularItem&quot;).each (function () {">
								<outline text="var flCommentSetup = getBoolean ($(this).data (&quot;commentsetup&quot;)); //10/17/19 by DW"/>
								<outline text="if (!flCommentSetup) { //10/17/19 by DW">
									<outline text="var urlPermalink = getPostPermalink (this); "/>
									<outline text="var theText = getPostText (this);"/>
									<outline text="var theIcon = &quot;&lt;a title=\&quot;Click here to RT in Twitter.\&quot;&gt;&quot; + shareIcon + &quot;&lt;/a&gt;&quot;;"/>
									<outline text="var htmltext = &quot;&lt;span class=\&quot;spTwitterComment\&quot;&gt;&quot; + theIcon + &quot;&lt;/span&gt;&quot;;"/>
									<outline text="var theObject = $(htmltext);"/>
									<outline text="$(theObject).click (function () {">
										<outline text="ifConnected (&quot;Sign on to Twitter to enable comments?&quot;, function () {">
											<outline text="var thePrompt = &quot;RT: &quot; + maxLengthString (theText, maxTextLengthForPrompt);"/>
											<outline text="startTweetDialog (thePrompt, function (tweetText) {">
												<outline text="if (tweetText === undefined) { //user clicked Cancel">
													<outline text="closeTweetDialog ();"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="postTweetComment (tweetText, urlPermalink);"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="$(this).append (theObject);"/>
									<outline text="$(this).attr (&quot;data-commentsetup&quot;, true); //indicate that we've been here -- 10/17/19 by DW"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Fri, 03 Feb 2023 14:55:20 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//chat -- 4/18/19 by DW">
					<outline text="const chatConsts = {">
						<outline text="urlChatServer: &quot;http://chat.scripting.com/&quot;,"/>
						<outline text="urlChatSocket: &quot;ws://chat.scripting.com:1413/&quot;,"/>
						<outline text="urlChatHtml: &quot;http://fargo.io/code/shared/oldschool/chattemplate.html&quot;,"/>
						<outline text="leadingQuestion: &quot;&quot;,"/>
						<outline text="editorPlaceholderText: &quot;What's happening?&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="function chatToggleConnect () { //xxx">
						<outline text="toggleConnect ();" isComment="true"/>
						<outline text="twStorageData.urlTwitterServer = urlLikeServer; //8/21/19 by DW"/>
						<outline text="twToggleConnectCommand ();"/>
						<outline text="updateTwitterButton ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function updateTwitterButton () {">
						<outline text="Changes" isComment="true" created="Wed, 18 Jan 2023 22:13:07 GMT">
							<outline text="1/18/23; 5:13:10 PM by DW" created="Wed, 18 Jan 2023 22:13:09 GMT">
								<outline text="Ryan Tate reports an error, twStorageConsts not defined. " created="Wed, 18 Jan 2023 22:13:11 GMT"/>
								<outline text="Hard to understand, but wtf let's work around it. " created="Wed, 18 Jan 2023 22:13:30 GMT"/>
								</outline>
							</outline>
						<outline text="const twitterIcon = &quot;&lt;i class=\&quot;fab fa-twitter\&quot; style=\&quot;color: #4099FF;\&quot;&gt;&lt;/i&gt;&quot;; //1/18/23 by DW"/>
						<outline text="var buttontext = twitterIcon + &quot; Sign &quot; + ((twIsTwitterConnected ()) ? &quot;off&quot; : &quot;on&quot;);"/>
						<outline text="var buttontext = twStorageConsts.fontAwesomeIcon + &quot; Sign &quot; + ((twIsTwitterConnected ()) ? &quot;off&quot; : &quot;on&quot;);" isComment="true"/>
						<outline text="$(&quot;#idToggleConnect&quot;).html (buttontext);"/>
						<outline text="if ($(&quot;#idTwitterButton&quot;).html () != buttontext) {" isComment="true">
							<outline text="$(&quot;#idTwitterButton&quot;).html (buttontext);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
							<outline text="}"/>
							</outline>
						<outline text="if ($(&quot;#idTwitterButton&quot;).css (&quot;visibility&quot;) != &quot;visible&quot;) {" isComment="true">
							<outline text="$(&quot;#idTwitterButton&quot;).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="//set screen name" isComment="true">
							<outline text="var name = localStorage.twScreenName;"/>
							<outline text="var url = &quot;http://twitter.com/&quot; + name;"/>
							<outline text="var script = &quot;openUrl ('&quot; + url + &quot;')&quot;;"/>
							<outline text="var linktoname = &quot;&lt;a onclick=\&quot;&quot; + script + &quot;\&quot;&gt;&quot; + name + &quot;&lt;/a&gt;&quot;"/>
							<outline text="var linktoname = &quot;&lt;a href=\&quot;http://twitter.com/&quot; + name + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + name + &quot;&lt;/a&gt;&quot;" isComment="true"/>
							<outline text="linktoname = (twIsTwitterConnected ()) ? linktoname : &quot;&quot;;"/>
							<outline text="if ($(idScreenName).html () != linktoname) {">
								<outline text="$(idScreenName).html (linktoname);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
								<outline text="}"/>
								</outline>
							<outline text="if ($(&quot;#idTwitterUsername&quot;).html () != name) {">
								<outline text="$(&quot;#idTwitterUsername&quot;).html (name);"/>
								<outline text="}"/>
								</outline>
							<outline text="twUpdateTwitterMenuItem (&quot;idTwitterConnectMenuItem&quot;);"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getChatUserInfo (callback) {">
						<outline text="if (twIsTwitterConnected ()) {">
							<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
								<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
								<outline text="oauth_token_secret: localStorage.twOauthTokenSecret" created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
								<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
								</outline>
							<outline text="var url = chatConsts.urlChatServer + &quot;getuserinfo?&quot; + twBuildParamList (paramtable, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
							<outline text="readHttpFile (url, function (jsontext) { ">
								<outline text="var userinfo;"/>
								<outline text="if (jsontext !== undefined) {">
									<outline text="userinfo = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;getUserInfo: userinfo == &quot; + jsonStringify (userinfo));"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (undefined, userinfo);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewChatPage () { //4/18/19 by DW">
						<outline text="$(&quot;#idDayContainer&quot;).css (&quot;background-color&quot;, &quot;whitesmoke&quot;); //4/20/19 by DW"/>
						<outline text="$(&quot;#idScriptingTab&quot;).css (&quot;background-color&quot;, &quot;whitesmoke&quot;); //4/24/19 by DW" isComment="true"/>
						<outline text="readHttpFile (chatConsts.urlChatHtml, function (chatHtmltext) { ">
							<outline text="$(&quot;#idChatArea&quot;).html (chatHtmltext);"/>
							<outline text="getChatUserInfo (function (err, userinfo) {">
								<outline text="const chatOptions = {">
									<outline text="urlChatServer: chatConsts.urlChatServer,"/>
									<outline text="urlChatSocket: chatConsts.urlChatSocket,"/>
									<outline text="editorPlaceholderText: chatConsts.editorPlaceholderText,"/>
									<outline text="minSecsBetwAutoSave: 3,"/>
									<outline text="userInfoFromTwitter: userinfo,"/>
									<outline text="newMessageCallback: function (jstruct) {">
										<outline text="console.log (&quot;newMessageCallback: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
										<outline text="},"/>
										</outline>
									<outline text="updatedMessageCallback: function (jstruct) {">
										<outline text="console.log (&quot;updatedMessageCallback: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
										<outline text="},"/>
										</outline>
									<outline text="getConfigCallback: function () {">
										<outline text="return (chatConsts);"/>
										<outline text="},"/>
										</outline>
									<outline text="prefsChangedCallback: function () {" isComment="true">
										<outline text="prefsChanged ();"/>
										<outline text="},"/>
										</outline>
									<outline text="processTextCallback: function (s) {">
										<outline text="function markdownProcess (s) {" isComment="true">
											<outline text="return (s);"/>
											<outline text="var md = new Markdown.Converter ();" isComment="true"/>
											<outline text="" isComment="true"/>
											<outline text="if (beginsWith (s, &quot;&lt;p&gt;&quot;) &amp;&amp; endsWith (s, &quot;&lt;/p&gt;&quot;)) { //Markdown won't go into HTML objects" isComment="true">
												<outline text="s = stringMid (s, 4, s.length - 5);"/>
												<outline text="}"/>
												</outline>
											<outline text="" isComment="true"/>
											<outline text="if (s [0] == &quot;#&quot;) { //10/18/16 by DW -- neuter the # if it appears at the beginning of the post" isComment="true">
												<outline text="s = &quot;&amp;#35;&quot; + stringMid (s, 2, s.length - 1);"/>
												<outline text="}"/>
												</outline>
											<outline text="" isComment="true"/>
											<outline text="return (md.makeHtml (s));" isComment="true"/>
											<outline text="}"/>
											</outline>
										<outline text="return (emojiProcess (s));"/>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="myChatApp = new chatApp (chatOptions, function () {">
									<outline text="$(&quot;#idLeadingQuestion&quot;).text (chatConsts.leadingQuestion);"/>
									<outline text="$(&quot;#idVersionNumber&quot;).text (&quot;v&quot; + appConsts.version);" isComment="true"/>
									<outline text="$(&quot;#idMainColumn&quot;).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
									<outline text="updateAreaAboveTextBox ();" isComment="true"/>
									<outline text="updateTwitterButton ();" isComment="true"/>
									<outline text="updateJsonMenuItem ();" isComment="true"/>
									<outline text="self.setInterval (everySecond, 1000); "/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//how long running -- 8/9/19 by DW">
					<outline text="function howLongSinceStartAsString (whenStart) {">
						<outline text="var x = howLongSinceStart (whenStart);"/>
						<outline text="function getnum (num, units) {">
							<outline text="if (num != 1) {">
								<outline text="units += &quot;s&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (num + &quot; &quot; + units);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (getnum (x.years, &quot;year&quot;) + &quot;, &quot; + getnum (x.months, &quot;month&quot;) + &quot;, &quot; + getnum (x.days, &quot;day&quot;) + &quot;, &quot; + getnum (x.hours, &quot;hour&quot;) + &quot;, &quot; + getnum (x.minutes, &quot;minute&quot;) + &quot;, &quot; + getnum (x.seconds, &quot;second&quot;) + &quot;.&quot;);"/>
						<outline text="" isComment="true"/>
						<outline text="function daysInYear (year) {" isComment="true">
							<outline text="var flLeapYear = ((year % 400) == 0) || ((year % 100) != 0 &amp;&amp; ((year % 4) == 0));"/>
							<outline text="return ((flLeapYear) ? 366 : 365);"/>
							<outline text="}"/>
							</outline>
						<outline text="function daysInMonth (month, year) { " isComment="true">
							<outline text="return (new Date (year, month, 0).getDate ()); "/>
							<outline text="} "/>
							</outline>
						<outline text="const ctSecsInDay = 60 * 60 * 24;" isComment="true"/>
						<outline text="const ctMilliSecsInDay = 1000 * ctSecsInDay;" isComment="true"/>
						<outline text="const now = new Date ();" isComment="true"/>
						<outline text="var theYear = whenStart.getFullYear ();" isComment="true"/>
						<outline text="var ctDays = (now - whenStart) / ctMilliSecsInDay;" isComment="true"/>
						<outline text="var ctYears = 0;" isComment="true"/>
						<outline text="while (true) {" isComment="true">
							<outline text="if (ctDays &lt;= daysInYear (theYear)) {">
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="ctDays -= daysInYear (theYear);"/>
							<outline text="ctYears++;"/>
							<outline text="theYear++;"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="var theMonth = 0, ctMonths = 0;" isComment="true"/>
						<outline text="while (true) {" isComment="true">
							<outline text=""/>
							<outline text="if (ctDays &lt; daysInMonth (theMonth, theYear)) {">
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="ctDays -= daysInMonth (theMonth, theYear);"/>
							<outline text="ctMonths++;"/>
							<outline text="theMonth++;"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="const ctWholeDays = Math.floor (ctDays);" isComment="true"/>
						<outline text="var ctRemainingSecs = (ctDays - ctWholeDays) * ctSecsInDay;" isComment="true"/>
						<outline text="var ctHours = Math.floor (ctRemainingSecs / (60 * 60));" isComment="true"/>
						<outline text="ctRemainingSecs -= ctHours * 60 * 60;" isComment="true"/>
						<outline text="var ctMinutes = Math.floor (ctRemainingSecs / 60);" isComment="true"/>
						<outline text="ctRemainingSecs -= ctMinutes * 60;" isComment="true"/>
						<outline text="ctRemainingSecs = Math.floor (ctRemainingSecs);" isComment="true"/>
						<outline text="return (getnum (ctYears, &quot;year&quot;) + &quot;, &quot; + getnum (ctMonths, &quot;month&quot;) + &quot;, &quot; + getnum (ctWholeDays, &quot;day&quot;) + &quot;, &quot; + getnum (ctHours, &quot;hour&quot;) + &quot;, &quot; + getnum (ctMinutes, &quot;minute&quot;) + &quot;, &quot; + getnum (ctRemainingSecs, &quot;second&quot;) + &quot;.&quot;);" isComment="true"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//infinite scrolling -- 10/17/19 by DW">
					<outline text="var whenLastMoreButtonClick = new Date (0);"/>
					<outline text="var currentOldestPageDate = undefined;"/>
					<outline text=""/>
					<outline text="function moreButtonClick () {">
						<outline text="Changes" isComment="true">
							<outline text="10/17/19; 11:33:25 AM by DW">
								<outline text="http://rockaway.scripting.com:1400/day?blog=dave&amp;day=2019-10-01T15:26:10.412Z"/>
								</outline>
							</outline>
						<outline text="if (currentOldestPageDate === undefined) {">
							<outline text="currentOldestPageDate = config.oldestDayOnHomePage;"/>
							<outline text="}"/>
							</outline>
						<outline text="var day = dateYesterday (currentOldestPageDate);"/>
						<outline text="var url = &quot;http://montana.scripting.com:1400/day?blog=dave&amp;day=&quot; + day.toUTCString ();"/>
						<outline text="currentOldestPageDate = day;"/>
						<outline text="readHttpFileThruProxy (url, undefined, function (htmltext) {">
							<outline text="if (htmltext !== undefined) {">
								<outline text="$(&quot;#idTabContent&quot;).append (&quot;&lt;div class=\&quot;divArchivePageDay\&quot;&gt;&quot; + htmltext + &quot;&lt;/div&gt;&quot;)"/>
								<outline text="setupJavaScriptFeatures ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function infiniteScrollHandler () {">
						<outline text="Changes" isComment="true">
							<outline text="7/4/20; 11:38:37 AM by DW">
								<outline text="Disabled the feature. "/>
								</outline>
							</outline>
						<outline text="window.onscroll = function (ev) {" isComment="true">
							<outline text="if ((window.innerHeight + window.scrollY) &gt;= document.body.offsetHeight) {">
								<outline text="if (secondsSince (whenLastMoreButtonClick) &gt; 1) {">
									<outline text="console.log (&quot;infiniteScrollHandler: you're at the bottom of the page&quot;);"/>
									<outline text="whenLastMoreButtonClick = new Date ();"/>
									<outline text="moreButtonClick (1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//view Radio3 links rewrite -- 10/1/21 by DW" created="Fri, 01 Oct 2021 14:17:57 GMT">
					<outline text="function viewRadio3Links (callback) {" created="Fri, 01 Oct 2021 14:10:43 GMT">
						<outline text="console.log (&quot;viewRadio3Links&quot;);" created="Wed, 19 Apr 2023 13:29:53 GMT"/>
						<outline text="" created="Wed, 19 Apr 2023 13:29:58 GMT"/>
						<outline text="var linkbloghtmltext = &quot;&quot;;" created="Fri, 01 Oct 2021 14:29:13 GMT"/>
						<outline text="var pagetable = {" created="Fri, 01 Oct 2021 13:41:21 GMT">
							<outline text="homePageDateFormat: &quot;%A, %B %e, %Y&quot;,"/>
							<outline text="whenLinkblogStart: &quot;2021-08-26T21:47:54.261Z&quot;," isComment="true" created="Fri, 01 Oct 2021 13:53:31 GMT"/>
							<outline text="whenLinkblogStart: new Date (&quot;9/1/2014&quot;),"/>
							<outline text="twitterScreenname: &quot;davewiner&quot;" created="Fri, 01 Oct 2021 13:44:03 GMT"/>
							<outline text="};" created="Fri, 01 Oct 2021 13:41:27 GMT"/>
							</outline>
						<outline text="" created="Fri, 01 Oct 2021 13:42:45 GMT"/>
						<outline text="var ctDaysOnPage = 25;"/>
						<outline text="var daysTable;"/>
						<outline text=""/>
						<outline text="function viewPagetable () {">
							<outline text="console.log (jsonStringify (pagetable));"/>
							<outline text="}"/>
							</outline>
						<outline text="function viewLastUpdate (when) {">
							<outline text="$(&quot;#idLastUdpate&quot;).html (formatDate (when, &quot;%a %d %b %Y, %r&quot;));"/>
							<outline text="}"/>
							</outline>
						<outline text="function appendDay (jstruct) {">
							<outline text="Changes " isComment="true">
								<outline text="5/28/17; 9:25:59 AM by DW">
									<outline text="Remove dependency on pagetable.homePageDateFormat."/>
									</outline>
								<outline text="10/15/14; 1:47:22 PM by DW">
									<outline text="urlSplitter doesn't do nice things with links that begin with a blank. It also shouldn't be possible for one badly formed item to kill the whole day. "/>
									</outline>
								</outline>
							<outline text="console.log (&quot;appendDay: jstruct == &quot; + jsonStringify (jstruct)); //4/19/23 by DW" isComment="true" created="Wed, 19 Apr 2023 13:28:16 GMT"/>
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="var dateFormat = &quot;%A, %B %e, %Y&quot;;"/>
							<outline text="try {dateFormat = pagetable.homePageDateFormat} catch (err) {};"/>
							<outline text="var datestring = formatDate (jstruct.when, dateFormat);"/>
							<outline text="var datestring = formatDate (jstruct.when, pagetable.homePageDateFormat);" isComment="true"/>
							<outline text="function add (s) {" created="Wed, 19 Jun 2013 18:21:56 GMT" pgfnum="26656">
								<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
								<outline text="}" created="Wed, 19 Jun 2013 18:22:01 GMT" pgfnum="26658"/>
								</outline>
							<outline text="console.log (&quot;appendDay: &quot; + datestring);" isComment="true"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDay\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="for (var i = 0; i &lt; jstruct.dayHistory.length; i++) {">
								<outline text="try {">
									<outline text="var item = jstruct.dayHistory [i], linktext = &quot;&quot;, icon = &quot;&quot;;"/>
									<outline text="//set linktext, icon">
										<outline text="if ((item.link != undefined) &amp;&amp; (item.link.length &gt; 0)) {">
											<outline text="var splitUrl = urlSplitter (trimLeading (item.link, &quot; &quot;)); //10/15/14 by DW -- remove leading blanks"/>
											<outline text="var host = splitUrl.host;"/>
											<outline text="if (beginsWith (host, &quot;www.&quot;)) {">
												<outline text="host = stringDelete (host, 1, 4);"/>
												<outline text="}"/>
												</outline>
											<outline text="linktext = &quot; &lt;a class=\&quot;aHost\&quot; href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&quot;;"/>
											<outline text=""/>
											<outline text="icon = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&lt;img class=\&quot;imgFavicon\&quot; src=\&quot;&quot; + getFavicon (item.link) + &quot;\&quot;&gt;&lt;/a&gt;&quot;; //9/26/14 by DW" isComment="true"/>
											<outline text=""/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="add (&quot;&lt;p&gt;&quot; + icon + item.text + linktext + &quot;&lt;/p&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (error) {">
									<outline text="console.log (&quot;appendDay: error == &quot; + error + &quot; while adding item == &quot; + item.text);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="$(&quot;#idLinkblogDays&quot;).append (htmltext);" isComment="true"/>
							<outline text="linkbloghtmltext += htmltext;" created="Fri, 01 Oct 2021 14:30:03 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="function loadOneDay (theDay, callback) {">
							<outline text="var urlFolder = &quot;http://radio3.io/users/&quot; + pagetable.twitterScreenname + &quot;/&quot;;"/>
							<outline text="var urlFolder = stringPopLastField (pagetable.homePageUrl, &quot;/&quot;) + &quot;/&quot;;" isComment="true"/>
							<outline text="var url = urlFolder + getDatePath (theDay) + &quot;history.json&quot;, whenReadStart = new Date ();"/>
							<outline text="readHttpFile (url, function (jsontext) {">
								<outline text="var jstruct = undefined;" created="Fri, 01 Oct 2021 13:47:16 GMT"/>
								<outline text="try {">
									<outline text="jstruct = JSON.parse (jsontext);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;loadOneDay: err.message == &quot; + err.message);" created="Fri, 01 Oct 2021 13:46:47 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {" created="Fri, 01 Oct 2021 13:47:25 GMT">
									<outline text="callback (jstruct);" created="Fri, 01 Oct 2021 13:47:32 GMT"/>
									<outline text="}" created="Fri, 01 Oct 2021 13:47:35 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function loadDaysTable (callback) {">
							<outline text="Changes" isComment="true">
								<outline text="10/24/14; 6:03:57 PM by DW">
									<outline text="Add callback param."/>
									</outline>
								<outline text="9/3/14; 4:37:04 PM by DW">
									<outline text="Chris Dadswell reports that he's missing the first day of his blog. Not sure what's going on, I think it might be a timezone thing (he's in the UK). Instead of figuring it out, I go back one full day before the blogstart date. That will rule out that possibility. "/>
									</outline>
								<outline text="9/2/14; 7:36:11 AM by DW">
									<outline text="Stop looking when you hit the start date of the blog."/>
									</outline>
								</outline>
							<outline text="var whenBlogStart = dateYesterday (pagetable.whenLinkblogStart), whenstart = new Date ();"/>
							<outline text="function loadOne (theDay) {">
								<outline text="loadOneDay (theDay, function (jstruct) {">
									<outline text="var yesterday = dateYesterday (theDay);"/>
									<outline text="if (jstruct != undefined) {">
										<outline text="appendDay (jstruct); //why is this here? -- 11/6/14 by DW"/>
										<outline text="daysTable.unshift ({">
											<outline text="when: theDay,"/>
											<outline text="jstruct: jstruct"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if ((daysTable.length &lt; ctDaysOnPage) &amp;&amp; (dayGreaterThanOrEqual (yesterday, whenBlogStart))) {">
										<outline text="loadOne (yesterday);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (callback != undefined) { //10/24/14 by DW">
											<outline text="callback ();"/>
											<outline text="}"/>
											</outline>
										<outline text="console.log (&quot;loadDaysTable: &quot; + secondsSince (whenstart) + &quot; secs.&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="daysTable = new Array ();"/>
							<outline text="loadOne (new Date ());"/>
							<outline text="}"/>
							</outline>
						<outline text="function viewDays () {">
							<outline text="$(&quot;#idLinkblogDays&quot;).html (&quot;&quot;);"/>
							<outline text="for (var i = daysTable.length - 1; i &gt;= 0; i--) {">
								<outline text="appendDay (daysTable [i].jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function reloadTodaysLinks () {">
							<outline text="var now = new Date (), flfound = false;"/>
							<outline text="loadOneDay (now, function (jstruct) {">
								<outline text="for (var i = 0; i &lt; daysTable.length; i++) {">
									<outline text="if (daysTable [i] != undefined) {">
										<outline text="if (sameDay (daysTable [i].when, now)) {">
											<outline text="daysTable [i].jstruct = jstruct;"/>
											<outline text="flfound = true;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (!flfound) {">
									<outline text="daysTable.push (jstruct);"/>
									<outline text="delete daysTable [0];"/>
									<outline text="}"/>
									</outline>
								<outline text="viewDays ();"/>
								<outline text="viewLastUpdate (jstruct.when);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Fri, 01 Oct 2021 13:38:16 GMT"/>
						<outline text="loadDaysTable (function () {">
							<outline text="viewDays ();"/>
							<outline text="callback (linkbloghtmltext);" created="Fri, 01 Oct 2021 14:30:47 GMT"/>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Fri, 01 Oct 2021 14:10:53 GMT"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function setTextSize (amount) {">
					<outline text=""/>
					<outline text="function getFontSize (x) {">
						<outline text="var att = $(x).css (&quot;font-size&quot;);"/>
						<outline text="att = stringMid (att, 1, att.length - 2); //pop off px"/>
						<outline text="var size = Number (att);"/>
						<outline text="console.log (&quot;getFontSize: size == &quot; + size);"/>
						<outline text="return (size);"/>
						<outline text="}"/>
						</outline>
					<outline text="function bumpFontSize (x) {">
						<outline text="var newsize = getFontSize (x) + amount;"/>
						<outline text="if (newsize &gt; 0) {">
							<outline text="$(x).css (&quot;font-size&quot;, newsize);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="$(&quot;.divSingularItem&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;font-size&quot;, getFontSize (this) + amount);" isComment="true"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;green&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.spTitleLink&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;purple&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.divTitledItem li&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;orange&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.divDayTitle a&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;silver&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function increaseTextSize () { //5/19/18 by DW">
					<outline text="$(&quot;#idTextSizePlus&quot;).blur (); "/>
					<outline text="setTextSize (1);"/>
					<outline text="alert (&quot;increaseTextSize&quot;);" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function decreaseTextSize () { //5/19/18 by DW">
					<outline text="$(&quot;#idTextSizeMinus&quot;).blur (); "/>
					<outline text="setTextSize (-1);"/>
					<outline text="alert (&quot;decreaseTextSize&quot;);" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function initWedge (domObject, clickCallback) { //the caret goes to the left of the object -- 7/24/17 by DW">
					<outline text="var theIcon = $(&quot;&lt;i class=\&quot;&quot; + rightCaret + &quot;\&quot;&gt;&lt;/i&gt;&quot;);"/>
					<outline text="var theWedge = $(&quot;&lt;span class=\&quot;spScriptingNewsWedge\&quot;&gt;&lt;/span&gt;&quot;);"/>
					<outline text="$(theWedge).append (theIcon);"/>
					<outline text="$(domObject).prepend (theWedge);"/>
					<outline text="theWedge.click (function () {">
						<outline text="var className = $(theIcon).attr (&quot;class&quot;);"/>
						<outline text="if (className == rightCaret) {">
							<outline text="clickCallback (true); //expand"/>
							<outline text="$(theIcon).attr (&quot;class&quot;, downCaret);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="clickCallback (false); //collapse"/>
							<outline text="$(theIcon).attr (&quot;class&quot;, rightCaret);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="return (theWedge);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableType (attname, htmlTemplate) {">
					<outline text="function fixYoutubeUrl (url) { //3/18/18; by DW">
						<outline text="Changes" isComment="true">
							<outline text="3/18/18; 2:29:29 PM by DW">
								<outline text="Accept a URL in either of these forms and return a URL in the second form.">
									<outline text="https://www.youtube.com/watch?v=YedqV4Gl_us"/>
									<outline text="https://www.youtube.com/embed/YedqV4Gl_us"/>
									</outline>
								</outline>
							</outline>
						<outline text="const prefix = &quot;https://www.youtube.com/watch?v=&quot;;"/>
						<outline text="if (beginsWith (url, prefix)) {">
							<outline text="url = &quot;https://www.youtube.com/embed/&quot; + stringDelete (url, 1, prefix.length);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (url);"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var parentOfTweet = this, theObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="var attval = $(this).data (attname.toLowerCase ());"/>
						<outline text="if (attval !== undefined) {">
							<outline text="if (attname == &quot;urlvideo&quot;) { //3/18/18; by DW">
								<outline text="attval = fixYoutubeUrl (attval);"/>
								<outline text="}"/>
								</outline>
							<outline text="initWedge (parentOfTweet, function (flExpand) {">
								<outline text="function exposetheObject () {">
									<outline text="$(theObject).slideDown (0, 0, function () {">
										<outline text="$(theObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="function exposetheObject () {" isComment="true">
									<outline text="$(theObject).slideDown (75, undefined, function () {">
										<outline text="$(theObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flExpand) {">
									<outline text="if (theObject === undefined) {">
										<outline text="let htmltext = replaceAll (htmlTemplate, &quot;[%attval%]&quot;, attval);"/>
										<outline text="theObject = $(htmltext);"/>
										<outline text="$(parentOfTweet).append (theObject);"/>
										<outline text="exposetheObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposetheObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(theObject).slideUp (0, 0, function () {">
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableImages () {">
					<outline text="setupExpandableType (&quot;urlexpandableimage&quot;, &quot;&lt;img class=\&quot;imgExpandable\&quot; src=\&quot;[%attval%]\&quot;&gt;&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableVideo () {">
					<outline text="setupExpandableType (&quot;urlvideo&quot;, &quot;&lt;iframe width=\&quot;560\&quot; height=\&quot;315\&quot; src=\&quot;[%attval%]\&quot; frameborder=\&quot;0\&quot; allowfullscreen&gt;&lt;/iframe&gt;&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableDisqusThreads () {">
					<outline text="const myDisqusGroup = &quot;scripting&quot;;"/>
					<outline text=""/>
					<outline text="function getDisqusCommentsText (thispageurl, disqusGroup) {">
						<outline text="var s = &quot;&quot;;"/>
						<outline text="if (disqusGroup === undefined) {">
							<outline text="disqusGroup = myDisqusGroup;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (thispageurl === undefined) {">
							<outline text="thispageurl = window.location.href;"/>
							<outline text="}"/>
							</outline>
						<outline text="var disqusTextArray = [">
							<outline text="&quot;\n&lt;div class=\&quot;divDisqusComments\&quot;&gt;\n&quot;,">
								<outline text="&quot;\t&lt;div id=\&quot;disqus_thread\&quot;&gt;&lt;/div&gt;\n&quot;,"/>
								<outline text="&quot;\t&lt;script&gt;\n&quot;,">
									<outline text="&quot;\t\tvar disqus_config = function () {\n&quot;,">
										<outline text="&quot;\t\t\tthis.page.url = \&quot;&quot; + thispageurl + &quot;\&quot;; \n&quot;,"/>
										<outline text="&quot;\t\t\t};\n&quot;,"/>
										</outline>
									<outline text="&quot;\t\t(function () {  \n&quot;,">
										<outline text="&quot;\t\t\tvar d = document, s = d.createElement ('script');\n&quot;,"/>
										<outline text="&quot;\t\t\ts.src = '//&quot; + disqusGroup + &quot;.disqus.com/embed.js';  \n&quot;,"/>
										<outline text="&quot;\t\t\ts.setAttribute ('data-timestamp', +new Date());\n&quot;,"/>
										<outline text="&quot;\t\t\t(d.head || d.body).appendChild(s);\n&quot;,"/>
										<outline text="&quot;\t\t\t})();\n&quot;,"/>
										</outline>
									<outline text="&quot;\t\t&lt;/script&gt;\n&quot;,"/>
									</outline>
								<outline text="&quot;\t&lt;/div&gt;\n&quot;"/>
								</outline>
							<outline text="];"/>
							</outline>
						<outline text="for (var i = 0; i &lt; disqusTextArray.length; i++) {">
							<outline text="s += disqusTextArray [i];"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (&quot;getDisqusCommentsText: &quot; + s);"/>
						<outline text=""/>
						<outline text="return (s)"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function startDisqus (disqusGroup) {">
						<outline text="(function() {">
							<outline text="var dsq = document.createElement ('script'); dsq.type = 'text/javascript'; dsq.async = true;"/>
							<outline text="dsq.src = '//' + disqusGroup + '.disqus.com/embed.js';"/>
							<outline text="$(&quot;body&quot;).appendChild (dsq);"/>
							<outline text="})();"/>
							</outline>
						<outline text="(function() {" isComment="true">
							<outline text="var s = document.createElement('script'); s.async = true;"/>
							<outline text="s.type = 'text/javascript';"/>
							<outline text="s.src = '//' + disqusGroup + '.disqus.com/count.js';"/>
							<outline text="(document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);"/>
							<outline text="}());"/>
							</outline>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="setupExpandableType (&quot;flExpandableDisqusThread&quot;, &quot;&lt;div class=\&quot;divDisqusThread\&quot;&gt;&lt;div id=\&quot;disqus_thread\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;);"/>
					<outline text="startDisqus (myDisqusGroup);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableImages () {" isComment="true">
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var parentOfTweet = this, imageObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="var urlExpandableImage = $(this).data (&quot;urlexpandableimage&quot;);"/>
						<outline text="if (urlExpandableImage !== undefined) {">
							<outline text="initWedge (parentOfTweet, function (flExpand) {">
								<outline text="function exposeImageObject () {">
									<outline text="$(imageObject).slideDown (75, undefined, function () {">
										<outline text="$(imageObject).on (&quot;load&quot;, function () {" isComment="true">
											<outline text="$(imageObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="$(imageObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flExpand) {">
									<outline text="if (imageObject === undefined) {">
										<outline text="imageObject = $(&quot;&lt;img class=\&quot;imgExpandable\&quot; src=\&quot;&quot; + urlExpandableImage + &quot;\&quot;&gt;&quot;);"/>
										<outline text="$(parentOfTweet).append (imageObject);"/>
										<outline text="exposeImageObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeImageObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(imageObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupTweets () {">
					<outline text="Changes" isComment="true">
						<outline text="12/22/19; 11:35:24 AM by DW">
							<outline text="I want to use a single-purpose server to get embed codes from Twitter. The former code, part of the nodeStorage API, is hard to modify and it has gotten very slow for scripting.com. It's worth having a dedicated server for this application. Note there will be problems if we try to integrate this code into an Electron app, per the comments in the API code. "/>
							</outline>
						</outline>
					<outline text="function getEmbedCode (id, callback) {">
						<outline text="var url = &quot;https://api.twitter.com/1/statuses/oembed.json?id=&quot; + id;" isComment="true"/>
						<outline text="readHttpFileThruProxy (url, undefined, function (jsontext) {" isComment="true">
							<outline text="if (jsontext === undefined) {">
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="callback (jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="callback (undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="var url = &quot;http://twitterembed.scripting.com/getembedcode?id=&quot; + encodeURIComponent (id);"/>
						<outline text="$.ajax ({">
							<outline text="type: &quot;GET&quot;,"/>
							<outline text="url: url,"/>
							<outline text="success: function (data) {">
								<outline text="callback (data);" created="Wed, 23 Apr 2014 17:17:13 GMT" pgfnum="40481"/>
								<outline text="},"/>
								</outline>
							<outline text="error: function (status) { ">
								<outline text="console.log (&quot;getEmbedCode: error == &quot; + JSON.stringify (status, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
								<outline text="callback (undefined); " created="Wed, 23 Apr 2014 17:17:13 GMT" pgfnum="40481"/>
								<outline text="},"/>
								</outline>
							<outline text="dataType: &quot;json&quot;"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewTweet (idTweet, idDiv, callback) { //12/22/19 by DW">
						<outline text="var idViewer = &quot;#&quot; + idDiv, now = new Date ();"/>
						<outline text="if (idTweet == undefined) {" created="Fri, 20 Jun 2014 18:37:12 GMT" pgfnum="42321">
							<outline text="$(idViewer).html (&quot;&quot;);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
							<outline text="}" created="Fri, 20 Jun 2014 18:37:18 GMT" pgfnum="42322"/>
							</outline>
						<outline text="else {" created="Fri, 20 Jun 2014 18:37:47 GMT" pgfnum="42323">
							<outline text="getEmbedCode (idTweet, function (struct) {" created="Fri, 20 Jun 2014 18:30:17 GMT" pgfnum="42312">
								<outline text="$(idViewer).css (&quot;visibility&quot;, &quot;hidden&quot;);"/>
								<outline text="$(idViewer).html (struct.html);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
								<outline text="if (callback != undefined) {">
									<outline text="callback (struct);"/>
									<outline text="}"/>
									</outline>
								<outline text="});" created="Fri, 20 Jun 2014 18:31:03 GMT" pgfnum="42313"/>
								</outline>
							<outline text="}" created="Fri, 20 Jun 2014 18:37:50 GMT" pgfnum="42324"/>
							</outline>
						<outline text="$(idViewer).on (&quot;load&quot;, function () {">
							<outline text="$(idViewer).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var parentOfTweet = this, tweetObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="console.log (&quot;setupTweets: theText == &quot; + maxStringLength (theText, 25));" isComment="true"/>
						<outline text="var urlTweet = $(this).data (&quot;urltweet&quot;);"/>
						<outline text=""/>
						<outline text="var tweetId = $(this).data (&quot;tweetid&quot;), tweetUserName = $(this).data (&quot;tweetusername&quot;); //11/16/17 by DW"/>
						<outline text="if ((tweetId !== undefined) &amp;&amp; (tweetUserName !== undefined) &amp;&amp; (urlTweet === undefined)) {">
							<outline text="https://twitter.com/davewiner/status/931224311582593024" isComment="true"/>
							<outline text="urlTweet = &quot;https://twitter.com/&quot; + tweetUserName + &quot;/status/&quot; + tweetId;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (urlTweet !== undefined) {">
							<outline text="let idTweet = stringLastField (urlTweet, &quot;/&quot;);"/>
							<outline text="console.log (&quot;setupTweets: theText == &quot; + maxStringLength (theText, 25));" isComment="true"/>
							<outline text="initWedge (parentOfTweet, function (flExpand) {">
								<outline text="$(this).blur (); //12/22/19 by DW"/>
								<outline text="function exposeTweetObject () {">
									<outline text="$(tweetObject).slideDown (75, undefined, function () {">
										<outline text="$(tweetObject).css (&quot;display&quot;, &quot;block&quot;);" isComment="true"/>
										<outline text="$(tweetObject).on (&quot;load&quot;, function () {">
											<outline text="$(tweetObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flExpand) {">
									<outline text="if (tweetObject === undefined) {">
										<outline text="let tweetObjectId = &quot;tweet&quot; + idTweet;"/>
										<outline text="let htmltext = &quot;&lt;div class=\&quot;divEmbeddedTweet\&quot; id=\&quot;&quot; + tweetObjectId + &quot;\&quot;&gt;&lt;/div&gt;&quot;;"/>
										<outline text="tweetObject = $(htmltext);"/>
										<outline text="$(parentOfTweet).append (tweetObject);"/>
										<outline text="if (twStorageData.urlTwitterServer === undefined) { //11/15/18 by DW">
											<outline text="console.log (&quot;setupTweets: twStorageData.urlTwitterServer == undefined&quot;);"/>
											<outline text="twStorageData.urlTwitterServer = urlLikeServer; //whack the bug -- 11/23/18 by DW"/>
											<outline text="}"/>
											</outline>
										<outline text="viewTweet (idTweet, tweetObjectId, function () {">
											<outline text="exposeTweetObject ();"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeTweetObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(tweetObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sun, 09 Apr 2023 14:47:37 GMT"/>
				<outline text="function setupMastodonToots () { //4/9/23 by DW" created="Sun, 09 Apr 2023 14:47:37 GMT">
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="const urltoot = $(this).data (&quot;urltoot&quot;);" created="Sun, 09 Apr 2023 14:48:33 GMT"/>
						<outline text="var parentOfToot = this, tootObject = undefined;" created="Sun, 09 Apr 2023 15:38:45 GMT"/>
						<outline text="if (urltoot !== undefined) {" created="Sun, 09 Apr 2023 14:48:51 GMT">
							<outline text="console.log (&quot;setupMastodonToots: urltoot == &quot; + urltoot); " created="Sun, 09 Apr 2023 14:49:04 GMT"/>
							<outline text="initWedge (parentOfToot, function (flExpand) {">
								<outline text="if (flExpand) {">
									<outline text="function exposeTootObject () {">
										<outline text="$(tootObject).slideDown (75, undefined, function () {">
											<outline text="$(tootObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if (tootObject === undefined) {">
										<outline text="https://mastodon.social/api/oembed?url=https://mastodon.social/@andypiper/108237453365199182" isComment="true"/>
										<outline text="const domain = urltoot.split (&quot;/&quot;) [2];" created="Sun, 09 Apr 2023 14:59:10 GMT"/>
										<outline text="const urlembed = &quot;https://&quot; + domain + &quot;/api/oembed?url=&quot; + encodeURIComponent (urltoot);" created="Sun, 09 Apr 2023 15:00:46 GMT"/>
										<outline text="readHttpFile (urlembed, function (jsontext) {" created="Sun, 09 Apr 2023 16:19:30 GMT">
											<outline text="if (jsontext !== undefined) {" created="Sun, 09 Apr 2023 16:19:56 GMT">
												<outline text="const jstruct = JSON.parse (jsontext);" created="Sun, 09 Apr 2023 15:07:02 GMT"/>
												<outline text="console.log (&quot;setupMastodonToots: jsontext == &quot; + jsonStringify (jstruct));" created="Sun, 09 Apr 2023 14:49:04 GMT"/>
												<outline text="tootObject = $(&quot;&lt;div class=\&quot;divEmbeddedToot\&quot;&gt;&lt;/div&gt;&quot;);" created="Sun, 09 Apr 2023 15:30:00 GMT"/>
												<outline text="const embeddedObject = $(jstruct.html);" created="Sun, 09 Apr 2023 15:33:56 GMT"/>
												<outline text="embeddedObject.attr (&quot;width&quot;, 500);"/>
												<outline text="$(tootObject).append (embeddedObject);" created="Sun, 09 Apr 2023 15:32:44 GMT"/>
												<outline text="$(parentOfToot).append (tootObject);"/>
												<outline text="exposeTootObject ();"/>
												<outline text="}" created="Sun, 09 Apr 2023 16:19:56 GMT"/>
												</outline>
											<outline text="});" created="Sun, 09 Apr 2023 16:19:31 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeTootObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(tootObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="" isComment="true" created="Sun, 09 Apr 2023 16:18:52 GMT"/>
								<outline text="" isComment="true" created="Sun, 09 Apr 2023 16:18:52 GMT"/>
								<outline text="" isComment="true" created="Sun, 09 Apr 2023 16:18:52 GMT"/>
								<outline text="" isComment="true" created="Sun, 09 Apr 2023 16:18:53 GMT"/>
								<outline text="readHttpFile (urlembed, function (jsontext) {" isComment="true">
									<outline text="function exposeTootObject () {">
										<outline text="$(tootObject).slideDown (75, undefined, function () {">
											<outline text="$(tootObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if (jsontext !== undefined) {" created="Sun, 09 Apr 2023 15:05:51 GMT">
										<outline text="const jstruct = JSON.parse (jsontext);" created="Sun, 09 Apr 2023 15:07:02 GMT"/>
										<outline text="console.log (&quot;setupMastodonToots: jsontext == &quot; + jsonStringify (jstruct));" created="Sun, 09 Apr 2023 14:49:04 GMT"/>
										<outline text="if (flExpand) {">
											<outline text="if (tootObject === undefined) {">
												<outline text="tootObject = $(&quot;&lt;div class=\&quot;divEmbeddedToot\&quot;&gt;&lt;/div&gt;&quot;);" created="Sun, 09 Apr 2023 15:30:00 GMT"/>
												<outline text="const embeddedObject = $(jstruct.html);" created="Sun, 09 Apr 2023 15:33:56 GMT"/>
												<outline text="embeddedObject.attr (&quot;width&quot;, 500);"/>
												<outline text="$(tootObject).append (embeddedObject);" created="Sun, 09 Apr 2023 15:32:44 GMT"/>
												<outline text="$(parentOfToot).append (tootObject);"/>
												<outline text="exposeTootObject ();"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="exposeTootObject ();"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="$(tootObject).slideUp (75);"/>
											<outline text="}"/>
											</outline>
										<outline text="}" created="Sun, 09 Apr 2023 15:06:26 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sun, 09 Apr 2023 14:49:03 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sun, 09 Apr 2023 14:47:46 GMT"/>
					</outline>
				<outline text="" created="Sun, 09 Apr 2023 14:47:38 GMT"/>
				<outline text="function setupExpandableOutline () {">
					<outline text="$(&quot;.divPageBody li&quot;).each (function () {">
						<outline text="var ul = $(this).next ();"/>
						<outline text="var parentOfTweet = this, tweetObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="var collapse = $(this).data (&quot;collapse&quot;);"/>
						<outline text="if (getBoolean (collapse)) {">
							<outline text="initWedge (this, function (flExpand) {">
								<outline text="$(ul).css (&quot;color&quot;, (flExpand) ? &quot;purple&quot; : &quot;gray&quot;);" isComment="true"/>
								<outline text="if (flExpand) {">
									<outline text="$(ul).slideDown (75, undefined, function () {">
										<outline text="$(ul).css (&quot;display&quot;, &quot;block&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(ul).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupXrefs () {">
					<outline text="Changes" isComment="true">
						<outline text="2/6/20; 12:41:31 PM by DW">
							<outline text="Changed scripting.com/items/ to scripting.com/data/items/. The folder moved on the server. "/>
							</outline>
						<outline text="7/13/18; 10:21:32 AM by DW">
							<outline text="Handle xrefs that point to story pages."/>
							</outline>
						</outline>
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var theText = $(this).text ();"/>
						<outline text="var xref = $(this).data (&quot;xref&quot;);"/>
						<outline text="if (xref !== undefined) {">
							<outline text="var theListItem = this, outlineObject = undefined;"/>
							<outline text="var fname, folder, url;"/>
							<outline text="if (stringContains (xref, &quot;#&quot;)) {">
								<outline text="fname = &quot;a&quot; + stringDelete (stringNthField (xref, &quot;#&quot;, 2), 1, 1) + &quot;.json&quot;"/>
								<outline text="folder = replaceAll (stringNthField (xref, &quot;#&quot;, 1),  &quot;.html&quot;, &quot;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else { //handle xrefs that point to story pages -- 7/13/18 by DW">
								<outline text="fname = &quot;a&quot; + stringPopExtension (stringLastField (xref, &quot;/&quot;)) + &quot;.json&quot;;"/>
								<outline text="folder = stringPopLastField (xref, &quot;/&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="url = replaceAll (folder, &quot;scripting.com/&quot;, &quot;scripting.com/data/items/&quot;) + &quot;/&quot; + fname; //2/6/20 by DW"/>
							<outline text=""/>
							<outline text="console.log (&quot;setupXrefs: theText == &quot; + theText + &quot;, xref == &quot; + xref + &quot;, fname == &quot; + fname + &quot;, folder == &quot; + folder + &quot;, url == &quot; + url);" isComment="true"/>
							<outline text="console.log (&quot;setupXrefs: url == &quot; + url);"/>
							<outline text=""/>
							<outline text="initWedge (theListItem, function (flExpand) {">
								<outline text="if (flExpand) {">
									<outline text="function exposeOutlineObject () {">
										<outline text="$(outlineObject).slideDown (75, undefined, function () {">
											<outline text="$(outlineObject).css (&quot;display&quot;, &quot;block&quot;);"/>
											<outline text=""/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if (outlineObject === undefined) {">
										<outline text="readHttpFile (url, function (jsontext) {">
											<outline text="if (jsontext !== undefined) {">
												<outline text="var jstruct = JSON.parse (jsontext), permalinkString = &quot;&quot;, htmltext;"/>
												<outline text=""/>
												<outline text="if (jstruct.created !== undefined) {">
													<outline text="permalinkString = &quot;&lt;div class=\&quot;divXrefPermalink\&quot;&gt;&lt;a href=\&quot;&quot; + xref + &quot;\&quot;&gt;&quot; + formatDate (jstruct.created, &quot;%b %e, %Y&quot;) + &quot;&lt;/a&gt;&lt;/div&gt;&quot;;"/>
													<outline text="}"/>
													</outline>
												<outline text=""/>
												<outline text="if (jstruct.subs !== undefined) {">
													<outline text="htmltext = renderOutlineBrowser (jstruct, false, undefined, undefined, true);"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="htmltext = jstruct.text;"/>
													<outline text="}"/>
													</outline>
												<outline text=""/>
												<outline text="htmltext = &quot;&lt;div class=\&quot;divXrefOutline\&quot;&gt;&quot; + permalinkString + htmltext + &quot;&lt;/div&gt;&quot;;"/>
												<outline text=""/>
												<outline text="outlineObject = $(htmltext);"/>
												<outline text=""/>
												<outline text="console.log (htmltext);" isComment="true"/>
												<outline text="$(theListItem).append (outlineObject);"/>
												<outline text=""/>
												<outline text="exposeOutlineObject ();"/>
												<outline text=""/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeOutlineObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(outlineObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupSpoilers () {">
					<outline text="$(&quot;.spSpoiler&quot;).each (function () {">
						<outline text="var spoilertext = $(this).html ();"/>
						<outline text="console.log (&quot;setupSpoilers: spoilertext == &quot; + spoilertext);"/>
						<outline text="console.log (&quot;setupSpoilers&quot;);"/>
						<outline text="$(this).text (&quot;[Spoilers.]&quot;);"/>
						<outline text="$(this).css (&quot;display&quot;, &quot;inline&quot;);"/>
						<outline text="$(this).mousedown (function () {">
							<outline text="console.log (&quot;setupSpoilers: spoilertext == &quot; + spoilertext);"/>
							<outline text="$(this).text (spoilertext);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupTagrefs () { //7/17/21 by DW">
					<outline text="tagrefDialogStartup ();" created="Wed, 21 Jul 2021 16:57:11 GMT"/>
					<outline text="$(&quot;.spTagref&quot;).each (function () {" isComment="true">
						<outline text="var theTag = $(this).text ();"/>
						<outline text="console.log (&quot;setupTagrefs: theTag == &quot; + theTag);"/>
						<outline text="$(this).click (function () {">
							<outline text="var url = &quot;http://tags.scripting.com/gettagrefsjson?tag=&quot; + urlEncode (theTag);"/>
							<outline text="console.log (&quot;setupTagrefs, click: theTag == &quot; + theTag);" isComment="true"/>
							<outline text="readHttpFile (url, function (jsontext) {">
								<outline text="var htmltext = &quot;&quot;;" created="Sat, 17 Jul 2021 16:38:20 GMT"/>
								<outline text="function add (s) {" created="Sat, 17 Jul 2021 16:38:28 GMT">
									<outline text="htmltext += s + &quot;\n&quot;;" created="Sat, 17 Jul 2021 16:38:31 GMT"/>
									<outline text="}" created="Sat, 17 Jul 2021 16:38:42 GMT"/>
									</outline>
								<outline text="if (jsontext === undefined) {" created="Sat, 17 Jul 2021 16:36:49 GMT">
									<outline text="add (&quot;There was a problem getting information from the tags server.&quot;);" created="Sat, 17 Jul 2021 16:37:06 GMT"/>
									<outline text="}" created="Sat, 17 Jul 2021 16:36:56 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 17 Jul 2021 16:37:41 GMT">
									<outline text="try {" created="Sat, 17 Jul 2021 16:37:47 GMT">
										<outline text="var theOutline = JSON.parse (jsontext);" created="Sat, 17 Jul 2021 16:37:56 GMT"/>
										<outline text="var nomad = theOutline.opml.body;" created="Sat, 17 Jul 2021 16:42:52 GMT"/>
										<outline text="if ((nomad.subs === undefined) || (nomad.subs.length == 0)) {" created="Sat, 17 Jul 2021 16:43:11 GMT">
											<outline text="add (&quot;There are no posts tagged with \&quot;&quot; + theTag + &quot;.\&quot;&quot;);" created="Sat, 17 Jul 2021 16:43:48 GMT"/>
											<outline text="}" created="Sat, 17 Jul 2021 16:43:24 GMT"/>
											</outline>
										<outline text="else {" created="Sat, 17 Jul 2021 16:43:25 GMT">
											<outline text="add (&quot;There are &quot; + nomad.subs.length + &quot; post(s) tagged with \&quot;&quot; + theTag + &quot;.\&quot;&quot;);" created="Sat, 17 Jul 2021 16:43:48 GMT"/>
											<outline text="}" created="Sat, 17 Jul 2021 16:43:27 GMT"/>
											</outline>
										<outline text="}" created="Sat, 17 Jul 2021 16:37:48 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Sat, 17 Jul 2021 16:37:49 GMT">
										<outline text="add (&quot;There was a problem getting information from the tags server.&quot;);" created="Sat, 17 Jul 2021 16:37:06 GMT"/>
										<outline text="}" created="Sat, 17 Jul 2021 16:37:53 GMT"/>
										</outline>
									<outline text="}" created="Sat, 17 Jul 2021 16:37:43 GMT"/>
									</outline>
								<outline text="console.log (&quot;setupTagrefs: htmltext == &quot; + htmltext);"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewInPopup (obj) {">
					<outline text="console.log (&quot;viewInPopup: &quot; + obj);" isComment="true"/>
					<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
					<outline text="function add (s) {">
						<outline text="htmltext +=  filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="add (&quot;&lt;div class=\&quot;divPopupWindow\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="add (&quot;&lt;div id=\&quot;idPopupWindow\&quot; class=\&quot;modal hide fade\&quot; tabindex=\&quot;-1\&quot; role=\&quot;dialog\&quot; aria-labelledby=\&quot;attPopupWindow\&quot; aria-hidden=\&quot;true\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="add (&quot;&lt;div class=\&quot;modal-body\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="add (&quot;&lt;a href=\&quot;#\&quot; class=\&quot;close\&quot; data-dismiss=\&quot;modal\&quot;&gt;&amp;times;&lt;/a&gt;&quot;)"/>
					<outline text="add (&quot;&lt;div id=\&quot;idStoryHtml\&quot;&gt;&lt;/div&gt;&quot;);"/>
					<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
					<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
					<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
					<outline text=""/>
					<outline text="console.log (htmltext);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="$(&quot;body&quot;).prepend (htmltext);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="$(&quot;#idStoryHtml&quot;).append (obj);" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function initSnap (urlOpmlFile, idOutlineObject, outlineTitle, flSnapOpenInitially, callback) { ">
					<outline text="callback ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function initSnap (urlOpmlFile, idOutlineObject, outlineTitle, flSnapOpenInitially, callback) { " isComment="true">
					<outline text="function collapseEverything (theOutline, belowLevel) {">
						<outline text="Changes" isComment="true">
							<outline text="6/26/15; 3:52:35 PM by DW">
								<outline text="The top level heads are at level 0. Set the collapse attribute on everything below the indicated level to true."/>
								<outline text="If you call it with belowLevel == 1, all the top level heads are expanded, and everything below the top level is collapsed."/>
								</outline>
							</outline>
						<outline text="function doCollapse (theOutline, level) {">
							<outline text="if (theOutline.subs !== undefined) {">
								<outline text="theOutline.collapse = level &gt; belowLevel;"/>
								<outline text="theOutline.level = level;" isComment="true"/>
								<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
									<outline text="doCollapse (theOutline.subs [i], level + 1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doCollapse (theOutline, 0);"/>
						<outline text="}"/>
						</outline>
					<outline text="function deleteNonLinks (theOutline) {">
						<outline text="function lookin (subOutline) {">
							<outline text="if (subOutline.subs !== undefined) {">
								<outline text="for (var i = subOutline.subs.length - 1; i &gt;= 0; i--) {">
									<outline text="var sub = subOutline.subs [i];"/>
									<outline text="console.log (&quot;\&quot;&quot; + sub.text + &quot;\&quot;&quot;);" isComment="true"/>
									<outline text="if (sub.text == &quot;-&quot;) {">
										<outline text="sub.text = &quot;&lt;div class=\&quot;divSeparatorLine\&quot;&gt;&lt;/div&gt;&quot;;" isComment="true"/>
										<outline text=""/>
										<outline text="subOutline.subs.splice (i, 1);"/>
										<outline text=""/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="lookin (sub);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="lookin (theOutline);"/>
						<outline text="}"/>
						</outline>
					<outline text="function boldTopLevel (theOutline) {">
						<outline text="if (theOutline.subs !== undefined) {">
							<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
								<outline text="theOutline.subs [i].text = &quot;&lt;span class=\&quot;spLevel1Head\&quot;&gt;&quot; + theOutline.subs [i].text + &quot;&lt;/span&gt;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="mySnap = new Snap ({">
						<outline text="element: document.getElementById (&quot;idSnapContent&quot;), "/>
						<outline text="touchToDrag: false, "/>
						<outline text="maxPosition: drawerWidth, "/>
						<outline text="minPosition: -drawerWidth, "/>
						<outline text="transitionSpeed: 0.3"/>
						<outline text="});"/>
						</outline>
					<outline text="if (flSnapOpenInitially) {">
						<outline text="mySnap.open (&quot;left&quot;);" created="Thu, 19 Dec 2013 22:35:23 GMT" pgfnum="33951"/>
						<outline text="flSnapDrawerOpen = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idSnapOpenIcon&quot;).click (function () {" created="Thu, 19 Dec 2013 22:34:21 GMT" pgfnum="33948">
						<outline text="console.log (&quot;handleHamburgerClick: flSnapDrawerOpen == &quot; + flSnapDrawerOpen);" isComment="true"/>
						<outline text="console.log (&quot;handleHamburgerClick: window.location.href == &quot; + window.location.href);" isComment="true"/>
						<outline text="if (flSnapDrawerOpen) {" created="Thu, 19 Dec 2013 22:43:38 GMT" pgfnum="33957">
							<outline text="mySnap.close (&quot;left&quot;);" created="Thu, 19 Dec 2013 22:35:23 GMT" pgfnum="33951"/>
							<outline text="if (stringContains (window.location.href, &quot;?tocOpen=true&quot;)) { //redirect">
								<outline text="window.location.href = stringNthField (window.location.href, &quot;?&quot;, 1);"/>
								<outline text="}"/>
								</outline>
							<outline text="flSnapDrawerOpen = false;"/>
							<outline text=""/>
							<outline text="$(&quot;#idSnapOpenIcon&quot;).removeClass (&quot;aSnapOpen&quot;);"/>
							<outline text="$(&quot;#idSnapOpenIcon&quot;).addClass (&quot;aSnapClosed&quot;);"/>
							<outline text="}" created="Thu, 19 Dec 2013 22:43:41 GMT" pgfnum="33958"/>
							</outline>
						<outline text="else {" created="Thu, 19 Dec 2013 22:43:42 GMT" pgfnum="33959">
							<outline text="mySnap.open (&quot;left&quot;);" created="Thu, 19 Dec 2013 22:35:23 GMT" pgfnum="33951"/>
							<outline text="flSnapDrawerOpen = true;"/>
							<outline text=""/>
							<outline text="$(&quot;#idSnapOpenIcon&quot;).removeClass (&quot;aSnapClosed&quot;);"/>
							<outline text="$(&quot;#idSnapOpenIcon&quot;).addClass (&quot;aSnapOpen&quot;);"/>
							<outline text="}" created="Thu, 19 Dec 2013 22:43:48 GMT" pgfnum="33960"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="readHttpFile (urlOpmlFile, function (opmltext) {">
						<outline text="var xstruct = $($.parseXML (opmltext));"/>
						<outline text="var adrbody = getXstuctBody (xstruct);"/>
						<outline text="var theOutline = outlineToJson (adrbody, &quot;outline&quot;);"/>
						<outline text="theOutline.text = outlineTitle;"/>
						<outline text="deleteNonLinks (theOutline); "/>
						<outline text="collapseEverything (theOutline, 1);"/>
						<outline text="boldTopLevel (theOutline);"/>
						<outline text="$(&quot;#&quot; + idOutlineObject).html (riverRenderOutline (theOutline, false, undefined, undefined, true)); "/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewAboutPage () {">
					<outline text="var urlAbout = &quot;http://scripting.com/aboutpage.opml&quot;;"/>
					<outline text="var title = $(&quot;#idAboutOutline&quot;).data (&quot;title&quot;);"/>
					<outline text="readOpmlFile (urlAbout, &quot;idAboutOutline&quot;, title, function () {">
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="var disqus_config = function () {">
					<outline text="this.page.url = &quot;http://scripting.com/&quot;;"/>
					<outline text="this.page.identifier = &quot;scriptingNewsHomePageComments1&quot;;"/>
					<outline text="};"/>
					</outline>
				<outline text="function viewDiscussPage () { //12/19/17 by DW">
					<outline text="var intro = &quot;&lt;div class=\&quot;divDiscussIntro\&quot;&gt;Welcome to the &lt;i&gt;Discuss&lt;/i&gt; tab on Scripting News. The comments here are moderated, according to &lt;a href=\&quot;http://guidelines.scripting.com/\&quot; target=\&quot;_blank\&quot;&gt;published guidelines&lt;/a&gt;. Please read them, remember the rules and all will be good. Dave&lt;/div&gt;&quot;;"/>
					<outline text="$(&quot;#idScriptingDiscuss&quot;).html (intro + &quot;&lt;div class=\&quot;divComments\&quot; id=\&quot;disqus_thread\&quot;&gt;&lt;/div&gt;&quot;);"/>
					<outline text="(function() { ">
						<outline text="var d = document, s = d.createElement('script');"/>
						<outline text=""/>
						<outline text="s.src = 'https://scripting.disqus.com/embed.js';"/>
						<outline text=""/>
						<outline text="s.setAttribute('data-timestamp', +new Date());"/>
						<outline text="(d.head || d.body).appendChild(s);"/>
						<outline text="})();"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewRiverPage () {">
					<outline text="var urlRiver = &quot;http://radio3.io/rivers/iowa.js&quot;; "/>
					<outline text="var title = $(&quot;#idRiverDisplay&quot;).data (&quot;title&quot;);"/>
					<outline text="httpGetRiver (urlRiver, &quot;idRiverDisplay&quot;, function () {">
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewLinksPage (callback) {">
					<outline text="var urlRiver = &quot;http://radio3.io/rivers/iowa.js&quot;; "/>
					<outline text="var title = $(&quot;#idRiverDisplay&quot;).data (&quot;title&quot;);"/>
					<outline text="readHttpFile (&quot;http://radio3.io/users/davewiner/linkblog.json&quot;, function (jsontext) {">
						<outline text="var daysTable = JSON.parse (jsontext);"/>
						<outline text="$(&quot;#idLinkblogDays&quot;).html (&quot;&quot;);"/>
						<outline text="for (var i = 0; i &lt; daysTable.length; i++) { //10/8/16 by DW">
							<outline text="appendDay (daysTable [i].jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewLastUpdateString () { //9/28/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="2/25/18; 1:19:19 PM by DW">
							<outline text="The Updated message on the home page gets too long sometimes. For example, &quot;Yesterday at 12:48PM&quot; is too long. So we hack it up and just change it to Yesterday. Now it isn't too long. Will there be other too-long cases? Maybe. Watch out for them. ;-)"/>
							</outline>
						</outline>
					<outline text="if (config.flHomePage) {">
						<outline text="var whenstring = getFacebookTimeString (config.now, true); //2/25/18 by DW"/>
						<outline text="if (beginsWith (whenstring, &quot;Yesterday&quot;)) {">
							<outline text="whenstring = &quot;Yesterday&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#idLastScriptingUpdate&quot;).html (&quot;Updated: &quot; + whenstring + &quot;.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateSnarkySlogan () { //1/23/19 by DW">
					<outline text="$(&quot;#idSnarkySlogan&quot;).html (getRandomSnarkySlogan ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function setHowMuchTrumpTimeRemaining () { //1/20/21 by DW" isComment="true">
					<outline text="var whenInaugration = new Date (&quot;Wed Jan 20 2021 11:59:59 GMT-0500 (Eastern Standard Time)&quot;);"/>
					<outline text="var now = new Date ();"/>
					<outline text="var ctsecs = (whenInaugration - now) / 1000;"/>
					<outline text=""/>
					<outline text="const ctsecsinday = 60 * 60 * 24;"/>
					<outline text="const ctsecsinhour = 60 * 60;"/>
					<outline text="var ctdays = Math.floor (ctsecs / ctsecsinday);"/>
					<outline text="ctsecs -= ctdays * ctsecsinday;"/>
					<outline text=""/>
					<outline text="var cthours = Math.floor (ctsecs / ctsecsinhour);"/>
					<outline text="ctsecs -= cthours * ctsecsinhour;"/>
					<outline text=""/>
					<outline text="var ctminutes = Math.floor (ctsecs / 60);"/>
					<outline text="ctsecs -= ctminutes * 60;"/>
					<outline text="ctsecs = Math.floor (ctsecs);"/>
					<outline text=""/>
					<outline text="var s = &quot;&quot;;"/>
					<outline text="function addnum (num, label, fllast) {">
						<outline text="if (num == 1) {">
							<outline text="label = stringDelete (label, label.length, 1);"/>
							<outline text="}"/>
							</outline>
						<outline text="s += &quot;&lt;p&gt;&quot; + num + &quot; &quot; + label;"/>
						<outline text="if (fllast) {" isComment="true">
							<outline text="s += &quot;.&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {" isComment="true">
							<outline text="s += &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="s += &quot;&lt;/p&gt;&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="addnum (ctdays, &quot;days&quot;);"/>
					<outline text="addnum (cthours, &quot;hours&quot;);"/>
					<outline text="addnum (ctminutes, &quot;minutes&quot;);"/>
					<outline text="addnum (ctsecs, &quot;seconds&quot;, true);"/>
					<outline text="$(&quot;#idInaugurationHowLong&quot;).html (&quot;&lt;center&gt;&quot; + s + &quot;&lt;/center&gt;&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="viewLastUpdateString ();"/>
					<outline text="updateSnarkySlogan (); //1/23/19 by DW"/>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="$(&quot;.spHowLongUntilBidenStarts&quot;).each (function () { //1/18/21 by DW">
						<outline text="function howLongUntilBidenStarts () {" isComment="true">
							<outline text="var whenInaugration = new Date (&quot;Wed Jan 20 2021 11:59:59 GMT-0500 (Eastern Standard Time)&quot;);"/>
							<outline text="var now = new Date ();"/>
							<outline text="function howLongUntil (now, whenStart) { ">
								<outline text="Changes" isComment="true">
									<outline text="8/10/19; 4:05:14 PM by DW">
										<outline text="Returns an object with properties: years, months, days, hours, minutes, seconds."/>
										</outline>
									</outline>
								<outline text="function daysInYear (year) {">
									<outline text="var flLeapYear = ((year % 400) == 0) || ((year % 100) != 0 &amp;&amp; ((year % 4) == 0));"/>
									<outline text="return ((flLeapYear) ? 366 : 365);"/>
									<outline text="}"/>
									</outline>
								<outline text="function daysInMonth (month, year) { ">
									<outline text="return (new Date (year, month, 0).getDate ()); "/>
									<outline text="} "/>
									</outline>
								<outline text="function getnum (num, units) {">
									<outline text="if (num != 1) {">
										<outline text="units += &quot;s&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="return (num + &quot; &quot; + units);"/>
									<outline text="}"/>
									</outline>
								<outline text="const ctSecsInDay = 60 * 60 * 24;"/>
								<outline text="const ctMilliSecsInDay = 1000 * ctSecsInDay;"/>
								<outline text="const now = new Date ();" isComment="true"/>
								<outline text="var theYear = whenStart.getFullYear ();"/>
								<outline text="var ctDays = (now - whenStart) / ctMilliSecsInDay;"/>
								<outline text="var ctYears = 0;"/>
								<outline text="while (true) {">
									<outline text="if (ctDays &lt;= daysInYear (theYear)) {">
										<outline text="break;"/>
										<outline text="}"/>
										</outline>
									<outline text="ctDays -= daysInYear (theYear);"/>
									<outline text="ctYears++;"/>
									<outline text="theYear++;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="var theMonth = 0, ctMonths = 0;"/>
								<outline text="while (true) {">
									<outline text=""/>
									<outline text="if (ctDays &lt; daysInMonth (theMonth, theYear)) {">
										<outline text="break;"/>
										<outline text="}"/>
										</outline>
									<outline text="ctDays -= daysInMonth (theMonth, theYear);"/>
									<outline text="ctMonths++;"/>
									<outline text="theMonth++;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="const ctWholeDays = Math.floor (ctDays);"/>
								<outline text="var ctRemainingSecs = (ctDays - ctWholeDays) * ctSecsInDay;"/>
								<outline text="var ctHours = Math.floor (ctRemainingSecs / (60 * 60));"/>
								<outline text="ctRemainingSecs -= ctHours * 60 * 60;"/>
								<outline text="var ctMinutes = Math.floor (ctRemainingSecs / 60);"/>
								<outline text="ctRemainingSecs -= ctMinutes * 60;"/>
								<outline text="ctRemainingSecs = Math.floor (ctRemainingSecs);"/>
								<outline text="return ({">
									<outline text="years: ctYears,"/>
									<outline text="months: ctMonths,"/>
									<outline text="days: ctWholeDays,"/>
									<outline text="hours: ctHours,"/>
									<outline text="minutes: ctMinutes,"/>
									<outline text="seconds: ctRemainingSecs"/>
									<outline text="});"/>
									</outline>
								<outline text="return (getnum (ctYears, &quot;year&quot;) + &quot;, &quot; + getnum (ctMonths, &quot;month&quot;) + &quot;, &quot; + getnum (ctWholeDays, &quot;day&quot;) + &quot;, &quot; + getnum (ctHours, &quot;hour&quot;) + &quot;, &quot; + getnum (ctMinutes, &quot;minute&quot;) + &quot;, &quot; + getnum (ctRemainingSecs, &quot;second&quot;) + &quot;.&quot;);" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="var howlong = howLongUntil (whenInaugration, now);"/>
							<outline text=""/>
							<outline text="var s = &quot;&quot;;"/>
							<outline text="function addnum (num, label) {">
								<outline text="if (num &gt; 0) {">
									<outline text="if (num == 1) {">
										<outline text="label = stringDelete (label, label.length, 1);"/>
										<outline text="}"/>
										</outline>
									<outline text="s += num + &quot; &quot; + label + &quot;, &quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="addnum (howlong.days, &quot;days&quot;);"/>
							<outline text="addnum (howlong.minutes, &quot;minutes&quot;);"/>
							<outline text="addnum (howlong.seconds, &quot;seconds&quot;);"/>
							<outline text="if (endsWith (s, &quot;, &quot;)) {">
								<outline text="s = stringDelete (s, s.length - 1, 2);"/>
								<outline text="}"/>
								</outline>
							<outline text="$(&quot;#idHowLong&quot;).html (s);" isComment="true"/>
							<outline text="return (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getTrumpTimeRemaining () {">
							<outline text="var whenInaugration = new Date (&quot;Wed Jan 20 2021 11:59:59 GMT-0500 (Eastern Standard Time)&quot;);"/>
							<outline text="var now = new Date ();"/>
							<outline text="var ctsecs = (whenInaugration - now) / 1000;"/>
							<outline text=""/>
							<outline text="const ctsecsinday = 60 * 60 * 24;"/>
							<outline text="const ctsecsinhour = 60 * 60;"/>
							<outline text="var ctdays = Math.floor (ctsecs / ctsecsinday);"/>
							<outline text="ctsecs -= ctdays * ctsecsinday;"/>
							<outline text=""/>
							<outline text="var cthours = Math.floor (ctsecs / ctsecsinhour);"/>
							<outline text="ctsecs -= cthours * ctsecsinhour;"/>
							<outline text=""/>
							<outline text="var ctminutes = Math.floor (ctsecs / 60);"/>
							<outline text="ctsecs -= ctminutes * 60;"/>
							<outline text="ctsecs = Math.floor (ctsecs);"/>
							<outline text=""/>
							<outline text="var s = &quot;&quot;;"/>
							<outline text="function addnum (num, label, fllast) {">
								<outline text="if (num &gt; 0) {">
									<outline text="if (num == 1) {">
										<outline text="label = stringDelete (label, label.length, 1);"/>
										<outline text="}"/>
										</outline>
									<outline text="s += num + &quot; &quot; + label;"/>
									<outline text="if (!fllast) {">
										<outline text="s += &quot;, &quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="addnum (ctdays, &quot;days&quot;);"/>
							<outline text="addnum (cthours, &quot;hours&quot;);"/>
							<outline text="addnum (ctminutes, &quot;minutes&quot;);"/>
							<outline text="addnum (ctsecs, &quot;seconds&quot;, true);"/>
							<outline text="return (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="$(this).text (getTrumpTimeRemaining ());"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.spRandomMotto&quot;).each (function () { //8/7/19 by DW">
						<outline text="$(this).text (getRandomSnarkySlogan ());"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.spHowLongRunning&quot;).each (function () { //8/9/19 by DW">
						<outline text="$(this).text (&quot;This blog has been running for: &quot; + howLongSinceStartAsString (new Date (&quot;10/7/1994, 12:00 PDT&quot;)));"/>
						<outline text="});"/>
						</outline>
					<outline text="setHowMuchTrumpTimeRemaining (); //1/20/21 by DW" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupJavaScriptFeatures () { //1/15/19 by DW">
					<outline text="setupXrefs (); //7/13/17 by DW"/>
					<outline text="setupTweets (); //7/24/17 by DW"/>
					<outline text="setupExpandableImages (); //7/24/17 by DW"/>
					<outline text="setupExpandableVideo (); //10/9/17 by DW"/>
					<outline text="setupExpandableDisqusThreads (); //7/25/17 by DW" isComment="true"/>
					<outline text="setupExpandableOutline (); //5/15/18 by DW"/>
					<outline text="setupTwitterComments (); //12/14/18 by DW"/>
					<outline text="setupLikes (); //11/8/18 by DW"/>
					<outline text="setupSpoilers (); //3/3/20 by DW"/>
					<outline text="setupTagrefs (); //7/17/21 by DW" created="Sat, 17 Jul 2021 16:11:45 GMT"/>
					<outline text="setupMastodonToots (); //4/9/23 by DW" created="Sun, 09 Apr 2023 15:54:00 GMT"/>
					<outline text="try { //9/21/19 by DW">
						<outline text="if (modalImageViewStartup !== undefined) { //6/25/18 by DW">
							<outline text="modalImageViewStartup (); "/>
							<outline text="if (config.flHomePage) {" isComment="true">
								<outline text="modalImageViewStartup (&quot;.divArchivePageDay&quot;); "/>
								<outline text="}"/>
								</outline>
							<outline text="else {" isComment="true">
								<outline text="modalImageViewStartup (); "/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setPageTopImageFromMetadata () { //5/4/20 by DW">
					<outline text="if (config.metadata !== undefined) {">
						<outline text="if (config.metadata.image !== undefined) {">
							<outline text="$(&quot;#idPagetopImage&quot;).css (&quot;background-image&quot;, &quot;url(&quot; + config.metadata.image + &quot;)&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function movePageDownForOldArchivePages () { //9/21/19 by DW">
					<outline text="Changes" isComment="true">
						<outline text="9/21/19; 11:59:19 AM by DW">
							<outline text=""/>
							</outline>
						</outline>
					<outline text="var fladjust = !dayGreaterThanOrEqual (opmlHead.dateModified, &quot;21 Apr 2019&quot;)"/>
					<outline text="if (fladjust) {">
						<outline text="$(&quot;.divPageBody&quot;).css (&quot;margin-top&quot;, &quot;270px&quot;)"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setDescription () { //4/10/21; 11:49:17 AM by DW" created="Sat, 10 Apr 2021 15:49:09 GMT">
					<outline text="Changes" isComment="true" created="Tue, 27 Apr 2021 17:01:43 GMT">
						<outline text="4/27/21; 1:01:46 PM by DW" created="Tue, 27 Apr 2021 17:01:45 GMT">
							<outline text="Disabled." created="Tue, 27 Apr 2021 17:02:16 GMT"/>
							<outline text="I don't like this. I want people reading the story, not reading the description." created="Tue, 27 Apr 2021 17:01:46 GMT"/>
							<outline text="Also the description can be too long and too hard to read on a varied background. " created="Tue, 27 Apr 2021 17:02:02 GMT"/>
							</outline>
						</outline>
					<outline text="try {" isComment="true" created="Sat, 10 Apr 2021 15:49:21 GMT">
						<outline text="if (config.metadata.description !== undefined) {" created="Sat, 10 Apr 2021 15:49:35 GMT">
							<outline text="$(&quot;#idMessageDescription&quot;).text (config.metadata.description);" created="Sat, 10 Apr 2021 15:50:07 GMT"/>
							<outline text="}" created="Sat, 10 Apr 2021 15:49:40 GMT"/>
							</outline>
						<outline text="}" created="Sat, 10 Apr 2021 15:49:23 GMT"/>
						</outline>
					<outline text="catch (err) {" isComment="true" created="Sat, 10 Apr 2021 15:49:24 GMT">
						<outline text="}" created="Sat, 10 Apr 2021 15:49:27 GMT"/>
						</outline>
					<outline text="}" created="Sat, 10 Apr 2021 15:49:18 GMT"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="setDescription (); //4/10/21 by DW"/>
					<outline text="$(&quot;#idVersionNumber&quot;).text (myVersion);"/>
					<outline text="updateTwitterButton (); //4/23/19 by DW"/>
					<outline text="movePageDownForOldArchivePages (); //9/21/19 by DW"/>
					<outline text="twStorageData.urlTwitterServer = urlTwitterServer; //7/24/17 AM by DW -- for displaying embedded tweets" isComment="true"/>
					<outline text="twStorageData.urlTwitterServer = urlLikeServer;"/>
					<outline text="console.log (&quot;startup: twStorageData.urlTwitterServer == &quot; + twStorageData.urlTwitterServer);"/>
					<outline text="twGetOauthParams (); //11/10/18 by DW"/>
					<outline text="if (localStorage.savedState !== undefined) {">
						<outline text="savedState = JSON.parse (localStorage.savedState);"/>
						<outline text="savedState.currentTab = &quot;blog&quot;; //4/6/20 AM by DW"/>
						<outline text="}"/>
						</outline>
					<outline text="//get tab param, if present, redirect to appropriate page">
						<outline text="var theParam = getURLParameter (&quot;tab&quot;);"/>
						<outline text="if (theParam == &quot;null&quot;) {">
							<outline text="theParam = getURLParameter (&quot;panel&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (theParam != &quot;null&quot;) {">
							<outline text="var newloc = undefined;"/>
							<outline text="switch (theParam) {">
								<outline text="case &quot;about&quot;:">
									<outline text="newloc = &quot;about.html&quot;" isComment="true"/>
									<outline text="savedState.currentTab =&quot;about&quot;; //9/11/17 by DW"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;river&quot;:">
									<outline text="newloc = &quot;river.html&quot;"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;links&quot;:">
									<outline text="newloc = &quot;links.html&quot;" isComment="true"/>
									<outline text="savedState.currentTab =&quot;linkblog&quot;; //9/11/17 by DW"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;blog&quot;: //9/11/17 by DW">
									<outline text="savedState.currentTab =&quot;blog&quot;; //9/11/17 by DW"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;discuss&quot;:">
									<outline text="savedState.currentTab =&quot;discuss&quot;;"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;chat&quot;: //4/29/19 by DW">
									<outline text="savedState.currentTab =&quot;chat&quot;;"/>
									<outline text="break;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (newloc !== undefined) {">
								<outline text="window.location.href = config.baseUrl + newloc;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						</outline>
					<outline text="" created="Mon, 26 Jul 2021 19:03:04 GMT"/>
					<outline text="//get tag param, if present popup the tag display in front of the blog -- 7/26/21 by DW" created="Mon, 26 Jul 2021 19:03:05 GMT">
						<outline text="var tagParam = getURLParameter (&quot;tag&quot;);"/>
						<outline text="if (tagParam != &quot;null&quot;) {">
							<outline text="openTagrefDialogExternally (tagParam);" created="Mon, 26 Jul 2021 19:04:07 GMT"/>
							<outline text="}"/>
							</outline>
						</outline>
					<outline text="" created="Mon, 26 Jul 2021 19:03:05 GMT"/>
					<outline text="" created="Mon, 26 Jul 2021 19:03:05 GMT"/>
					<outline text="if (savedState.currentTab == &quot;blog&quot;) { //4/7/20 by DW -- More button only visible for the blog tab">
						<outline text="$(&quot;#idMoreButton&quot;).css (&quot;display&quot;, &quot;block&quot;); "/>
						<outline text="}"/>
						</outline>
					<outline text="initSnap (urlSidebarOpml, &quot;idSidebarOutline&quot;, &quot;Scripting News menu&quot;, false, function () {">
						<outline text="if ($(&quot;#idAboutOutline&quot;).length !== 0) { //it's the about page">
							<outline text="viewAboutPage ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if ($(&quot;#idRiverDisplay&quot;).length !== 0) { //it's the river page">
							<outline text="viewRiverPage ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if ($(&quot;#idChatArea&quot;).length !== 0) { //it's the chat page">
							<outline text="viewChatPage ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if ($(&quot;#idLinkblogDays&quot;).length !== 0) { //it's the linkblog page">
							<outline text="viewLinksPage ();" isComment="true"/>
							<outline text="window.location.href = urlLinkblogPage;"/>
							<outline text="}"/>
							</outline>
						<outline text="if ($(&quot;#idScriptingDiscuss&quot;).length !== 0) { //it's the discussion page -- 12/19/17 by DW">
							<outline text="viewDiscussPage ();"/>
							<outline text="}"/>
							</outline>
						<outline text="startTabsIfHomePage (function () {">
							<outline text="viewLastUpdateString (); //9/28/17 by DW"/>
							<outline text="updateSnarkySlogan (); //1/23/19 by DW"/>
							<outline text="setupJavaScriptFeatures ();"/>
							<outline text="setPageTopImageFromMetadata (); //5/4/20 by DW"/>
							<outline text="hitCounter (); "/>
							<outline text="if (config.flGoogleAnalytics) {">
								<outline text="initGoogleAnalytics (config.appDomain, config.idGoogleAccount); "/>
								<outline text="}"/>
								</outline>
							<outline text="self.setInterval (everySecond, 1000); "/>
							<outline text="runEveryMinute (everyMinute);"/>
							<outline text="infiniteScrollHandler (); //10/17/19 by DW"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.divPageBody a&quot;).each (function () { //if we're coming in looking for an individual item, show that in a popup window -- not completed feature -- 7/24/17 by DW" isComment="true">
						<outline text="var name = $(this).attr (&quot;name&quot;);"/>
						<outline text="if (name !== undefined) {">
							<outline text="if (name == stringDelete (window.location.hash, 1, 1)) {">
								<outline text="var parent = $(this).parent (), parentClass = $(parent).attr (&quot;class&quot;);"/>
								<outline text="if (parentClass == &quot;divSingularItem&quot;) {">
									<outline text="viewInPopup (parent);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="viewInPopup ($(parent).parent ());"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="daytemplate.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;[%pagetitle%]&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="[%rssLink%]"/>
						<outline text="[%facebookmetadata%]"/>
						<outline text="[%twittermetadata%]"/>
						<outline text=""/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;%riverBrowserIncludes%&gt;"/>
						<outline text=""/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//fargo.io/code/editors/mediumeditor/dist/css/medium-editor.css&quot;&gt; "/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//fargo.io/code/editors/mediumeditor/dist/css/themes/default.css&quot;&gt; "/>
						<outline text="&lt;script src=&quot;//fargo.io/code/editors/mediumeditor/dist/js/medium-editor.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//fargo.io/code/shared/tweeteditor.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//fargo.io/code/shared/tweeteditor.css&quot; /&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;//scripting.com/code/imageclick/dialog.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text=""/>
						<outline text="&lt;link href=&quot;//radio3.io/code/pagestyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//radio3.io/code/pagecode.js&quot;&gt;&lt;/script&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;//fargo.io/code/shared/xml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//fargo.io/code/shared/reader.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//fargo.io/cms/snap/snap.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//fargo.io/cms/snap/snap.css&quot; /&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//fargo.io/code/shared/reader.css&quot; /&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;//scripting.com/chat/code/chatapp.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;//scripting.com/chat/code/chatstyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;link href=&quot;//scripting.com/chat/code/shellstyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;//scripting.com/chat/code/shell.js&quot;&gt;&lt;/script&gt;" isComment="true" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="" created="Wed, 21 Jul 2021 16:55:38 GMT"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/tagrefdialog/dialog.js&quot;&gt;&lt;/script&gt;"/>
						<outline text=""/>
						<outline text="&lt;link href=&quot;//scripting.com/code/oldschool/daytemplate.css?x=2&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/oldschool/daytemplate.js?x=1&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="var config = [%configJson%];"/>
							<outline text="var opmlHead = [%opmlHead%];"/>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div id=&quot;idTweetDialog&quot; class=&quot;modal hide fade divTweetDialog&quot;&gt;">
							<outline text="&lt;div class=&quot;divTweetDialogContainer&quot;&gt;">
								<outline text="&lt;div id=&quot;idMyTweetEditor&quot;&gt;">
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divToggleConnect&quot;&gt;&lt;a onclick=&quot;chatToggleConnect ();&quot; id=&quot;idToggleConnect&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;"/>
						<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPagetop&quot;&gt;">
							<outline text="[%pagetop%]"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divBidenAd&quot;&gt;" isComment="true">
							<outline text="&lt;img src=&quot;http://scripting.com/images/2020/09/06/bidenHarris2020.png&quot; width=&quot;125&quot; height=&quot;94&quot; title=&quot;I'm ridin' with Biden in 2020!&quot;&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divTextSizeControl&quot;&gt;">
							<outline text="&lt;button id=&quot;idTextSizeMinus&quot; class=&quot;btn&quot; type=&quot;button&quot; onclick=&quot;decreaseTextSize ();&quot;&gt;&lt;i class=&quot;fas fa-font&quot;&gt;&lt;/i&gt;-&lt;/button&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
							<outline text="&lt;button id=&quot;idTextSizePlus&quot; class=&quot;btn&quot; type=&quot;button&quot; onclick=&quot;increaseTextSize ();&quot;&gt;&lt;i class=&quot;fas fa-font&quot;&gt;&lt;/i&gt;+&lt;/button&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divDayContainer&quot; id=&quot;idDayContainer&quot;&gt;">
								<outline text="[%bodytext%]"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divFooter&quot;&gt;">
								<outline text="&lt;p&gt;&amp;copy; copyright 1994-2023 Dave Winer.&lt;/p&gt;"/>
								<outline text="&lt;p&gt;[%copyright%]&lt;/p&gt;" isComment="true"/>
								<outline text="&lt;p&gt;Last update: [%now%].&lt;/p&gt;"/>
								<outline text="&lt;p&gt;&lt;span class=&quot;spHowLongRunning&quot;&gt;&lt;/span&gt;&lt;/p&gt;"/>
								<outline text="&lt;p&gt;You know those obnoxious sites that pop up dialogs when they think you're about to leave, asking you to subscribe to their email newsletter? Well that won't do for Scripting News readers who are a discerning lot, very loyal, but that wouldn't last long if I did rude stuff like that. So here I am at the bottom of the page &lt;i&gt;quietly&lt;/i&gt; encouraging you to &lt;a href=&quot;http://scripting.com/email/&quot;&gt;sign up for the nightly email&lt;/a&gt;. It's got everything from the previous day on Scripting, plus the contents of the linkblog and who knows what else we'll get in there. People really love it. I wish I had done it sooner. And every email has an unsub link so if you want to get out, you can, easily -- no questions asked, and no follow-ups. Go ahead and do it, you won't be sorry! :-)&lt;/p&gt;"/>
								<outline text="&lt;p id=&quot;idSnarkySlogan&quot;&gt;&lt;/p&gt;"/>
								<outline text="[%socialMediaLinks%]"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divSnapIcon&quot;&gt;" isComment="true">
							<outline text="&lt;a class=&quot;aSnapClosed&quot; href=&quot;#&quot; id=&quot;idSnapOpenIcon&quot; style=&quot;z-index: 20;&quot;&gt;&lt;i class=&quot;fa fa-bars&quot;&gt;&lt;/i&gt;&lt;/a&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;snap-drawers&quot;&gt;" isComment="true">
							<outline text="&lt;div class=&quot;snap-drawer snap-drawer-left&quot; id=&quot;idSnapDrawerDiv&quot;&gt;">
								<outline text="&lt;div class=&quot;divLeftDrawer&quot;&gt;">
									<outline text="&lt;div class=&quot;divLeftDrawerContent&quot;&gt;">
										<outline text="&lt;div class=&quot;divOutlineDisplayer&quot; id=&quot;idSidebarOutline&quot;&gt;">
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;snap-drawer snap-drawer-right&quot;&gt;&lt;/div&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div id=&quot;idSnapContent&quot; class=&quot;snap-content&quot;&gt;" isComment="true">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="hometemplate.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;[%pagetitle%]&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="[%rssLink%]"/>
						<outline text="[%facebookmetadata%]"/>
						<outline text="[%twittermetadata%]"/>
						<outline text=""/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;%riverBrowserIncludes%&gt;"/>
						<outline text=""/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//fargo.io/code/editors/mediumeditor/dist/css/medium-editor.css&quot;&gt; "/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//fargo.io/code/editors/mediumeditor/dist/css/themes/default.css&quot;&gt; "/>
						<outline text="&lt;script src=&quot;//fargo.io/code/editors/mediumeditor/dist/js/medium-editor.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//fargo.io/code/shared/tweeteditor.js&quot;&gt;&lt;/script&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;//scripting.com/code/imageclick/dialog.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text=""/>
						<outline text="&lt;link href=&quot;//radio3.io/code/pagestyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//radio3.io/code/pagecode.js&quot;&gt;&lt;/script&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;//fargo.io/code/shared/xml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//fargo.io/code/shared/reader.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//fargo.io/cms/snap/snap.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//fargo.io/cms/snap/snap.css&quot; /&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//fargo.io/code/shared/reader.css&quot; /&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;//scripting.com/chat/code/chatapp.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;//scripting.com/chat/code/chatstyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;//scripting.com/code/tagrefdialog/dialog.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="" created="Wed, 21 Jul 2021 16:58:12 GMT"/>
						<outline text="&lt;link href=&quot;//scripting.com/code/oldschool/daytemplate.css?x=1&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/oldschool/daytemplate.js?x=0&quot;&gt;&lt;/script&gt;"/>
						<outline text=""/>
						<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="var config = [%configJson%];"/>
							<outline text="var opmlHead = [%opmlHead%];"/>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text=""/>
						<outline text="&lt;link href=&quot;tabsstyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;tabscode.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="var config = [%configJson%];"/>
							<outline text="var opmlHead = [%opmlHead%];"/>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div id=&quot;idTweetDialog&quot; class=&quot;modal hide fade divTweetDialog&quot;&gt;">
							<outline text="&lt;div class=&quot;divTweetDialogContainer&quot;&gt;">
								<outline text="&lt;div id=&quot;idMyTweetEditor&quot;&gt;">
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divToggleConnect&quot;&gt;&lt;a onclick=&quot;chatToggleConnect ();&quot; id=&quot;idToggleConnect&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;"/>
						<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPagetop&quot;&gt;">
							<outline text="[%pagetop%]"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divBidenAd&quot;&gt;">
							<outline text="&lt;img src=&quot;http://scripting.com/images/2020/09/06/bidenHarris2020.png&quot; width=&quot;125&quot; height=&quot;94&quot; title=&quot;I'm ridin' with Biden in 2020!&quot;&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divScriptingTabsPage&quot; id=&quot;idScriptingTabsPage&quot;&gt;">
								<outline text="&lt;div class=&quot;divScriptingTabs&quot; id=&quot;idTabs&quot; style=&quot;visibility: visible;&quot;&gt;">
									<outline text="&lt;div class=&quot;divLastScriptingUpdate&quot; id=&quot;idLastScriptingUpdate&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;ul id=&quot;idTabList&quot; class=&quot;nav nav-tabs&quot;&gt;">
										<outline text="&lt;/ul&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divScriptingTab&quot; id=&quot;idScriptingTab&quot;&gt;">
									<outline text="&lt;div class=&quot;divTabContent&quot; id=&quot;idTabContent&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divMoreButton&quot;&gt;">
									<outline text="&lt;button id=&quot;idMoreButton&quot;  class=&quot;btn&quot; type=&quot;button&quot; onclick=&quot;moreButtonClick ();&quot; style=&quot;display: none;&quot;&gt;More&lt;/button&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divFooter&quot;&gt;">
								<outline text="&lt;p&gt;&amp;copy; copyright 1994-2023 Dave Winer.&lt;/p&gt;"/>
								<outline text="&lt;p&gt;[%copyright%]&lt;/p&gt;" isComment="true"/>
								<outline text="&lt;p&gt;Last update: [%now%].&lt;/p&gt;"/>
								<outline text="&lt;p&gt;&lt;span class=&quot;spHowLongRunning&quot;&gt;&lt;/span&gt;&lt;/p&gt;"/>
								<outline text="&lt;p&gt;You know those obnoxious sites that pop up dialogs when they think you're about to leave, asking you to subscribe to their email newsletter? Well that won't do for Scripting News readers who are a discerning lot, very loyal, but that wouldn't last long if I did rude stuff like that. So here I am at the bottom of the page &lt;i&gt;quietly&lt;/i&gt; encouraging you to &lt;a href=&quot;http://scripting.com/email/&quot;&gt;sign up for the nightly email&lt;/a&gt;. It's got everything from the previous day on Scripting, plus the contents of the linkblog and who knows what else we'll get in there. People really love it. I wish I had done it sooner. And every email has an unsub link so if you want to get out, you can, easily -- no questions asked, and no follow-ups. Go ahead and do it, you won't be sorry! :-)&lt;/p&gt;"/>
								<outline text="&lt;p id=&quot;idSnarkySlogan&quot;&gt;&lt;/p&gt;"/>
								<outline text="[%socialMediaLinks%]"/>
								<outline text="&lt;div class=&quot;divMastodonLink&quot;&gt;&lt;a rel=&quot;me&quot; href=&quot;https://mastodon.social/@davew&quot;&gt;davew@mastodon.social&lt;/a&gt;&lt;/div&gt;" created="Wed, 16 Nov 2022 13:43:27 GMT"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divSnapIcon&quot;&gt;" isComment="true">
							<outline text="&lt;a class=&quot;aSnapClosed&quot; href=&quot;#&quot; id=&quot;idSnapOpenIcon&quot; style=&quot;z-index: 20;&quot;&gt;&lt;i class=&quot;fa fa-bars&quot;&gt;&lt;/i&gt;&lt;/a&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;snap-drawers&quot;&gt;" isComment="true">
							<outline text="&lt;div class=&quot;snap-drawer snap-drawer-left&quot; id=&quot;idSnapDrawerDiv&quot;&gt;">
								<outline text="&lt;div class=&quot;divLeftDrawer&quot;&gt;">
									<outline text="&lt;div class=&quot;divLeftDrawerContent&quot;&gt;">
										<outline text="&lt;div class=&quot;divOutlineDisplayer&quot; id=&quot;idSidebarOutline&quot;&gt;">
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;snap-drawer snap-drawer-right&quot;&gt;&lt;/div&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div id=&quot;idSnapContent&quot; class=&quot;snap-content&quot;&gt;" isComment="true">
							<outline text="&lt;div class=&quot;divPagetop&quot;&gt;">
								<outline text="[%pagetop%]"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
								<outline text="&lt;div class=&quot;divScriptingTabsPage&quot; id=&quot;idScriptingTabsPage&quot;&gt;">
									<outline text="&lt;div class=&quot;divScriptingTabs&quot; id=&quot;idTabs&quot; style=&quot;visibility: visible;&quot;&gt;">
										<outline text="&lt;ul id=&quot;idTabList&quot; class=&quot;nav nav-tabs&quot;&gt;">
											<outline text="&lt;/ul&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;div class=&quot;divScriptingTab&quot; id=&quot;idScriptingTab&quot;&gt;">
										<outline text="&lt;div class=&quot;divTabContent&quot; id=&quot;idTabContent&quot;&gt;">
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divFooter&quot;&gt;">
									<outline text="&lt;p&gt;[%copyright%]&lt;/p&gt;"/>
									<outline text="&lt;p&gt;Last update: [%now%].&lt;/p&gt;"/>
									<outline text="[%socialMediaLinks%]"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divForSearchIndex&quot; style=&quot;display: none;&quot; id=&quot;idBodytext&quot;&gt;">
							<outline text="[%bodytext%]"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="/fargo.io/code/shared/oldschool/test/" isComment="true">
			<outline text="popup.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Popup Test page&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;%riverBrowserIncludes%&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/xml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/reader.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="var urlJson = &quot;http://scripting.com/data/items/2017/07/16/a025153.json&quot;;"/>
							<outline text=""/>
							<outline text="workspace.finagle (&quot;http://scripting.com/2017/07/16.html#a025153&quot;)" isComment="true">
								<outline text="&quot;http://scripting.com/data/items/2017/07/16/a025153.json&quot;" isComment="true"/>
								</outline>
							<outline text=""/>
							<outline text=""/>
							<outline text="//popup story dialog">
								<outline text="function closePopupStory () {">
									<outline text="$(&quot;#idPopupWindow&quot;).modal (&quot;hide&quot;); "/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="function popupStory (urlJson) {">
									<outline text="readHttpFile (urlJson, function (jsontext) {">
										<outline text="if (jsontext !== undefined) {">
											<outline text="var jstruct = JSON.parse (jsontext), permalinkString = &quot;&quot;;"/>
											<outline text="var htmltext = renderOutlineBrowser (jstruct, false, undefined, undefined, true);"/>
											<outline text="console.log (htmltext);" isComment="true"/>
											<outline text="$(&quot;#idStoryHtml&quot;).html (htmltext);"/>
											<outline text="$(&quot;#idPopupWindow&quot;).modal (&quot;show&quot;); "/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text=""/>
							<outline text=""/>
							<outline text="function everySecond () {">
								<outline text="}"/>
								</outline>
							<outline text="function startup () {">
								<outline text="console.log (&quot;startup&quot;);"/>
								<outline text="popupStory (urlJson);"/>
								<outline text="self.setInterval (function () {everySecond ()}, 1000); "/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 60%;"/>
								<outline text="margin-top: 90px;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPopupWindow .modal {">
								<outline text="left: 40%;" created="Tue, 01 Jan 2013 03:59:57 GMT" pgfnum="16539"/>
								<outline text="width: 740px;" created="Tue, 01 Jan 2013 04:00:36 GMT" pgfnum="16541"/>
								<outline text="}" created="Tue, 01 Jan 2013 04:00:11 GMT" pgfnum="16540"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPopupWindow&quot;&gt;">
							<outline text="&lt;div id=&quot;idPopupWindow&quot; class=&quot;modal hide fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;attPopupWindow&quot; aria-hidden=&quot;true&quot;&gt;">
								<outline text="&lt;div class=&quot;modal-body&quot;&gt;">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&amp;times;&lt;/a&gt;"/>
									<outline text="&lt;div id=&quot;idStoryHtml&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;modal-footer&quot;&gt;" isComment="true">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot; onclick=&quot;closePopupStory ();&quot;&gt;Close&lt;/a&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="tabscode.js">
				<outline text="var currentTab = undefined;"/>
				<outline text=""/>
				<outline text="const tabs = {">
					<outline text="&quot;Blog&quot;: {">
						<outline text="path: &quot;index.html&quot;,"/>
						<outline text="icon: &quot;book&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;Links&quot;: {">
						<outline text="path: &quot;links.html&quot;,"/>
						<outline text="icon: &quot;link&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;River&quot;: {">
						<outline text="path: &quot;river.html&quot;,"/>
						<outline text="icon: &quot;newspaper-o&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;About&quot;: {">
						<outline text="path: &quot;about.html&quot;,"/>
						<outline text="icon: &quot;info-circle&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="function switchPanel (tabname) {">
					<outline text="console.log (&quot;switchPanel: tabname == &quot; + tabname);"/>
					<outline text="}"/>
					</outline>
				<outline text="function startTabs () { ">
					<outline text="$(&quot;#idTabList&quot;).empty ();"/>
					<outline text="for (var x in tabs) { ">
						<outline text="var activetab = &quot;&quot;, lowername = stringLower (x);"/>
						<outline text="if (currentTab === undefined) {">
							<outline text="currentTab = lowername;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (lowername == currentTab) {">
							<outline text="activetab = &quot; class=\&quot;active\&quot;&quot;"/>
							<outline text="}"/>
							</outline>
						<outline text="var clickScript = &quot;switchPanel (\&quot;&quot; + lowername + &quot;\&quot;)&quot;;"/>
						<outline text="var tabtitle = &quot;&lt;i class=\&quot;iTabIcon fa fa-&quot; + tabs [x].icon + &quot;\&quot;&gt;&lt;/i&gt;&quot; + x;"/>
						<outline text="$(&quot;#idTabList&quot;).append (&quot;&lt;li&quot; + activetab + &quot; id='&quot; + x + &quot;'&gt;&lt;a data-toggle=\&quot;tab\&quot; onclick='&quot; + clickScript + &quot;'&gt;&quot;  + tabtitle + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function everySecond () {">
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="startTabs ();"/>
					<outline text="self.setInterval (everySecond, 1000); "/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="tabsstyles.css">
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 60%;"/>
					<outline text="margin-top: 90px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="}"/>
					</outline>
				<outline text=".nav-tabs {" isComment="true">
					<outline text="margin-bottom: -1px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".nav-tabs&gt;li&gt;a {" isComment="true">
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".nav-tabs &gt; .active &gt; a, .nav-tabs &gt; .active &gt; a:hover, .nav-tabs &gt; .active &gt; a:focus {" isComment="true">
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divScriptingTab {">
					<outline text="min-height: 600px;"/>
					<outline text="background-color: white;"/>
					<outline text="border: 1px solid rgb(221, 221, 221);"/>
					<outline text="}"/>
					</outline>
				<outline text=".iTabIcon {">
					<outline text="margin-right: .4em;"/>
					<outline text="opacity: .8;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divScriptingTabs li {">
					<outline text="width: 100px;"/>
					<outline text="color: gray;"/>
					<outline text="}"/>
					</outline>
				<outline text=".active {">
					<outline text="background-color: white;" isComment="true"/>
					<outline text="color: black;"/>
					<outline text="}"/>
					</outline>
				<outline text="/* tabs */">
					<outline text=".nav-tabs {">
						<outline text="margin-bottom: -1px;"/>
						<outline text="font-size: 16px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a {">
						<outline text="cursor: pointer;"/>
						<outline text="color: inherit;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; .active &gt; a, .nav-tabs &gt; .active &gt; a:hover, .nav-tabs &gt; .active &gt; a:focus {">
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid silver;"/>
						<outline text="border-bottom-color: transparent;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabDisplay {">
						<outline text="border: 1px solid silver;" isComment="true"/>
						<outline text="background-color: white;"/>
						<outline text="min-height: 400px;" isComment="true"/>
						<outline text="padding-top: 10px;" isComment="true"/>
						<outline text="margin-bottom: 500px;" isComment="true"/>
						<outline text="margin-top: 110px;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".spTabTitleText {">
						<outline text="margin-left: 2px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".iconUpdateWaiting {">
						<outline text="font-weight: bold;"/>
						<outline text="color: limegreen;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a, .nav-pills &gt; li &gt; a {">
						<outline text="padding-left: 8px;"/>
						<outline text="padding-right: 8px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divMyTabs {">
						<outline text="display: table-cell;"/>
						<outline text="vertical-align: top;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					</outline>
				</outline>
			<outline text="tabs.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Tabs test space&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;link href=&quot;tabsstyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;tabscode.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text=""/>
							<outline text="&lt;div class=&quot;divScriptingTabsPage&quot;&gt;">
								<outline text="&lt;div class=&quot;divScriptingTabs&quot; id=&quot;idTabs&quot; style=&quot;visibility: visible;&quot;&gt;">
									<outline text="&lt;ul id=&quot;idTabList&quot; class=&quot;nav nav-tabs&quot;&gt;">
										<outline text="&lt;/ul&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divScriptingTab&quot; id=&quot;idTab&quot;&gt;">
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text=""/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildOldSchoolTemplate ()"/>
			</outline>
		</body>
	</opml>
