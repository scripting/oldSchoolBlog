<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 02 Dec 2023 19:04:36 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: oldSchoolBlog</title>
		<dateCreated>Sat, 06 May 2017 23:45:58 GMT</dateCreated>
		<dateModified>Sat, 02 Dec 2023 19:04:36 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 22, 23, 34, 74, 93, 94, 166, 167, 169, 170, 242, 247, 248, 252, 253, 255, 258, 261, 271, 274, 280, 291, 292, 295, 304, 315, 318, 319, 322, 350, 368, 369, 370, 371, 372, 373, 374, 379, 400, 402, 406, 415, 437, 438, 439, 440, 483, 484, 494, 495, 534, 576, 577, 578, 579, 580, 614, 658, 659, 661, 663, 669</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>233</windowTop>
		<windowLeft>729</windowLeft>
		<windowBottom>1185</windowBottom>
		<windowRight>2149</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/oldschool/">
			<outline text="worknotes.md" created="Tue, 27 Jun 2023 12:01:03 GMT">
				<outline text="#### v0.8.5 --12/2/23 by DW" created="Sat, 02 Dec 2023 18:27:37 GMT">
					<outline text="Added debugging code for pings in publishRssFeed." created="Sat, 02 Dec 2023 18:27:40 GMT"/>
					</outline>
				<outline text="#### v0.8.4 -- 6/29/23 by DW" created="Thu, 29 Jun 2023 13:42:05 GMT">
					<outline text="Breakage fix" created="Thu, 29 Jun 2023 13:49:09 GMT">
						<outline text="* Fixed a bug where a change in the new WordPress support broke the RSS feed for Scripting News." created="Thu, 29 Jun 2023 13:42:06 GMT"/>
						<outline text="* I tried to make the purple pound signs on WordPress renderings point into the WP site instead of the main site, but didn't realize it was recording the permalink to use in the RSS feed later in the build process. I could have worked around this error by doing the WP rendering first, but that was too fragile for my taste. So I just made the PPS point to the scripting.com version of the permalink. It makes sense. Not a hugely important feature, I considered not supporting it at all in the WP version. But this is better. " created="Thu, 29 Jun 2023 13:42:29 GMT"/>
						<outline text="* Moral of the story -- Old School was built over time, with features being added to an existing process, and the dependencies aren't always obvious in the code. Why should rendering a page in HTML have any effect on the building of the RSS feed. Well, it does. :smile:" created="Thu, 29 Jun 2023 13:44:19 GMT"/>
						<outline text="* PS: It's good to have the glue to WP working again. Long story, but I thought they had turned off MetaWeblog API support, but they didn't. Somehow the wires got crossed. Hats off to Automattic for keeping things running. " created="Thu, 29 Jun 2023 13:45:49 GMT"/>
						</outline>
					</outline>
				<outline text="#### v0.8.0 -- 6/28/23 by DW" created="Wed, 28 Jun 2023 12:53:31 GMT">
					<outline text="Cross-posting to WordPress." created="Wed, 28 Jun 2023 12:53:34 GMT">
						<outline text="* If you include a &quot;wordpress&quot; object in the config for a blog, we will try to cross-post the item to that blog." created="Wed, 28 Jun 2023 12:53:45 GMT"/>
						<outline text="* It only attempts to cross-post titled posts." created="Wed, 28 Jun 2023 12:54:30 GMT"/>
						<outline text="* We don't depend on the user modifying CSS for now." created="Wed, 28 Jun 2023 12:54:40 GMT"/>
						<outline text="* See the helloworld example's &lt;a href=&quot;https://github.com/scripting/oldSchoolBlog/blob/master/examples/helloworld/config.json&quot;&gt;config.json file&lt;/a&gt; for an example of how to set it up." created="Wed, 28 Jun 2023 12:55:13 GMT"/>
						</outline>
					<outline text="Believe it or not node-emoji of all things introduced a breaking change, so we have to hold at v1.11.0." created="Tue, 16 May 2023 19:52:49 GMT"/>
					</outline>
				<outline text="#### v0.7.23 -- 11/7/22 by DW" created="Tue, 08 Nov 2022 00:03:10 GMT">
					<outline text="We were generating item guids with the title of the post as part of the URL. This means when you change the title, you create a new item in the flow. Commented the code out that does this. " created="Tue, 08 Nov 2022 00:03:35 GMT"/>
					<outline text="We added the info back to the &amp;lt;link&gt; element. " created="Tue, 08 Nov 2022 00:18:30 GMT"/>
					<outline text="Here's an example of a corrected feed item. " created="Tue, 08 Nov 2022 00:19:03 GMT">
						<outline text="&amp;lt;link&gt;http://data.feedland.org/changenotes/2022/11/07/231800.html?title=yourFeedInFeedland &amp;lt;/link&gt;"/>
						<outline text="&amp;lt;guid&gt;http://data.feedland.org/changenotes/2022/11/07/231800.html &amp;lt;/guid&gt;"/>
						</outline>
					</outline>
				<outline text="#### v0.7.21 -- 10/31/22 by DW" created="Mon, 31 Oct 2022 19:39:41 GMT">
					<outline text="If we're using urlOpml instead of urlJson, we were using an outline that was the incorrect format for Old School. We fix it so it's the right format." created="Mon, 31 Oct 2022 19:39:58 GMT"/>
					</outline>
				<outline text="#### v0.7.21 -- 7/23/22 by DW" created="Sat, 23 Jul 2022 21:55:28 GMT">
					<outline text="We weren't generating inlineImages in the RSS feed if the image was part of a titled item, and in my use of inlineImages they always are. " created="Sat, 23 Jul 2022 21:55:30 GMT"/>
					</outline>
				<outline text="#### v0.7.20 -- 11/23/21 by DW" created="Tue, 23 Nov 2021 21:20:18 GMT">
					<outline text="When processing Markdown nodes, the normal thing is double-spacing, but there is a way get parts of the text to go out single-spaced. " created="Tue, 23 Nov 2021 21:20:30 GMT"/>
					<outline text="Documented &lt;a href=&quot;http://scripting.com/2021/11/23/192342.html?title=nextIterationOnMarkdowninanoutline&quot;&gt;here&lt;/a&gt;. " created="Tue, 23 Nov 2021 21:22:12 GMT"/>
					</outline>
				<outline text="#### v0.7.16 --11/21/21 by DW" created="Fri, 19 Nov 2021 19:09:19 GMT">
					<outline text="Fixed a bug where we would generate an HTML &amp;lt;p&gt; for a singular post that had type markdown. This would cause the purple pound sign to appear below the headline, instead of to the right of the headline, in the rendering." created="Sun, 21 Nov 2021 15:33:20 GMT"/>
					<outline text="For titled posts of type markdown, enclose the generated markdown text in a div not a span, because that's what it is. The type is divMarkdownText." created="Sun, 21 Nov 2021 15:34:46 GMT"/>
					</outline>
				<outline text="#### v0.7.14 --11/19/21 by DW" created="Fri, 19 Nov 2021 19:09:19 GMT">
					<outline text="When proccessing titled posts with type markdown, only emit one newline per headline. We were emitting two. " created="Fri, 19 Nov 2021 19:09:21 GMT"/>
					<outline text="This &lt;a href=&quot;https://github.com/scripting/drummerRFC/issues/14#issuecomment-974157255&quot;&gt;seems&lt;/a&gt; more compatible with the Markdown philosophy. " created="Fri, 19 Nov 2021 19:09:51 GMT"/>
					</outline>
				<outline text="#### v0.7.12 --11/10/21 by DW" created="Wed, 10 Nov 2021 15:16:08 GMT">
					<outline text="We no longer require a type att on top level posts. &lt;a href=&quot;http://scripting.com/drummer/blog/2021/11/12/161023.html?title=nodesWoTypesInBlogs&quot;&gt;Details&lt;/a&gt;." created="Fri, 12 Nov 2021 20:28:52 GMT"/>
					<outline text="RSS feeds now include the image attached to a headline, if present. " created="Fri, 12 Nov 2021 20:29:13 GMT"/>
					</outline>
				<outline text="#### v0.7.10 --11/10/21 by DW" created="Wed, 10 Nov 2021 15:16:08 GMT">
					<outline text="twitter:body was an &lt;a href=&quot;http://scripting.com/2019/12/17/151033.html&quot;&gt;experiment&lt;/a&gt;, as far as I know nothing is using it. And it's putting random garbage in pages. I don't have time to figure out what's going wrong, so I've commented out the feature. " created="Wed, 10 Nov 2021 15:13:23 GMT"/>
					</outline>
				<outline text="#### v0.6.30 --10/22/21 by DW" created="Fri, 22 Oct 2021 14:57:53 GMT">
					<outline text="Two time zone fixes. Had to implement new versions of utils.sameDay and utils.getDatePath that take UTC and the user's local time into account. Full details &lt;a href=&quot;https://github.com/scripting/drummerSupport/issues/88&quot;&gt;here&lt;/a&gt;. Thanks to Amit Gawande for his patience in dealing with these problems from India. " created="Fri, 22 Oct 2021 14:57:54 GMT"/>
					</outline>
				<outline text="#### v0.6.29 --10/18/21 by DW" created="Mon, 18 Oct 2021 15:09:32 GMT">
					<outline text="Add support for urlAboutOpml." created="Mon, 18 Oct 2021 15:09:33 GMT"/>
					<outline text="We were using daveopml, an old package, that has some advantages, ie it expands includes." created="Mon, 18 Oct 2021 15:11:39 GMT"/>
					<outline text="But I prefer using the new opml package, it's what we're using going forward. And unlike daveopml, it returns the full opml structure, not just the top level subs. " created="Mon, 18 Oct 2021 15:11:57 GMT"/>
					<outline text="At some point we're going to want the actual head values in the about outline, for example, and if we continue this way, we won't have them." created="Mon, 18 Oct 2021 15:12:27 GMT"/>
					<outline text="The expanding includes code can be pulled out of daveopml and added to opml. " created="Mon, 18 Oct 2021 15:12:47 GMT"/>
					</outline>
				<outline text="#### v0.6.26 --10/14/21 by DW" created="Thu, 14 Oct 2021 13:55:07 GMT">
					<outline text="Support for new timeZoneOffset head-level attribute. " created="Thu, 14 Oct 2021 13:55:24 GMT"/>
					</outline>
				<outline text="#### v0.6.25 --8/30/21 by DW" created="Wed, 29 Sep 2021 14:56:41 GMT">
					<outline text="Old School was counting days on the home page incorrectly. "/>
					<outline text="There's a max of 25 days (default), it was counting every day as it worked its way back, whether or not anything had been posted that day. "/>
					<outline text="So with 25 as the max, it ran out of days on Sept 4. And thus it didn't look at anything earlier than that."/>
					<outline text="I had to rewrite the loop so it only counted days that there were actual posts on, and now it works."/>
					</outline>
				<outline text="#### v0.6.20 --8/30/21 by DW" created="Mon, 30 Aug 2021 14:49:16 GMT">
					<outline text="Drummer users reported that if they delete a day in the outline, it doesn't get deleted from the rendered blog." created="Mon, 30 Aug 2021 14:49:44 GMT"/>
					<outline text="But this feature is necessary for Scripting News, when I do the monthly rollover and empty the outline" created="Mon, 30 Aug 2021 14:50:26 GMT"/>
					<outline text="Struck a compromise. If a day has been deleted and it's before the last item in the outline, by date, then we do not include it on the home page. If it's after the last date in the outline, we do include it. " created="Mon, 30 Aug 2021 14:50:50 GMT"/>
					<outline text="We'll get a test of this on Sept 1, in two days. " created="Mon, 30 Aug 2021 14:52:18 GMT"/>
					</outline>
				<outline text="#### v0.6.17 -- 8/23/21 by DW" created="Mon, 23 Aug 2021 16:45:15 GMT">
					<outline text="New config setting, blogConfig.flAlwaysBuildHomePage -- if true -- we rebuild the home page and all pages prefixed with its date (the archive page, story pages). " created="Mon, 23 Aug 2021 16:40:47 GMT"/>
					<outline text="Without this, you'd have to make a change to the text to force it to rebuild. That was ok when I was the only user, but now we're asking others to use it, this is not acceptable. ;-)" created="Mon, 23 Aug 2021 16:41:50 GMT"/>
					<outline text="The assumption is that the user wouldn't cause a rebuild if there wasn't anything to rebuild." created="Mon, 23 Aug 2021 16:43:45 GMT"/>
					<outline text="It defaults true. " created="Mon, 23 Aug 2021 16:43:13 GMT"/>
					</outline>
				<outline text="#### v0.6.16 -- 8/22/21 by DW" created="Sun, 22 Aug 2021 16:12:41 GMT">
					<outline text="We weren't checking for blogConfig.urlGlossaryOpml being undefined. Now we do." created="Sun, 22 Aug 2021 16:12:57 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;oldschoolblog&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Blogging in the ways of ye old school.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.8.8&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/oldSchoolBlog.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;oldschool.js&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;oldschool.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;nodejs-websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;dateformat&quot;: &quot;4.5.1&quot;,"/>
						<outline text="&quot;marked&quot;: &quot;3.0.8&quot;,"/>
						<outline text="&quot;node-emoji&quot;: &quot;1.11.0&quot;,"/>
						<outline text="&quot;daverss&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;, "/>
						<outline text="&quot;opml&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveopml&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davexmlrpc&quot;: &quot;*&quot;,"/>
						<outline text="&quot;macroprocess&quot;: &quot;*&quot;,"/>
						<outline text="&quot;wordpress&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="oldschool.js">
				<outline text="var myVersion = &quot;0.8.8&quot;, myProductName = &quot;oldSchool&quot;;     " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="exports.init = init;"/>
				<outline text="exports.publishBlog = publishBlog;"/>
				<outline text="exports.getConfig = getConfig; //8/10/21 by DW" created="Tue, 10 Aug 2021 13:36:54 GMT"/>
				<outline text="exports.initBlog = initBlog; //8/10/21 by DW" created="Tue, 10 Aug 2021 13:36:54 GMT"/>
				<outline text="exports.getVersionInfo = getVersionInfo; //10/28/21 by DW" created="Thu, 28 Oct 2021 15:23:22 GMT"/>
				<outline text=""/>
				<outline text="const rss = require (&quot;daverss&quot;);"/>
				<outline text="const rss = require (&quot;./lib/rss.js&quot;);" isComment="true"/>
				<outline text="const s3 = require (&quot;daves3&quot;);"/>
				<outline text="const s3 = require (&quot;./lib/s3.js&quot;);" isComment="true"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const dateFormat = require (&quot;dateformat&quot;);"/>
				<outline text="const urlpack = require (&quot;url&quot;);" created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074"/>
				<outline text="const websocket = require (&quot;nodejs-websocket&quot;); "/>
				<outline text="const http = require (&quot;http&quot;); " created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549"/>
				<outline text="const emoji = require (&quot;node-emoji&quot;); "/>
				<outline text="const marked = require (&quot;marked&quot;); "/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const querystring = require (&quot;querystring&quot;);"/>
				<outline text="const opml = require (&quot;opml&quot;);"/>
				<outline text="const opml = require (&quot;daveopml&quot;);" isComment="true"/>
				<outline text="const xmlrpc = require (&quot;davexmlrpc&quot;); //10/14/19 by DW"/>
				<outline text="const macroprocess = require (&quot;macroprocess&quot;); //9/2/20 by DW"/>
				<outline text="const wordpress = require (&quot;wordpress&quot;); //6/27/23 by DW "/>
				<outline text=""/>
				<outline text="var baseOutputPath = &quot;/scripting.com/reboot/test/v2/&quot;, baseOutputUrl = &quot;http:/&quot; + baseOutputPath;"/>
				<outline text="var urlJson = &quot;http://storage.littleoutliner.com/users/davewiner/electric/todo.json&quot;;" isComment="true"/>
				<outline text="var urlDefaultTemplate = &quot;http://scripting.com/code/oldschool/daytemplate.html&quot;"/>
				<outline text="var urlDefaultTemplate = &quot;http://fargo.io/code/shared/oldschool/daytemplate.html&quot;" isComment="true"/>
				<outline text="var dayTemplateText = undefined;"/>
				<outline text="var flBackgroundBuilds = false;"/>
				<outline text="var urlGlossaryOpml = &quot;http://1999.io/outlines/glossary.opml&quot;;" isComment="true"/>
				<outline text="var pingLog = [], pathPingLog = &quot;/scripting.com/misc/pingLog.json&quot;, flPingLogChanged = false, flPingLogEnabled = false;"/>
				<outline text="var fnameConfig = &quot;config.json&quot;;"/>
				<outline text="var lastConfigJsontext = undefined; //10/8/20 by DW -- so we can put out a message if it changed"/>
				<outline text=""/>
				<outline text="var config = { //defaults">
					<outline text="port: process.env.PORT || 1400, //11/22/19 by DW"/>
					<outline text="flHttpEnabled: true,"/>
					<outline text="rssFname: &quot;rss.xml&quot;,"/>
					<outline text="rssJsonFname: &quot;rss.json&quot;,"/>
					<outline text="indexHtmlFname: &quot;index.html&quot;,"/>
					<outline text="indexJsonFname: &quot;index.json&quot;,"/>
					<outline text="facebookRssFname: &quot;fb/rss.xml&quot;,"/>
					<outline text="calendarFname: &quot;calendar.json&quot;,"/>
					<outline text="homeHtmlFname: &quot;homepage.html&quot;, //9/9/17 by DW"/>
					<outline text="pagesFolder: &quot;data/pages/&quot;,"/>
					<outline text="daysFolder: &quot;data/days/&quot;,"/>
					<outline text="itemsFolder: &quot;data/items/&quot;,"/>
					<outline text="wordpressFolder: &quot;data/wordpress/&quot;, //6/27/23 by DW" created="Tue, 27 Jun 2023 13:58:42 GMT"/>
					<outline text="debugMessageCallback: undefined, //8/8/17 by DW"/>
					<outline text="flXmlRpcPing: false, //11/22/19 by DW"/>
					<outline text="urlPingEndpoint: &quot;http://githubstorypage.scripting.com/rpc2&quot;, //11/22/19 by DW"/>
					<outline text="flSaveRssDebuggingInfo: true, //1/13/20 by DW"/>
					<outline text="debugFolder: &quot;data/debug/&quot;, //1/13/20 by DW"/>
					<outline text="blogs: {">
						<outline text="dave: {" isComment="true">
							<outline text="title: &quot;Scripting News&quot;,"/>
							<outline text="link: &quot;http://scripting.com/&quot;,"/>
							<outline text="description: &quot;It's even worse than it appears.&quot;,"/>
							<outline text="language: &quot;en-us&quot;,"/>
							<outline text="generator: myProductName + &quot; v&quot; + myVersion,"/>
							<outline text="docs: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
							<outline text="docsForJsonFeed: &quot;https://github.com/scripting/Scripting-News/blob/master/rss-in-json/README.md&quot;,"/>
							<outline text="twitterScreenName: &quot;davewiner&quot;,"/>
							<outline text="maxFeedItems: 50,"/>
							<outline text="appDomain: &quot;scripting.com&quot;,"/>
							<outline text=""/>
							<outline text="flRssCloudEnabled:  true,"/>
							<outline text="rssCloudDomain:  &quot;rpc.rsscloud.io&quot;,"/>
							<outline text="rssCloudPort:  5337,"/>
							<outline text="rssCloudPath:  &quot;/ping&quot;,"/>
							<outline text="rssCloudRegisterProcedure:  &quot;&quot;,"/>
							<outline text="rssCloudProtocol:  &quot;http-post&quot;,"/>
							<outline text=""/>
							<outline text="customPages: [">
								<outline text="{">
									<outline text="fname: &quot;about.html&quot;,"/>
									<outline text="title: &quot;About Scripting News&quot;,"/>
									<outline text="htmltext: &quot;&lt;div class=\&quot;divOutlineContainer\&quot;&gt;&lt;div class=\&quot;divAboutOutline\&quot; id=\&quot;idAboutOutline\&quot; data-title=\&quot;About Scripting News\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="fname: &quot;river.html&quot;,"/>
									<outline text="title: &quot;Scripting News River&quot;,"/>
									<outline text="htmltext: &quot;&lt;div class=\&quot;divRiverContainer\&quot;&gt;&lt;div class=\&quot;divRiverDisplay\&quot; id=\&quot;idRiverDisplay\&quot; data-title=\&quot;River\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="fname: &quot;links.html&quot;,"/>
									<outline text="title: &quot;Scripting News Links&quot;,"/>
									<outline text="htmltext: &quot;&lt;div class=\&quot;divLinkblogDays\&quot; id=\&quot;idLinkblogDays\&quot; data-title=\&quot;Linkblog\&quot;&gt;&lt;/div&gt;&lt;div class=\&quot;divLinkblogSubscribeInfo\&quot; id=\&quot;idLinkblogSubscribeInfo\&quot;&gt;Get the new links from this page &lt;a href=\&quot;https://groups.google.com/forum/?fromgroups#!forum/daves-linkblog\&quot; target=\&quot;_blank\&quot;&gt;sent via email&lt;/a&gt; every night.&lt;/div&gt;&quot;"/>
									<outline text="}"/>
									</outline>
								<outline text="],"/>
								</outline>
							<outline text=""/>
							<outline text="maxDaysOnHomePage: 25, //6/3/17 by DW"/>
							<outline text=""/>
							<outline text="urlJson: &quot;http://storage.littleoutliner.com/users/davewiner/electric/blog.json&quot;,"/>
							<outline text="urlTemplate: undefined, //use the default"/>
							<outline text=""/>
							<outline text="basePath: &quot;/scripting.com/&quot;,"/>
							<outline text="baseUrl: &quot;http://scripting.com/&quot;,"/>
							<outline text="basePath: &quot;/scripting.com/reboot/test/v3/dave/&quot;," isComment="true"/>
							<outline text="baseUrl: &quot;http://scripting.com/reboot/test/v3/dave/&quot;," isComment="true"/>
							<outline text=""/>
							<outline text="urlHeaderImage: &quot;http://scripting.com/images/2017/05/10/greatWall.png&quot;,"/>
							<outline text="flGoogleAnalytics: true,"/>
							<outline text="idGoogleAccount: &quot;UA-39531990-1&quot;,"/>
							<outline text="urlUpdateSocket: undefined, //from the JSON file"/>
							<outline text="ownerFacebookAccount: undefined,  //from the JSON file"/>
							<outline text="ownerGithubAccount: undefined,  //from the JSON file"/>
							<outline text="ownerLinkedinAccount: undefined,  //from the JSON file"/>
							<outline text="mySocket: undefined,"/>
							<outline text="calendar: new Object (),"/>
							<outline text="flCalendarChanged: false"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="var dataForBlogs = { //10/6/20 by DW -- one for each blog">
					<outline text="};"/>
					</outline>
				<outline text="" created="Tue, 10 Aug 2021 13:37:29 GMT"/>
				<outline text="function typeIsStory (theType) { //types that are recognized as blog items" created="Thu, 28 Oct 2021 16:29:58 GMT">
					<outline text="switch (theType) {">
						<outline text="case &quot;outline&quot;: case &quot;tweet&quot;: case &quot;link&quot;: case &quot;markdown&quot;:">
							<outline text="return (true);"/>
							</outline>
						<outline text="default:">
							<outline text="return (false);"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}" created="Thu, 28 Oct 2021 16:30:10 GMT"/>
					</outline>
				<outline text="function dateGreater (d1, d2) { //8/30/21 by DW">
					<outline text="return (new Date (d1) &gt; new Date (d2));"/>
					<outline text="}"/>
					</outline>
				<outline text="function getConfig () { //8/10/21 by DW" created="Tue, 10 Aug 2021 13:37:29 GMT">
					<outline text="return (config);" created="Tue, 10 Aug 2021 13:37:37 GMT"/>
					<outline text="}" created="Tue, 10 Aug 2021 13:37:41 GMT"/>
					</outline>
				<outline text="function pingForStoryPage () { //10/14/19 by DW">
					<outline text="Changes" isComment="true">
						<outline text="11/22/19; 5:04:49 PM by DW">
							<outline text="Moved the github stories app to Hunter. Using a real domain name instead of localhost."/>
							<outline text="Also support config.flXmlRpcPing, only send the message if it's true."/>
							</outline>
						</outline>
					<outline text="const urlEndpoint = &quot;http://localhost:1418/rpc2&quot;;" isComment="true"/>
					<outline text="if (config.flXmlRpcPing) {">
						<outline text="xmlrpc.client (config.urlPingEndpoint, &quot;ping&quot;, {}, &quot;xml&quot;, function (err, data) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;sendPing: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" isComment="true">
								<outline text="console.log (&quot;sendPing: data == &quot; + utils.jsonStringify (data));"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getDayHtml (blogName, theDay, callback) { //10/17/19 by DW">
					<outline text="var blogConfig = config.blogs [blogName]"/>
					<outline text="var relpath = utils.getDatePath (new Date (theDay), false) + &quot;.html&quot;;"/>
					<outline text="var f = config.pagesFolder + blogName + &quot;/&quot; + relpath;"/>
					<outline text="console.log (&quot;getDayHtml: f == &quot; + f);"/>
					<outline text="fs.readFile (f, function (err, data) {">
						<outline text="const type = &quot;text/html&quot;;"/>
						<outline text="if (err) {">
							<outline text="callback (404, type, &quot;Not found.&quot;)"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (200, type, data.toString ())"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function publishFile (path, data, type, acl, callback, metadata) { //8/14/17 by DW">
					<outline text="s3.newObject (path, data, type, acl, callback, metadata);"/>
					<outline text="}"/>
					</outline>
				<outline text="function debugMessage (theMessage) { //8/8/17 by DW">
					<outline text="console.log (theMessage);"/>
					<outline text="if (config.debugMessageCallback !== undefined) {">
						<outline text="config.debugMessageCallback (theMessage);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function httpReadUrl (url, callback) {" created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035">
					<outline text="request (url, function (error, response, data) {">
						<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
							<outline text="callback (data) "/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038"/>
					</outline>
				<outline text="function isDirectory (path) { //goes in utils">
					<outline text="return (fs.statSync (path).isDirectory ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function fsWriteFile (f, s) { //8/8/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="8/8/17; 9:19:59 AM by DW">
							<outline text="Silence the deprecation warnings from Electron. It insists fs.writeFile always have a callback for errors. "/>
							</outline>
						</outline>
					<outline text="utils.sureFilePath  (f, function () {">
						<outline text="fs.writeFile (f, s, function (err) {">
							<outline text="if (err) {">
								<outline text="debugMessage (&quot;fsWriteFile: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function daysInMonth (theDay) { //goes in utils">
					<outline text="return (new Date (theDay.getYear (), theDay.getMonth () + 1, 0).getDate ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function emojiProcess (s) {">
					<outline text="function addSpan (code, name) {">
						<outline text="return (&quot;&lt;span class=\&quot;spOldSchoolEmoji\&quot;&gt;&quot; + code + &quot;&lt;/span&gt;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (emoji.emojify (s, undefined, addSpan));"/>
					<outline text="}"/>
					</outline>
				<outline text="function markdownProcess (s, flGenerateHtmlParagraphs=false) {">
					<outline text="Changes" isComment="true" created="Fri, 19 Nov 2021 21:33:11 GMT">
						<outline text="11/21/21; 9:55:49 AM by DW" created="Sun, 21 Nov 2021 14:55:49 GMT">
							<outline text="New optional param, flGenerateHtmlParagraphs. " created="Sun, 21 Nov 2021 14:55:50 GMT"/>
							</outline>
						<outline text="11/19/21; 4:33:14 PM by DW" created="Fri, 19 Nov 2021 21:33:13 GMT">
							<outline text="Commented out the renderer that neutered paragraphs. I don't know why it was doing this, but it made no sense. And it explained why we were screwing up paragraphs. " created="Fri, 19 Nov 2021 21:33:14 GMT"/>
							</outline>
						</outline>
					<outline text="var renderer = new marked.Renderer ();"/>
					<outline text="var options = {">
						<outline text="renderer: renderer"/>
						<outline text="};"/>
						</outline>
					<outline text="if (flGenerateHtmlParagraphs) {" created="Sun, 21 Nov 2021 14:57:36 GMT">
						<outline text="return (marked (s, options));"/>
						<outline text="}" created="Sun, 21 Nov 2021 14:57:44 GMT"/>
						</outline>
					<outline text="else {" created="Sun, 21 Nov 2021 14:57:45 GMT">
						<outline text="renderer.paragraph = function (s) {">
							<outline text="return (s);"/>
							<outline text="};"/>
							</outline>
						<outline text="return (marked (s, options));"/>
						<outline text="}" created="Sun, 21 Nov 2021 14:57:48 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function debugMarkdownText (theText) { //for debugging -- 10/30/21 by DW" created="Sat, 30 Oct 2021 16:54:39 GMT">
					<outline text="theText = utils.replaceAll (theText, &quot;\n&quot;, &quot;\\n&quot;);" created="Sat, 30 Oct 2021 16:54:48 GMT"/>
					<outline text="theText = utils.replaceAll (theText, &quot;\t&quot;, &quot;\\t&quot;);" created="Sat, 30 Oct 2021 16:54:48 GMT"/>
					<outline text="theText = utils.replaceAll (theText, &quot;\r&quot;, &quot;\\r&quot;);" created="Sat, 30 Oct 2021 16:54:48 GMT"/>
					<outline text="return (theText);" created="Sat, 30 Oct 2021 16:54:48 GMT"/>
					<outline text="}" created="Sat, 30 Oct 2021 16:54:45 GMT"/>
					</outline>
				<outline text="function addDayToCalendar (blogData, theDay, url) {">
					<outline text="var d = new Date (theDay);"/>
					<outline text="var year = blogData.calendar [d.getFullYear ()];"/>
					<outline text="if (year === undefined) {">
						<outline text="blogData.calendar [d.getFullYear ()] = new Object ();"/>
						<outline text="year = blogData.calendar [d.getFullYear ()];"/>
						<outline text="blogData.flCalendarChanged = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="var month = year [d.getMonth ()];"/>
					<outline text="if (month === undefined) {">
						<outline text="year [d.getMonth ()] = new Object ();"/>
						<outline text="month = year [d.getMonth ()];"/>
						<outline text="blogData.flCalendarChanged = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="var day = month [d.getDate ()];"/>
					<outline text="if (day === undefined) {">
						<outline text="month [d.getDate ()] = new Object ();"/>
						<outline text="day = month [d.getDate ()];"/>
						<outline text="blogData.flCalendarChanged = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (day.url != url) {">
						<outline text="day.url = url;"/>
						<outline text="blogData.flCalendarChanged = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="debugMessage (utils.jsonStringify (blogData.calendar));" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function publishCalendarJson (blogConfig, blogData, callback) {">
					<outline text="var path = blogConfig.basePath + config.calendarFname;"/>
					<outline text="publishFile (path, utils.jsonStringify (blogData.calendar), &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
						<outline text="if (err) {">
							<outline text="debugMessage (&quot;publishCalendarJson: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="addToPagesPublished (config.calendarFname);" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readCalendarJson (blogConfig, blogData, callback) {">
					<outline text="var url = blogConfig.baseUrl + config.calendarFname;"/>
					<outline text="blogData.flCalendarChanged = false; //6/12/17 by DW"/>
					<outline text="httpReadUrl (url, function (jsontext) {">
						<outline text="if (jsontext !== undefined) {">
							<outline text="try {">
								<outline text="blogData.calendar = JSON.parse (jsontext);"/>
								<outline text="debugMessage (&quot;readCalendarJson: blogData.calendar == &quot; + utils.jsonStringify (blogData.calendar));" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="debugMessage (&quot;readCalendarJson: err.message == &quot; + err.message);"/>
								<outline text="blogData.calendar = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="blogData.calendar = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (jsontext);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readPingLog (callback) {">
					<outline text="httpReadUrl (&quot;http:/&quot; + pathPingLog, function (jsontext) {">
						<outline text="if (jsontext !== undefined) {">
							<outline text="pingLog = JSON.parse (jsontext);"/>
							<outline text="debugMessage (&quot;readPingLog: &quot; + pingLog.length + &quot; items in the log.&quot;);" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function writePingLog (callback) {">
					<outline text="s3.newObject (pathPingLog, utils.jsonStringify (pingLog), &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
						<outline text="if (err) {">
							<outline text="debugMessage (&quot;writePingLog: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function notComment (item) { //11/5/20 by DW">
					<outline text="return (!utils.getBoolean (item.isComment));"/>
					<outline text="}"/>
					</outline>
				<outline text="function isComment (item) { //11/5/20 by DW">
					<outline text="return (utils.getBoolean (item.isComment));"/>
					<outline text="}"/>
					</outline>
				<outline text="function httpReadOutline (url, callback) { //10/18/21 by DW" created="Mon, 09 Aug 2021 16:18:33 GMT">
					<outline text="httpReadUrl (url, function (opmltext) {" created="Thu, 17 Jun 2021 19:56:51 GMT">
						<outline text="if (opmltext === undefined) {" created="Mon, 18 Oct 2021 15:27:07 GMT">
							<outline text="callback ({message: &quot;Can't read the outline.&quot;});" created="Sun, 08 Aug 2021 15:14:05 GMT"/>
							<outline text="}" created="Mon, 18 Oct 2021 15:27:15 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 18 Oct 2021 15:27:15 GMT">
							<outline text="opml.parse (opmltext, function (err, theOutline) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined, theOutline);" created="Mon, 09 Aug 2021 16:19:53 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 18 Oct 2021 15:27:17 GMT"/>
							</outline>
						<outline text="});" created="Thu, 17 Jun 2021 19:58:33 GMT"/>
						</outline>
					<outline text="}" created="Mon, 09 Aug 2021 16:18:47 GMT"/>
					</outline>
				<outline text="function sameDayUTC (d1, d2) { //10/22/21 by DW " created="Tue, 15 Jan 2013 00:24:33 GMT" pgfnum="17115">
					<outline text="//returns true if the two dates are on the same day, in UTC" created="Tue, 29 Jan 2013 19:16:02 GMT" pgfnum="17889"/>
					<outline text="d1 = new Date (d1);" created="Tue, 15 Jan 2013 00:45:10 GMT" pgfnum="17126"/>
					<outline text="d2 = new Date (d2);" created="Tue, 15 Jan 2013 00:45:10 GMT" pgfnum="17126"/>
					<outline text="return ((d1.getUTCFullYear () == d2.getUTCFullYear ()) &amp;&amp; (d1.getUTCMonth () == d2.getUTCMonth ()) &amp;&amp; (d1.getUTCDate () == d2.getUTCDate ()));"/>
					<outline text="}" created="Mon, 03 Feb 2014 18:49:54 GMT" pgfnum="36998"/>
					</outline>
				<outline text="function getVersionInfo () { //10/28/21 by DW" created="Thu, 28 Oct 2021 15:23:53 GMT">
					<outline text="return ({" created="Thu, 28 Oct 2021 15:24:07 GMT">
						<outline text="myProductName, " created="Thu, 28 Oct 2021 15:24:34 GMT"/>
						<outline text="myVersion" created="Thu, 28 Oct 2021 15:24:34 GMT"/>
						<outline text="});" created="Thu, 28 Oct 2021 15:24:11 GMT"/>
						</outline>
					<outline text="}" created="Thu, 28 Oct 2021 15:23:57 GMT"/>
					</outline>
				<outline text="function getNodeType (theNode) { //10/29/21 by DW" created="Fri, 29 Oct 2021 15:31:06 GMT">
					<outline text="if (theNode.type === undefined) {" created="Fri, 29 Oct 2021 15:31:20 GMT">
						<outline text="return (undefined);" created="Fri, 29 Oct 2021 15:31:39 GMT"/>
						<outline text="}" created="Fri, 29 Oct 2021 15:31:44 GMT"/>
						</outline>
					<outline text="else {" created="Fri, 29 Oct 2021 15:31:47 GMT">
						<outline text="return (theNode.type);" created="Fri, 29 Oct 2021 15:31:49 GMT"/>
						<outline text="}" created="Fri, 29 Oct 2021 15:31:53 GMT"/>
						</outline>
					<outline text="}" created="Fri, 29 Oct 2021 15:31:15 GMT"/>
					</outline>
				<outline text=""/>
				<outline text="function publishBlog (jstruct, options, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="11/12/21; 10:55:46 AM by DW" created="Fri, 12 Nov 2021 15:55:43 GMT">
							<outline text="We're loosening the rule that every node must have a type attribute to be considered a post. Now it's enough that its parent is of type calendarDay." created="Fri, 12 Nov 2021 15:55:46 GMT">
								<outline text="http://scripting.com/drummer/blog/2021/11/12/161023.html?title=nodesWoTypesInBlogs" created="Fri, 12 Nov 2021 19:45:42 GMT"/>
								</outline>
							</outline>
						<outline text="11/2/21; 11:42:59 AM by DW" created="Tue, 02 Nov 2021 15:42:59 GMT">
							<outline text="The main body of this routine would call many of the build routines in parallel, so the time reported to build wasn't accurate, and pages that were built wouldn't show up in the eventLog we return. " created="Tue, 02 Nov 2021 15:50:38 GMT">
								<outline text="publishHomePage (); "/>
								<outline text="publishMonthArchivePage ();"/>
								<outline text="publishRssFeed ();"/>
								<outline text="publishCustomPages ();"/>
								<outline text="publishHomeJson (); //7/18/17 by DW"/>
								<outline text="publishStandalonePages (); //11/9/20 by DW"/>
								</outline>
							<outline text="Now we chain them, not calling the next in sequence until the previous one has completed. Yes I know this is not as efficient as writing the files in parallel, but I want the right stats and paths. " created="Tue, 02 Nov 2021 15:51:36 GMT"/>
							</outline>
						<outline text="10/27/21; 12:41:47 PM by DW" created="Wed, 27 Oct 2021 16:41:47 GMT">
							<outline text="Added the eventLog -- a good idea that doesn't work. " created="Wed, 27 Oct 2021 16:41:48 GMT"/>
							<outline text="The callback is called long before the build is finished. So when we return there's only one item in the event log." created="Wed, 27 Oct 2021 16:41:57 GMT"/>
							<outline text="If we could get the callback to wait until it's all done we could return something meaningful. " created="Wed, 27 Oct 2021 16:42:21 GMT"/>
							<outline text="Not going to do it now. Already too much rocking of the boat. " created="Wed, 27 Oct 2021 16:42:36 GMT"/>
							</outline>
						<outline text="1/13/21; 12:13:02 PM by DW">
							<outline text="Added initial support for the tag server. See pingTagServer and tagProcess."/>
							</outline>
						<outline text="11/5/20; 11:25:30 AM by DW">
							<outline text="Fixed bug where random top-level headline would cause Old School to fail to process the blog."/>
							<outline text="Fixed bug where an empty day would cause a similar failure."/>
							<outline text="Don't include commented items."/>
							</outline>
						<outline text="8/14/17; 11:20:57 AM by DW">
							<outline text="Second paramter used to be blogName. Now it's an options struct, and blogName is an element of that struct. "/>
							</outline>
						<outline text="8/8/17; 4:25:37 PM by DW">
							<outline text="Send blogConfig back as a parameter to callback."/>
							</outline>
						</outline>
					<outline text="var blogName = options.blogName; //8/14/17 by DW"/>
					<outline text="var blogConfig = config.blogs [blogName];"/>
					<outline text="var blogData = dataForBlogs [blogName]; //10/6/20 by DW"/>
					<outline text="var daysArray = new Array ();"/>
					<outline text="var eventLog = { " created="Wed, 27 Oct 2021 15:55:00 GMT">
						<outline text="pagesPublished: new Array ()," created="Wed, 27 Oct 2021 15:55:19 GMT"/>
						<outline text="pingsSent: new Array ()" created="Wed, 27 Oct 2021 16:05:49 GMT"/>
						<outline text="};" created="Wed, 27 Oct 2021 15:55:12 GMT"/>
						</outline>
					<outline text="var whenstart = new Date ();" created="Wed, 27 Oct 2021 17:08:55 GMT"/>
					<outline text="const wpPermalinkStyle = &quot; style=\&quot;text-decoration: none; margin-left: .1em; color: purple;\&quot; &quot;; //6/28/23 by DW" created="Wed, 28 Jun 2023 11:58:23 GMT"/>
					<outline text="" created="Tue, 10 Aug 2021 15:16:47 GMT"/>
					<outline text="function addToPagesPublished (path) {" created="Wed, 27 Oct 2021 15:58:26 GMT">
						<outline text="debugMessage (&quot;published: &quot; + path);" created="Wed, 27 Oct 2021 16:42:51 GMT"/>
						<outline text="eventLog.pagesPublished.push (path);" created="Wed, 27 Oct 2021 15:58:39 GMT"/>
						<outline text="}" created="Wed, 27 Oct 2021 15:58:37 GMT"/>
						</outline>
					<outline text="function addToPingsSent (jstruct) {" created="Wed, 27 Oct 2021 15:58:26 GMT">
						<outline text="debugMessage (&quot;ping: urlServer == &quot; + jstruct.urlServer + &quot;, urlFeed == &quot; + jstruct.urlFeed);" isComment="true" created="Wed, 27 Oct 2021 16:42:51 GMT"/>
						<outline text="eventLog.pingsSent.push (jstruct);" created="Wed, 27 Oct 2021 15:58:39 GMT"/>
						<outline text="}" created="Wed, 27 Oct 2021 15:58:37 GMT"/>
						</outline>
					<outline text="" created="Fri, 22 Oct 2021 14:35:34 GMT"/>
					<outline text="function getTimeZoneOffset () {" created="Tue, 26 Oct 2021 16:22:46 GMT">
						<outline text="if (blogConfig.timeZoneOffset === undefined) {" created="Tue, 26 Oct 2021 16:23:00 GMT">
							<outline text="return (0);" created="Tue, 26 Oct 2021 16:23:25 GMT"/>
							<outline text="}" created="Tue, 26 Oct 2021 16:23:09 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 26 Oct 2021 16:23:09 GMT">
							<outline text="return (blogConfig.timeZoneOffset);" created="Tue, 26 Oct 2021 16:23:16 GMT"/>
							<outline text="}" created="Tue, 26 Oct 2021 16:23:11 GMT"/>
							</outline>
						<outline text="}" created="Tue, 26 Oct 2021 16:22:56 GMT"/>
						</outline>
					<outline text="function getBlogTime (when) {  //10/26/21 by DW" created="Wed, 13 Oct 2021 20:45:51 GMT">
						<outline text="function processTimeZoneString (s) { //convert someting like 5:30 to 5.5" created="Wed, 13 Oct 2021 21:30:39 GMT">
							<outline text="var splits = s.split (&quot;:&quot;);" created="Wed, 13 Oct 2021 21:31:10 GMT"/>
							<outline text="if (splits.length == 2) {" created="Wed, 13 Oct 2021 21:32:06 GMT">
								<outline text="var ctsecs = Number (splits [1]);" created="Wed, 13 Oct 2021 21:32:36 GMT"/>
								<outline text="var hourFraction = ctsecs / 60;" created="Sat, 16 Oct 2021 16:36:57 GMT"/>
								<outline text="if (s [0] == &quot;-&quot;) {" created="Sat, 16 Oct 2021 16:36:57 GMT">
									<outline text="hourFraction = -hourFraction;" created="Sat, 16 Oct 2021 16:37:16 GMT"/>
									<outline text="}" created="Sat, 16 Oct 2021 16:37:25 GMT"/>
									</outline>
								<outline text="s = Number (splits [0]) + hourFraction;" created="Wed, 13 Oct 2021 21:33:19 GMT"/>
								<outline text="}" created="Wed, 13 Oct 2021 21:32:15 GMT"/>
								</outline>
							<outline text="return (s);" created="Wed, 13 Oct 2021 21:34:10 GMT"/>
							<outline text="}" created="Wed, 13 Oct 2021 21:31:03 GMT"/>
							</outline>
						<outline text="try {" created="Thu, 13 Jun 2013 22:19:31 GMT" pgfnum="4655">
							<outline text="var offset = Number (processTimeZoneString (getTimeZoneOffset ()));" created="Thu, 13 Jun 2013 21:39:14 GMT" pgfnum="4646"/>
							<outline text="var d = new Date (when);" created="Thu, 13 Jun 2013 21:24:44 GMT" pgfnum="4636"/>
							<outline text="var localTime = d.getTime ();" created="Thu, 13 Jun 2013 21:29:10 GMT" pgfnum="4638"/>
							<outline text="var localOffset = d.getTimezoneOffset () *  60000;" created="Thu, 13 Jun 2013 21:29:18 GMT" pgfnum="4639"/>
							<outline text="var utc = localTime + localOffset;" created="Thu, 13 Jun 2013 21:30:17 GMT" pgfnum="4640"/>
							<outline text="var blogTime = utc + (3600000 * offset);"/>
							<outline text="return (blogTime);" created="Fri, 22 Oct 2021 14:29:09 GMT"/>
							<outline text="}" created="Thu, 13 Jun 2013 22:19:58 GMT" pgfnum="4659"/>
							</outline>
						<outline text="catch (tryerror) {" created="Thu, 13 Jun 2013 22:19:41 GMT" pgfnum="4656">
							<outline text="return (new Date (when).getTime ());" created="Thu, 28 Oct 2021 01:44:16 GMT"/>
							<outline text="}" created="Thu, 13 Jun 2013 22:19:51 GMT" pgfnum="4658"/>
							</outline>
						<outline text="}" created="Wed, 13 Oct 2021 20:46:06 GMT"/>
						</outline>
					<outline text="function getBlogLocalDate (when=new Date ()) { //10/26/21 by DW" created="Mon, 25 Oct 2021 20:07:29 GMT">
						<outline text="Changes" isComment="true" created="Mon, 25 Oct 2021 20:08:25 GMT">
							<outline text="10/25/21; 4:08:30 PM by DW" created="Mon, 25 Oct 2021 20:08:29 GMT">
								<outline text="The date we return is translated from GMT to the local time where the blog originates. " created="Mon, 25 Oct 2021 20:08:31 GMT"/>
								<outline text="If you were to do a getHours on this version of the date, you'd get the hours where the blog originates. " created="Mon, 25 Oct 2021 20:09:28 GMT"/>
								<outline text="It's really confusing, but super-important. " created="Mon, 25 Oct 2021 20:10:11 GMT"/>
								<outline text="Example -- " created="Mon, 25 Oct 2021 20:20:29 GMT">
									<outline text="getBlogLocalDate () returns a date that when I view it as a string is this " created="Mon, 25 Oct 2021 20:20:32 GMT">
										<outline text="Tue Oct 26 2021 01:47:26 GMT-0400 (Eastern Daylight Time)" created="Mon, 25 Oct 2021 20:20:43 GMT"/>
										</outline>
									<outline text="There's the confusion. It thinks it's in Eastern Daylight Time, but that's not the way we meant it. " created="Mon, 25 Oct 2021 20:21:00 GMT"/>
									<outline text="We mean these are the numbers of the current time where the blog lives. " created="Mon, 25 Oct 2021 20:21:27 GMT"/>
									<outline text="So it's 9/26/2021 1:47:26 AM in New Zealand" created="Mon, 25 Oct 2021 20:21:42 GMT"/>
									</outline>
								</outline>
							</outline>
						<outline text="var millisecsSince1970 = getBlogTime (when, getTimeZoneOffset ()); //in local time" created="Sat, 23 Oct 2021 19:40:04 GMT"/>
						<outline text="var jsBlogDate = new Date (millisecsSince1970);" created="Mon, 25 Oct 2021 15:27:29 GMT"/>
						<outline text="return (jsBlogDate);" created="Mon, 25 Oct 2021 20:08:08 GMT"/>
						<outline text="}" created="Mon, 25 Oct 2021 20:07:51 GMT"/>
						</outline>
					<outline text="function getBlogDateInfo (when) { //10/26/21 by DW" created="Sat, 23 Oct 2021 19:37:42 GMT">
						<outline text="var jsBlogDate = getBlogLocalDate (when, getTimeZoneOffset ());" created="Mon, 25 Oct 2021 20:10:32 GMT"/>
						<outline text="" isComment="true" created="Mon, 25 Oct 2021 20:10:31 GMT"/>
						<outline text="var millisecsSince1970 = getBlogTime (when, timeZoneOffset); //in local time" isComment="true" created="Sat, 23 Oct 2021 19:40:04 GMT"/>
						<outline text="var jsBlogDate = new Date (millisecsSince1970);" isComment="true" created="Mon, 25 Oct 2021 15:27:29 GMT"/>
						<outline text="" isComment="true" created="Mon, 25 Oct 2021 20:10:32 GMT"/>
						<outline text="var dateInfo = {" created="Mon, 25 Oct 2021 15:28:12 GMT">
							<outline text="day: jsBlogDate.getDate ()," created="Mon, 25 Oct 2021 15:28:23 GMT"/>
							<outline text="month: jsBlogDate.getMonth () + 1," created="Mon, 25 Oct 2021 15:28:23 GMT"/>
							<outline text="year: jsBlogDate.getFullYear ()," created="Mon, 25 Oct 2021 15:28:23 GMT"/>
							<outline text="hour: jsBlogDate.getHours ()," created="Mon, 25 Oct 2021 15:28:23 GMT"/>
							<outline text="minute: jsBlogDate.getMinutes ()," created="Mon, 25 Oct 2021 15:28:23 GMT"/>
							<outline text="second: jsBlogDate.getSeconds ()" created="Mon, 25 Oct 2021 15:28:23 GMT"/>
							<outline text="};" created="Mon, 25 Oct 2021 15:28:16 GMT"/>
							</outline>
						<outline text="return (dateInfo);" created="Mon, 25 Oct 2021 15:30:07 GMT"/>
						<outline text="}" created="Sat, 23 Oct 2021 19:37:47 GMT"/>
						</outline>
					<outline text="function outlineToStories (theOutline) { //10/26/21 by DW" isComment="true" created="Mon, 25 Oct 2021 15:11:04 GMT">
						<outline text="Changes" isComment="true" created="Tue, 26 Oct 2021 16:43:42 GMT">
							<outline text="10/26/21; 12:43:47 PM by DW" created="Tue, 26 Oct 2021 16:43:46 GMT">
								<outline text="Starting with the outline representing the blog, go through all the headlines with type == outline, sort them into " created="Tue, 26 Oct 2021 16:43:47 GMT"/>
								<outline text="arrays whose name is a date like 10/1/2021 where each story was created on that date in the blogs local time zone." created="Tue, 26 Oct 2021 16:44:23 GMT"/>
								<outline text="If you go through the stories object in order, that's what goes on the home page of the blog. " created="Tue, 26 Oct 2021 16:45:08 GMT"/>
								</outline>
							</outline>
						<outline text="var theStories = new Object ();" created="Mon, 25 Oct 2021 15:11:23 GMT"/>
						<outline text="function pad (num) {" created="Tue, 26 Oct 2021 17:54:45 GMT">
							<outline text="return (utils.padWithZeros (num, 2));" created="Tue, 26 Oct 2021 17:54:51 GMT"/>
							<outline text="}" created="Tue, 26 Oct 2021 17:55:02 GMT"/>
							</outline>
						<outline text="function visitStories (theNode, visit) {" created="Mon, 25 Oct 2021 15:14:53 GMT">
							<outline text="function visitSubs (theNode) {" created="Mon, 25 Oct 2021 15:15:19 GMT">
								<outline text="if (notComment (theNode)) {" created="Tue, 26 Oct 2021 21:55:51 GMT">
									<outline text="if (theNode.subs !== undefined) {" created="Sat, 03 Jul 2021 19:34:31 GMT">
										<outline text="theNode.subs.forEach (function (theSub) {" created="Mon, 25 Oct 2021 15:18:06 GMT">
											<outline text="if (notComment (theSub)) {" created="Tue, 26 Oct 2021 21:55:51 GMT">
												<outline text="if (theSub.type == &quot;outline&quot;) {" created="Mon, 25 Oct 2021 15:15:45 GMT">
													<outline text="visit (theSub);" created="Mon, 25 Oct 2021 15:16:29 GMT"/>
													<outline text="}" created="Mon, 25 Oct 2021 15:15:59 GMT"/>
													</outline>
												<outline text="else {" created="Mon, 25 Oct 2021 15:16:38 GMT">
													<outline text="visitSubs (theSub);" created="Mon, 25 Oct 2021 15:16:40 GMT"/>
													<outline text="}" created="Mon, 25 Oct 2021 15:16:52 GMT"/>
													</outline>
												<outline text="}" created="Tue, 26 Oct 2021 21:56:00 GMT"/>
												</outline>
											<outline text="});" created="Mon, 25 Oct 2021 15:18:24 GMT"/>
											</outline>
										<outline text="}" created="Sat, 03 Jul 2021 19:34:39 GMT"/>
										</outline>
									<outline text="}" created="Tue, 26 Oct 2021 21:56:52 GMT"/>
									</outline>
								<outline text="}" created="Mon, 25 Oct 2021 15:15:29 GMT"/>
								</outline>
							<outline text="visitSubs (theNode);" created="Mon, 25 Oct 2021 15:15:19 GMT"/>
							<outline text="}" created="Mon, 25 Oct 2021 15:15:14 GMT"/>
							</outline>
						<outline text="visitStories (theOutline.body, function (theStory) {" created="Sat, 03 Jul 2021 19:33:26 GMT">
							<outline text="var dateInfo = getBlogDateInfo (theStory.created, theOutline.head.timeZoneOffset);" created="Mon, 25 Oct 2021 15:31:41 GMT"/>
							<outline text="var datestring = dateInfo.year + &quot;/&quot; + pad (dateInfo.month) + &quot;/&quot; + pad (dateInfo.day);" created="Mon, 25 Oct 2021 15:39:26 GMT"/>
							<outline text="if (theStories [datestring] === undefined) {" created="Mon, 25 Oct 2021 15:39:37 GMT">
								<outline text="theStories [datestring] = new Array ();" created="Mon, 25 Oct 2021 15:40:05 GMT"/>
								<outline text="}" created="Mon, 25 Oct 2021 15:39:54 GMT"/>
								</outline>
							<outline text="theStories [datestring].push (theStory);" created="Mon, 25 Oct 2021 15:40:43 GMT"/>
							<outline text="console.log (datestring + &quot;: &quot; + theStory.text);" isComment="true" created="Mon, 25 Oct 2021 15:14:13 GMT"/>
							<outline text="});" created="Mon, 25 Oct 2021 15:13:59 GMT"/>
							</outline>
						<outline text="return (theStories);" created="Mon, 25 Oct 2021 15:41:45 GMT"/>
						<outline text="}" created="Mon, 25 Oct 2021 15:11:15 GMT"/>
						</outline>
					<outline text="" created="Fri, 12 Nov 2021 15:54:42 GMT"/>
					<outline text="function outlineToDaysArray (theOutline) { //10/26/21 by DW" created="Mon, 25 Oct 2021 15:11:04 GMT">
						<outline text="Changes" isComment="true" created="Tue, 26 Oct 2021 16:43:42 GMT">
							<outline text="10/26/21; 12:43:47 PM by DW" created="Tue, 26 Oct 2021 16:43:46 GMT">
								<outline text="Starting with the outline representing the blog, go through all the headlines with type == outline, sort them into " created="Tue, 26 Oct 2021 16:43:47 GMT"/>
								<outline text="arrays whose name is a date like 10/1/2021 where each story was created on that date in the blogs local time zone." created="Tue, 26 Oct 2021 16:44:23 GMT"/>
								<outline text="If you go through the stories object in order, that's what goes on the home page of the blog. " created="Tue, 26 Oct 2021 16:45:08 GMT"/>
								</outline>
							</outline>
						<outline text="var theStories = new Object ();" created="Mon, 25 Oct 2021 15:11:23 GMT"/>
						<outline text="function pad (num) {" created="Tue, 26 Oct 2021 17:54:45 GMT">
							<outline text="return (utils.padWithZeros (num, 2));" created="Tue, 26 Oct 2021 17:54:51 GMT"/>
							<outline text="}" created="Tue, 26 Oct 2021 17:55:02 GMT"/>
							</outline>
						<outline text="function visitStories (theNode, visit) {" created="Mon, 25 Oct 2021 15:14:53 GMT">
							<outline text="function visitSubs (theNode) {" created="Mon, 25 Oct 2021 15:15:19 GMT">
								<outline text="if (notComment (theNode)) {" created="Tue, 26 Oct 2021 21:55:51 GMT">
									<outline text="if (theNode.subs !== undefined) {" created="Sat, 03 Jul 2021 19:34:31 GMT">
										<outline text="theNode.subs.forEach (function (theSub) {" created="Mon, 25 Oct 2021 15:18:06 GMT">
											<outline text="if (notComment (theSub)) {" created="Tue, 26 Oct 2021 21:55:51 GMT">
												<outline text="if (typeIsStory (theSub.type)) {" created="Mon, 25 Oct 2021 15:15:45 GMT">
													<outline text="visit (theSub);" created="Mon, 25 Oct 2021 15:16:29 GMT"/>
													<outline text="}" created="Mon, 25 Oct 2021 15:15:59 GMT"/>
													</outline>
												<outline text="else {" created="Mon, 25 Oct 2021 15:16:38 GMT">
													<outline text="if (theNode.type == &quot;calendarDay&quot;) { //11/12/21 by DW -- the sub's parent is a calendarDay type" created="Fri, 12 Nov 2021 15:53:32 GMT">
														<outline text="visit (theSub);" created="Mon, 25 Oct 2021 15:16:29 GMT"/>
														<outline text="}" created="Fri, 12 Nov 2021 15:53:35 GMT"/>
														</outline>
													<outline text="else {" created="Fri, 12 Nov 2021 15:53:36 GMT">
														<outline text="visitSubs (theSub);" created="Mon, 25 Oct 2021 15:16:40 GMT"/>
														<outline text="}" created="Fri, 12 Nov 2021 15:53:39 GMT"/>
														</outline>
													<outline text="}" created="Mon, 25 Oct 2021 15:16:52 GMT"/>
													</outline>
												<outline text="}" created="Tue, 26 Oct 2021 21:56:00 GMT"/>
												</outline>
											<outline text="});" created="Mon, 25 Oct 2021 15:18:24 GMT"/>
											</outline>
										<outline text="}" created="Sat, 03 Jul 2021 19:34:39 GMT"/>
										</outline>
									<outline text="}" created="Tue, 26 Oct 2021 21:56:52 GMT"/>
									</outline>
								<outline text="}" created="Mon, 25 Oct 2021 15:15:29 GMT"/>
								</outline>
							<outline text="visitSubs (theNode);" created="Mon, 25 Oct 2021 15:15:19 GMT"/>
							<outline text="}" created="Mon, 25 Oct 2021 15:15:14 GMT"/>
							</outline>
						<outline text="visitStories (theOutline.body, function (theStory) {" created="Sat, 03 Jul 2021 19:33:26 GMT">
							<outline text="var dateInfo = getBlogDateInfo (theStory.created, theOutline.head.timeZoneOffset);" created="Mon, 25 Oct 2021 15:31:41 GMT"/>
							<outline text="var datestring = dateInfo.year + &quot;/&quot; + pad (dateInfo.month) + &quot;/&quot; + pad (dateInfo.day);" created="Mon, 25 Oct 2021 15:39:26 GMT"/>
							<outline text="if (theStories [datestring] === undefined) {" created="Mon, 25 Oct 2021 15:39:37 GMT">
								<outline text="theStories [datestring] = new Array ();" created="Mon, 25 Oct 2021 15:40:05 GMT"/>
								<outline text="}" created="Mon, 25 Oct 2021 15:39:54 GMT"/>
								</outline>
							<outline text="theStories [datestring].push (theStory);" created="Mon, 25 Oct 2021 15:40:43 GMT"/>
							<outline text="console.log (datestring + &quot;: &quot; + theStory.text);" isComment="true" created="Mon, 25 Oct 2021 15:14:13 GMT"/>
							<outline text="});" created="Mon, 25 Oct 2021 15:13:59 GMT"/>
							</outline>
						<outline text="" created="Tue, 26 Oct 2021 22:22:53 GMT"/>
						<outline text="//convert it to an array" created="Tue, 26 Oct 2021 22:22:54 GMT">
							<outline text="var daysArray = new Array ();" created="Tue, 26 Oct 2021 22:23:59 GMT"/>
							<outline text="function monthToString (theMonthNum) {" created="Fri, 08 Mar 2013 15:39:05 GMT" pgfnum="19955">
								<outline text="var names = [&quot;&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;];"/>
								<outline text="return (names [theMonthNum]);" created="Fri, 08 Mar 2013 15:40:54 GMT" pgfnum="19957"/>
								<outline text="}"/>
								</outline>
							<outline text="for (var x in theStories) {" created="Tue, 26 Oct 2021 22:23:01 GMT">
								<outline text="let splits = x.split (&quot;/&quot;);" created="Wed, 13 Oct 2021 21:31:10 GMT"/>
								<outline text="daysArray.push ({" created="Tue, 26 Oct 2021 22:24:16 GMT">
									<outline text="created: new Date (x)," created="Tue, 26 Oct 2021 22:24:25 GMT"/>
									<outline text="created: getBlogLocalDate (x)," isComment="true" created="Tue, 26 Oct 2021 22:24:25 GMT"/>
									<outline text="flInCalendar: true," created="Tue, 26 Oct 2021 22:24:44 GMT"/>
									<outline text="name: splits [2]," created="Tue, 26 Oct 2021 22:24:51 GMT"/>
									<outline text="path: x, //something like 2021/07/31" created="Tue, 26 Oct 2021 22:26:12 GMT"/>
									<outline text="text: monthToString (Number (splits [1])) + &quot; &quot; + splits [2]," created="Tue, 26 Oct 2021 22:25:21 GMT"/>
									<outline text="type: &quot;calendarDay&quot;," created="Tue, 26 Oct 2021 22:25:29 GMT"/>
									<outline text="subs: theStories [x]" created="Tue, 26 Oct 2021 22:25:04 GMT"/>
									<outline text="});" created="Tue, 26 Oct 2021 22:24:20 GMT"/>
									</outline>
								<outline text="}" created="Tue, 26 Oct 2021 22:23:18 GMT"/>
								</outline>
							</outline>
						<outline text="return (daysArray);" created="Mon, 25 Oct 2021 15:41:45 GMT"/>
						<outline text="}" created="Mon, 25 Oct 2021 15:11:15 GMT"/>
						</outline>
					<outline text="" created="Tue, 26 Oct 2021 16:41:27 GMT"/>
					<outline text="function cmsDateFormat (when, pattern) { //10/13/21 by DW" created="Wed, 13 Oct 2021 20:45:51 GMT">
						<outline text="Changes" isComment="true" created="Wed, 13 Oct 2021 20:47:56 GMT">
							<outline text="10/16/21; 12:36:34 PM by DW" created="Sat, 16 Oct 2021 16:36:34 GMT">
								<outline text="If the timezone is negative, subtract the fraction of an hour instead of adding it." created="Sat, 16 Oct 2021 16:36:34 GMT"/>
								</outline>
							<outline text="10/13/21; 4:47:59 PM by DW" created="Wed, 13 Oct 2021 20:47:58 GMT">
								<outline text="blogConfig.timeZoneOffset is something like this:" created="Wed, 13 Oct 2021 20:47:59 GMT">
									<outline text="-8"/>
									<outline text="-8:00"/>
									<outline text="+5"/>
									<outline text="+5:30"/>
									</outline>
								<outline text="it's an offset of GMT" created="Wed, 13 Oct 2021 21:19:04 GMT"/>
								</outline>
							</outline>
						<outline text="return (dateFormat (when, pattern));" created="Wed, 13 Oct 2021 21:14:11 GMT"/>
						<outline text="" isComment="true" created="Wed, 27 Oct 2021 13:59:09 GMT"/>
						<outline text="" isComment="true" created="Wed, 27 Oct 2021 13:59:09 GMT"/>
						<outline text="try {" isComment="true" created="Thu, 13 Jun 2013 22:19:31 GMT" pgfnum="4655">
							<outline text="var newTime = getBlogTime (when);" created="Fri, 22 Oct 2021 14:30:10 GMT"/>
							<outline text="var formattedDate = dateFormat (newTime, pattern);" created="Thu, 14 Oct 2021 12:09:29 GMT"/>
							<outline text="console.log (&quot;cmsDateFormat: formattedDate == &quot; + formattedDate);" isComment="true" created="Thu, 14 Oct 2021 12:09:39 GMT"/>
							<outline text="return (formattedDate);" created="Wed, 13 Oct 2021 21:14:11 GMT"/>
							<outline text="}" created="Thu, 13 Jun 2013 22:19:58 GMT" pgfnum="4659"/>
							</outline>
						<outline text="catch (tryerror) {" isComment="true" created="Thu, 13 Jun 2013 22:19:41 GMT" pgfnum="4656">
							<outline text="return (dateFormat (when, pattern));" created="Wed, 13 Oct 2021 21:14:11 GMT"/>
							<outline text="}" created="Thu, 13 Jun 2013 22:19:51 GMT" pgfnum="4658"/>
							</outline>
						<outline text="}" created="Wed, 13 Oct 2021 20:46:06 GMT"/>
						</outline>
					<outline text="function cmsGetDatePath (theDate, flLastSeparator) { //10/22/21 by DW" created="Wed, 24 Jul 2013 15:22:40 GMT" pgfnum="28194">
						<outline text="if (theDate === undefined) {" created="Wed, 24 Jul 2013 15:23:15 GMT" pgfnum="28196">
							<outline text="theDate = new Date ();" created="Wed, 24 Jul 2013 15:23:26 GMT" pgfnum="28197"/>
							<outline text="}" created="Wed, 24 Jul 2013 15:23:28 GMT" pgfnum="28198"/>
							</outline>
						<outline text="else {">
							<outline text="theDate = new Date (theDate); //8/12/14 by DW -- make sure it's a date type" created="Wed, 24 Jul 2013 15:23:26 GMT" pgfnum="28197"/>
							<outline text="}"/>
							</outline>
						<outline text="if (flLastSeparator === undefined) {" created="Wed, 24 Jul 2013 15:23:15 GMT" pgfnum="28196">
							<outline text="flLastSeparator = true;" created="Wed, 24 Jul 2013 15:23:26 GMT" pgfnum="28197"/>
							<outline text="}" created="Wed, 24 Jul 2013 15:23:28 GMT" pgfnum="28198"/>
							</outline>
						<outline text="var blogDate = new Date (getBlogTime (theDate));" created="Fri, 22 Oct 2021 14:30:10 GMT"/>
						<outline text="var month = utils.padWithZeros (blogDate.getMonth () + 1, 2);" created="Fri, 15 Jun 2007 22:48:17 GMT"/>
						<outline text="var day = utils.padWithZeros (blogDate.getDate (), 2);" created="Fri, 15 Jun 2007 22:48:17 GMT"/>
						<outline text="var year = blogDate.getFullYear ();" created="Wed, 24 Jul 2013 15:27:43 GMT" pgfnum="28199"/>
						<outline text="" created="Wed, 24 Jul 2013 15:28:02 GMT" pgfnum="28200"/>
						<outline text="if (flLastSeparator) {">
							<outline text="return (year + &quot;/&quot; + month + &quot;/&quot; + day + &quot;/&quot;);" created="Fri, 15 Jun 2007 22:46:16 GMT"/>
							<outline text="}" created="Wed, 24 Jul 2013 15:29:47 GMT" pgfnum="28202"/>
							</outline>
						<outline text="else {">
							<outline text="return (year + &quot;/&quot; + month + &quot;/&quot; + day);" created="Fri, 15 Jun 2007 22:46:16 GMT"/>
							<outline text="}" created="Wed, 24 Jul 2013 15:29:58 GMT" pgfnum="28203"/>
							</outline>
						<outline text="}" created="Wed, 24 Jul 2013 15:23:09 GMT" pgfnum="28195"/>
						</outline>
					<outline text="" created="Fri, 22 Oct 2021 14:35:35 GMT"/>
					<outline text="function getPermalinkString (when) { //7/9/17 by DW">
						<outline text="Changes" isComment="true" created="Wed, 13 Oct 2021 20:43:52 GMT">
							<outline text="10/13/21; 4:43:55 PM by DW" created="Wed, 13 Oct 2021 20:43:54 GMT">
								<outline text="Moved local to publishBlog, so we can be part of the timezone club. " created="Wed, 13 Oct 2021 20:43:55 GMT"/>
								</outline>
							</outline>
						<outline text="var pattern = &quot;HHMMss&quot;, flUseDateFormat = false;"/>
						<outline text="if (new Date (when) &lt; new Date (&quot;Sun Jul 09 2017 17:53:55 GMT&quot;)) {">
							<outline text="pattern = &quot;hhmmss&quot;;"/>
							<outline text="flUseDateFormat = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (new Date (when) &lt; new Date (&quot;Mon, 13 Nov 2017 03:56:28 GMT&quot;)) {">
								<outline text="pattern = &quot;hhMMss&quot;;"/>
								<outline text="flUseDateFormat = true;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (flUseDateFormat) {">
							<outline text="return (&quot;a&quot; + cmsDateFormat (when, pattern));"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="function pad (num) {">
								<outline text="return (utils.padWithZeros (num, 2));"/>
								<outline text="}"/>
								</outline>
							<outline text="var d = new Date (when);"/>
							<outline text="return (&quot;a&quot; + pad (d.getUTCHours ()) + pad (d.getUTCMinutes ()) + pad (d.getUTCSeconds ()));"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function writeAndMirrorFile (localpath, s3relpath, s, type, callback) { //2/4/20 by DW">
						<outline text="Changes" isComment="true">
							<outline text="1/17/21; 12:58:21 PM by DW">
								<outline text="Add a callback. Params: ">
									<outline text="flWroteToPublicFile: indicates whether the file changed and was rewritten"/>
									<outline text="urlPublicFile: the url of the public file, if there is a public file, else undefined"/>
									</outline>
								<outline text="We need this in updating the OPML version of the day file, so we know whether to ping the tag server or not. "/>
								</outline>
							<outline text="2/4/20; 3:24:23 PM by DW">
								<outline text="I want to mirror everything we write locally to S3. "/>
								<outline text="We assume the path is a relative path like subfoldername/myfolder/blogname/pages + whatever."/>
								</outline>
							</outline>
						<outline text="function doCallback (flWroteToPublicFile, urlPublicFile) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (flWroteToPublicFile, urlPublicFile);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="utils.sureFilePath  (localpath, function () {">
							<outline text="fs.readFile (localpath, function (err, data) {">
								<outline text="var flwrite = true;"/>
								<outline text="if (!err) {">
									<outline text="if (data.toString () == s.toString ()) {">
										<outline text="flwrite = false;"/>
										<outline text="doCallback (flwrite);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flwrite) {">
									<outline text="fs.writeFile (localpath, s, function (err) {">
										<outline text="if (err) {">
											<outline text="debugMessage (&quot;writeAndMirrorFile: localpath == &quot; + localpath + &quot;, err.message == &quot; + err.message);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="if (blogConfig.flMirrorDataToS3) {">
										<outline text="var s3path = blogConfig.basePathMirror + s3relpath;"/>
										<outline text="console.log (&quot;writeAndMirrorFile: s3path == &quot; + s3path);" isComment="true"/>
										<outline text="s3.newObject (s3path, s, type, undefined, function (err, data) {">
											<outline text="if (err) {">
												<outline text="debugMessage (&quot;writeAndMirrorFile: s3path == &quot; + s3path + &quot;, err.message == &quot; + err.message);"/>
												<outline text="doCallback (false); "/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="doCallback (true, blogConfig.baseUrlMirror + s3relpath); //we wrote to a public file"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="doCallback (false); //we didn't write to a public file"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function savePublishedPage (relpath, pagetext) {">
						<outline text="var f = config.pagesFolder + blogName + &quot;/&quot; + relpath;"/>
						<outline text="writeAndMirrorFile (f, &quot;pages/&quot; + relpath, pagetext, &quot;text/html&quot;);"/>
						<outline text="mirrorFileToS3 (&quot;pages/&quot; + relpath, pagetext, &quot;text/html&quot;); //2/4/20 by DW" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function findPublishedPage (relpath, callback) {">
						<outline text="var f = config.pagesFolder + blogName + &quot;/&quot; + relpath;"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (data);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function saveItemToS3 (relpath, item, callback) { //7/12/17 by DW">
						<outline text="if (blogConfig.flUploadItemsToS3) {">
							<outline text="var path = blogConfig.basePathItems + relpath;"/>
							<outline text="debugMessage (&quot;saveItemToS3: path == &quot; + path);" isComment="true"/>
							<outline text="publishFile (path, utils.jsonStringify (item), &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="debugMessage (&quot;saveItemToS3: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getDayTitle (when) {">
						<outline text="return (cmsDateFormat (when, &quot;dddd, mmmm d, yyyy&quot;));"/>
						<outline text="}"/>
						</outline>
					<outline text="function saveItem (item) { //6/4/17 by DW">
						<outline text="Changes" isComment="true">
							<outline text="2/6/20; 12:11:02 PM by DW">
								<outline text="What's weird about items.">
									<outline text="From very early-on I was archiving items to S3 because they were part of the user interface of the xref feature. ">
										<outline text="http://scripting.com/2018/07/13/140009.html"/>
										</outline>
									<outline text="I changed the configuration in the scripting.com code, and moved the archive from">
										<outline text="/scripting.com/items/ to /scripting.com/data/items/"/>
										</outline>
									<outline text="So it could be alongside the other datat that we're mirroring on S3."/>
									<outline text="So now we can take out the special code, old code here. "/>
									</outline>
								</outline>
							<outline text="6/4/17; 8:48:27 AM by DW">
								<outline text="Save the item to a calendar-structured folder. The name of the file is a result of mashing together the hour-minute-second it was created. The should sort in chronologic order."/>
								</outline>
							</outline>
						<outline text="var relpath = utils.getDatePath (new Date (item.created), true) + getPermalinkString (item.created) + &quot;.json&quot;"/>
						<outline text="var relpath = utils.getDatePath (new Date (item.created), true) + cmsDateFormat (item.created, &quot;hhmmss&quot;) + &quot;.json&quot;" isComment="true"/>
						<outline text=""/>
						<outline text="var f = config.itemsFolder + blogName + &quot;/&quot; + relpath;"/>
						<outline text="writeAndMirrorFile (f, &quot;items/&quot; + relpath, utils.jsonStringify (item), &quot;application/json&quot;);"/>
						<outline text="saveItemToS3 (relpath, item); //7/12/17 by DW" isComment="true"/>
						<outline text="mirrorFileToS3 (&quot;items/&quot; + relpath, utils.jsonStringify (item), &quot;application/json&quot;); //2/4/20 by DW" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function saveDayInOpml (day) { //1/16/21 by DW">
						<outline text="function jsonCalendarToOpml (jstruct) { //1/16/21 by DW">
							<outline text="var opmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="function encode (s) {">
								<outline text="return (utils.encodeXml (s));"/>
								<outline text="}"/>
								</outline>
							<outline text="function add (s) {">
								<outline text="opmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="function addval (name, val) {">
								<outline text="add (&quot;&lt;&quot; + name + &quot;&gt;&quot; + encode (val) + &quot;&lt;/&quot; + name + &quot;&gt;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="function addlist (theList) {">
								<outline text="if (theList !== undefined) { //9/28/21 by DW -- this happens, let it not crash the server" created="Tue, 28 Sep 2021 22:23:29 GMT">
									<outline text="theList.forEach (function (item) {">
										<outline text="var attstring = &quot;&quot;;"/>
										<outline text="for (var x in item) {">
											<outline text="if ((x != &quot;flInCalendar&quot;) &amp;&amp; (x != &quot;subs&quot;)) {">
												<outline text="attstring += x + &quot;=\&quot;&quot; + encode (item [x]) + &quot;\&quot; &quot;;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="if (item.subs === undefined) {">
											<outline text="add (&quot;&lt;outline &quot; + attstring + &quot;/&gt;&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="add (&quot;&lt;outline &quot; + attstring + &quot;&gt;&quot;); indentlevel++;"/>
											<outline text="addlist (item.subs);"/>
											<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}" created="Tue, 28 Sep 2021 22:23:37 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"/>
							<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text=""/>
							<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"/>
							<outline text="addval (&quot;title&quot;, blogConfig.title);"/>
							<outline text="addval (&quot;description&quot;, blogConfig.description);"/>
							<outline text="addval (&quot;dateCreated&quot;, jstruct.created);"/>
							<outline text="addval (&quot;dateModified&quot;, jstruct.created);"/>
							<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"/>
							<outline text=""/>
							<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;outline text=\&quot;&quot; + blogConfig.title + &quot;: &quot; + getDayTitle (day.created) + &quot;\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="addlist (jstruct.subs);"/>
							<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
							<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"/>
							<outline text=""/>
							<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"/>
							<outline text="return (opmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="var relpath = utils.getDatePath (new Date (day.created), false) + &quot;.opml&quot;"/>
						<outline text="var f = config.daysFolder + blogName + &quot;/&quot; + relpath;"/>
						<outline text="var opmltext = jsonCalendarToOpml (day);"/>
						<outline text="writeAndMirrorFile (f, &quot;days/&quot; + relpath, opmltext, &quot;text/xml&quot;, function (flWroteToPublicFile, urlOpmlFile) {">
							<outline text="if (flWroteToPublicFile) {">
								<outline text="console.log (&quot;saveDayInOpml: flWroteToPublicFile == &quot; + flWroteToPublicFile + &quot;, urlOpmlFile == &quot; + urlOpmlFile);" isComment="true"/>
								<outline text="pingTagServer (urlOpmlFile); //1/17/21 by DW"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function saveDay (day) { //6/10/17 by DW">
						<outline text="var relpath = utils.getDatePath (new Date (day.created), false) + &quot;.json&quot;"/>
						<outline text="var f = config.daysFolder + blogName + &quot;/&quot; + relpath;"/>
						<outline text="var jsontext = utils.jsonStringify (day);"/>
						<outline text="writeAndMirrorFile (f, &quot;days/&quot; + relpath, jsontext, &quot;application/json&quot;);"/>
						<outline text="mirrorFileToS3 (&quot;days/&quot; + relpath, jsontext, &quot;application/json&quot;); //2/4/20 by DW" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function glossaryProcess (s) {">
						<outline text="return (utils.multipleReplaceAll (s, blogConfig.glossary));"/>
						<outline text="}"/>
						</outline>
					<outline text="function pingTagServer (urlOpmlFile, callback) { //1/13/21 by DW">
						<outline text="if (blogConfig.urlTagServerPing !== undefined) {">
							<outline text="var url = utils.replaceAll (blogConfig.urlTagServerPing, &quot;[%url%]&quot;, encodeURIComponent (urlOpmlFile));"/>
							<outline text="httpReadUrl (url, function (s) {">
								<outline text="debugMessage (&quot;pingTagServer: url == &quot; + url + &quot;, s == &quot; + s);" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function tagProcess (s) { //1/13/21; 11:08:44 AM by DW">
						<outline text="Changes" isComment="true">
							<outline text="7/17/21; 11:49:56 AM by DW" created="Sat, 17 Jul 2021 15:49:56 GMT">
								<outline text="Embed the text for each tag in an spTagRef span." created="Sat, 17 Jul 2021 15:49:57 GMT"/>
								</outline>
							<outline text="1/13/21; 11:08:52 AM by DW">
								<outline text="For now strip out the tags in the rendered text. In the future, we'll link them up to a page where you can see all other items with the same tag."/>
								</outline>
							</outline>
						<outline text="const options = {">
							<outline text="startChars: &quot;[&quot; + &quot;[&quot;,"/>
							<outline text="endChars: &quot;]]&quot;,"/>
							<outline text="}"/>
							</outline>
						<outline text="var i = 0;" created="Wed, 27 Nov 2013 01:40:22 GMT" pgfnum="32356"/>
						<outline text="while (i &lt; (s.length - 1)) {" created="Wed, 27 Nov 2013 01:40:27 GMT" pgfnum="32360">
							<outline text="if (s [i] == options.startChars [0]) {" created="Wed, 27 Nov 2013 01:40:40 GMT" pgfnum="32362">
								<outline text="if (s [i+1] == options.startChars [1]) {" created="Wed, 27 Nov 2013 01:42:10 GMT" pgfnum="32367">
									<outline text="var j, flfound = false;" created="Wed, 27 Nov 2013 01:42:48 GMT" pgfnum="32371"/>
									<outline text="for (var j = i + 2; j &lt;= s.length - 2; j++) {" created="Wed, 27 Nov 2013 01:42:58 GMT" pgfnum="32372">
										<outline text="if ((s [j] == options.endChars [0]) &amp;&amp; (s [j+1] == options.endChars [1])) {" created="Wed, 27 Nov 2013 01:43:36 GMT" pgfnum="32374">
											<outline text="var macrotext = utils.stringMid (s, i + 3, j - i - 2);" created="Wed, 27 Nov 2013 01:44:17 GMT" pgfnum="32376"/>
											<outline text="console.log (&quot;tagProcess: macrotext == &quot; + macrotext); " isComment="true"/>
											<outline text="macrotext = evalMacro (macrotext);" isComment="true"/>
											<outline text="macrotext = &quot;&quot;; //replace with nothing, for now -- 1/13/21 by DW" isComment="true"/>
											<outline text="s = utils.stringDelete (s, i + 1, j - i + 2);"/>
											<outline text="" created="Sat, 17 Jul 2021 15:48:38 GMT"/>
											<outline text="macrotext = &quot;&lt;span class=\&quot;spTagref\&quot;&gt;&quot;  + macrotext + &quot;&lt;/span&gt;&quot;; //7/17/21 by DW" created="Sat, 17 Jul 2021 15:48:38 GMT"/>
											<outline text="" created="Sat, 17 Jul 2021 15:48:38 GMT"/>
											<outline text="s = utils.stringInsert (macrotext, s, i);"/>
											<outline text="i += macrotext.length;"/>
											<outline text="flfound = true;"/>
											<outline text="break;"/>
											<outline text="}" created="Wed, 27 Nov 2013 01:43:45 GMT" pgfnum="32375"/>
											</outline>
										<outline text="}" created="Wed, 27 Nov 2013 01:43:27 GMT" pgfnum="32373"/>
										</outline>
									<outline text="if (!flfound) {">
										<outline text="break;"/>
										<outline text="}" created="Wed, 27 Nov 2013 02:06:35 GMT" pgfnum="32392"/>
										</outline>
									<outline text="}" created="Wed, 27 Nov 2013 01:42:13 GMT" pgfnum="32368"/>
									</outline>
								<outline text="else {" created="Wed, 27 Nov 2013 01:42:29 GMT" pgfnum="32369">
									<outline text="i += 2;"/>
									<outline text="}" created="Wed, 27 Nov 2013 01:42:31 GMT" pgfnum="32370"/>
									</outline>
								<outline text="}" created="Wed, 27 Nov 2013 01:41:15 GMT" pgfnum="32363"/>
								</outline>
							<outline text="else {" created="Wed, 27 Nov 2013 01:41:22 GMT" pgfnum="32364">
								<outline text="i++;" created="Wed, 27 Nov 2013 01:41:24 GMT" pgfnum="32365"/>
								<outline text="}" created="Wed, 27 Nov 2013 01:41:26 GMT" pgfnum="32366"/>
								</outline>
							<outline text="}" created="Wed, 27 Nov 2013 01:40:34 GMT" pgfnum="32361"/>
							</outline>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getImageHtml (item) { //11/12/21 by DW" created="Fri, 12 Nov 2021 20:01:07 GMT">
						<outline text="var imgHtml = &quot;&quot;;"/>
						<outline text="if (item.image !== undefined) {">
							<outline text="imgHtml = &quot;&lt;img class=\&quot;imgRightMargin\&quot; src=\&quot;&quot; + item.image + &quot;\&quot; border=\&quot;0\&quot; style=\&quot;float: right; padding-left: 25px; padding-bottom: 10px; padding-top: 10px; padding-right: 15px;\&quot;&gt;&quot;;"/>
							<outline text="if (item.imageLink !== undefined) { //5/26/20 by DW">
								<outline text="imgHtml = &quot;&lt;a class=\&quot;anchorRightMargin\&quot; href=\&quot;&quot; + item.imageLink + &quot;\&quot;&gt;&quot; + imgHtml + &quot;&lt;/a&gt;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (imgHtml);" created="Fri, 12 Nov 2021 20:01:45 GMT"/>
						<outline text="}" created="Fri, 12 Nov 2021 20:01:18 GMT"/>
						</outline>
					<outline text="function processText (s) { //9/2/20 by DW -- all text processing code in one call">
						<outline text="const macroOptions = {">
							<outline text="startChars: &quot;[%&quot;,"/>
							<outline text="endChars: &quot;%]&quot;,"/>
							<outline text="delimiter: &quot;:&quot;,"/>
							<outline text="handlers: {">
								<outline text="search: function (macrotext) {">
									<outline text="var url, link;"/>
									<outline text="macrotext = utils.trimWhitespace (macrotext);"/>
									<outline text="url = &quot;https://duckduckgo.com/?q=site%3Ascripting.com+%22&quot; + macrotext + &quot;%22&amp;t=h_&amp;ia=web&quot;;"/>
									<outline text="link = &quot;&lt;a href=\&quot;&quot; + url + &quot;\&quot;&gt;&quot; + macrotext + &quot;&lt;/a&gt;&quot;;"/>
									<outline text="return (link);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="s = glossaryProcess (s);"/>
						<outline text="s = emojiProcess (s);"/>
						<outline text="s = macroprocess (s, macroOptions);"/>
						<outline text="s = tagProcess (s);"/>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addInlineImageTo (s, urlImage) { //1/13/20 by DW">
						<outline text="return (&quot;&lt;center&gt;&lt;img class=\&quot;imgInline\&quot; src=\&quot;&quot; + urlImage + &quot;\&quot;&gt;&lt;/center&gt;&quot; + s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addInlineVideoTo (s, urlVideo) { //10/11/20 by DW">
						<outline text="function fixYoutubeUrl (url) { //cribbed from oldSchoolTemplate">
							<outline text="Changes" isComment="true">
								<outline text="3/18/18; 2:29:29 PM by DW">
									<outline text="Accept a URL in either of these forms and return a URL in the second form.">
										<outline text="https://www.youtube.com/watch?v=YedqV4Gl_us"/>
										<outline text="https://www.youtube.com/embed/YedqV4Gl_us"/>
										</outline>
									</outline>
								</outline>
							<outline text="const prefix = &quot;https://www.youtube.com/watch?v=&quot;;"/>
							<outline text="if (utils.beginsWith (url, prefix)) {">
								<outline text="url = &quot;https://www.youtube.com/embed/&quot; + utils.stringDelete (url, 1, prefix.length);"/>
								<outline text="}"/>
								</outline>
							<outline text="return (url);"/>
							<outline text="}"/>
							</outline>
						<outline text="var url = fixYoutubeUrl (urlVideo);"/>
						<outline text="var videotext = &quot;&lt;iframe width=\&quot;560\&quot; height=\&quot;315\&quot; src=\&quot;&quot; + url + &quot;\&quot; frameborder=\&quot;0\&quot; allow=\&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\&quot; allowfullscreen&gt;&lt;/iframe&gt;&quot;;"/>
						<outline text="return (&quot;&lt;center&gt;&quot; + videotext + &quot;&lt;/center&gt;&quot; + s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getRenderedText (item, flTextIsTitle, urlStoryPage, permalinkStyle=&quot;&quot;) {">
						<outline text="Changes" isComment="true">
							<outline text="6/28/23; 8:10:19 AM by DW" created="Wed, 28 Jun 2023 12:10:18 GMT">
								<outline text="New optional param permalinkStyle. Allow caller to add style to permalinks, so they look okay in environments where it's hard for the user to control styles. " created="Wed, 28 Jun 2023 12:22:43 GMT"/>
								</outline>
							<outline text="11/7/22; 7:00:55 PM by DW" created="Tue, 08 Nov 2022 00:00:54 GMT">
								<outline text="When generating the permalink, we can't add the title param to the end, because that changes the guid for the item, and it will appear again in the flow. " created="Tue, 08 Nov 2022 00:00:55 GMT"/>
								</outline>
							<outline text="11/10/20; 12:18:00 PM by DW">
								<outline text="Moved out of buildDay so it can be used in building standalone pages. "/>
								</outline>
							<outline text="10/11/20; 10:10:51 AM by DW">
								<outline text="Add support for inlineVideo."/>
								</outline>
							<outline text="5/26/20; 4:15:05 PM by DW">
								<outline text="Add support for imageLink attribute. Add an imgRightMargin class to the images. "/>
								</outline>
							<outline text="1/7/20; 11:43:27 AM by DW">
								<outline text="When generating urls, add on a parameter with the title of the post, help human beings figure it out."/>
								</outline>
							<outline text="1/3/20; 12:18:59 PM by DW">
								<outline text="If it's an inlineImage, include the text of the post within a div."/>
								</outline>
							<outline text="1/2/20; 3:38:56 PM by DW">
								<outline text="Add support for inlineImage attribute. It's the URL of an image that will be placed above the text of the headline. Use it when the image is part of the content, not off to the side. "/>
								</outline>
							<outline text="12/30/17; 11:23:31 AM by DW">
								<outline text="New optional param, urlStoryPage. "/>
								</outline>
							<outline text="7/9/17; 1:57:05 PM by DW">
								<outline text="http://scripting.com/2017/07/09.html"/>
								</outline>
							</outline>
						<outline text="var s = processText (item.text), flInlineImage = false;"/>
						<outline text="if (item.inlineImage !== undefined) { //1/2/20 by DW">
							<outline text="s = addInlineImageTo (s, item.inlineImage);"/>
							<outline text="flInlineImage = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (item.inlineVideo !== undefined) { //10/11/20 by DW">
								<outline text="s = addInlineVideoTo (s, item.inlineVideo);"/>
								<outline text="flInlineImage = true;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="switch (item.type) {">
							<outline text="case &quot;link&quot;:">
								<outline text="var parsedUrl = urlpack.parse (item.url, true), host = parsedUrl.host;" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
								<outline text="if (utils.beginsWith (host, &quot;www.&quot;)) {">
									<outline text="host = utils.stringDelete (host, 1, 4);"/>
									<outline text="}"/>
									</outline>
								<outline text="s += &quot;&lt;span class=\&quot;spLink\&quot;&gt;&lt;a href=\&quot;&quot; + item.url + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&lt;/span&gt;&quot;;"/>
								<outline text="&lt;i class=\&quot;fa fa-external-link\&quot;&gt;&lt;/i&gt;" isComment="true"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;markdown&quot;: //5/26/17 by DW">
								<outline text="s = &quot;&lt;span class=\&quot;spRenderedMarkdown\&quot;&gt;&quot; + markdownProcess (s) + &quot;&lt;/span&gt;&quot;;"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var ourLink = getPermalinkString (item.created); //7/9/17 by DW"/>
						<outline text=""/>
						<outline text="if (urlStoryPage !== undefined) { //12/30/17 by DW">
							<outline text="item.permalink = urlStoryPage + &quot;#&quot; + ourLink;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (item.subs !== undefined) { //12/29/17 by DW">
								<outline text="item.permalink = blogConfig.baseUrl + utils.getDatePath (new Date (item.created), true) + utils.stringDelete (ourLink, 1, 1) + &quot;.html&quot;;"/>
								<outline text="item.permalink += &quot;?title=&quot; + utils.innerCaseName (item.text); //1/7/20 by DW -- commented out 11/7/22 by DW" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="item.permalink = urlpage + &quot;#&quot; + ourLink;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var imgHtml = getImageHtml (item); //11/12/21 by DW"/>
						<outline text="if (item.image !== undefined) {" isComment="true">
							<outline text="imgHtml = &quot;&lt;img class=\&quot;imgRightMargin\&quot; src=\&quot;&quot; + item.image + &quot;\&quot; border=\&quot;0\&quot; style=\&quot;float: right; padding-left: 25px; padding-bottom: 10px; padding-top: 10px; padding-right: 15px;\&quot;&gt;&quot;;"/>
							<outline text="if (item.imageLink !== undefined) { //5/26/20 by DW">
								<outline text="imgHtml = &quot;&lt;a class=\&quot;anchorRightMargin\&quot; href=\&quot;&quot; + item.imageLink + &quot;\&quot;&gt;&quot; + imgHtml + &quot;&lt;/a&gt;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (flTextIsTitle) {">
							<outline text="s = &quot;&lt;a href=\&quot;&quot; + item.permalink + &quot;\&quot;&gt;&lt;span class=\&quot;spTitleLink\&quot;&gt;&quot; + s + &quot;&lt;/span&gt;&lt;/a&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="const title = &quot;Direct link to this item.&quot;;"/>
						<outline text="const permalink = &quot;&lt;span class=\&quot;spPermaLink\&quot;&gt;&lt;a href=\&quot;&quot; + item.permalink + &quot;\&quot; title=\&quot;&quot; + title + &quot;\&quot;&quot; + permalinkStyle + &quot;&gt;#&lt;/a&gt;&lt;/span&gt;&quot;;" created="Wed, 28 Jun 2023 11:57:44 GMT"/>
						<outline text="s = &quot;&lt;a name=\&quot;&quot; + ourLink + &quot;\&quot;&gt;&lt;/a&gt;&quot; + imgHtml + s + permalink;"/>
						<outline text=""/>
						<outline text="if (flInlineImage) { //1/3/20 by DW">
							<outline text="s = &quot;&lt;div class=\&quot;divInlineImage\&quot;&gt;&quot; + s + &quot;&lt;/div&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getRenderedText (item, flTextIsTitle, urlStoryPage, permalinkStyle=&quot;&quot;) {" isComment="true">
						<outline text="Changes" isComment="true">
							<outline text="6/28/23; 8:10:19 AM by DW" created="Wed, 28 Jun 2023 12:10:18 GMT">
								<outline text="New optional param permalinkStyle. Allow caller to add style to permalinks, so they look okay in environments where it's hard for the user to control styles. " created="Wed, 28 Jun 2023 12:22:43 GMT"/>
								</outline>
							<outline text="11/7/22; 7:00:55 PM by DW" created="Tue, 08 Nov 2022 00:00:54 GMT">
								<outline text="When generating the permalink, we can't add the title param to the end, because that changes the guid for the item, and it will appear again in the flow. " created="Tue, 08 Nov 2022 00:00:55 GMT"/>
								</outline>
							<outline text="11/10/20; 12:18:00 PM by DW">
								<outline text="Moved out of buildDay so it can be used in building standalone pages. "/>
								</outline>
							<outline text="10/11/20; 10:10:51 AM by DW">
								<outline text="Add support for inlineVideo."/>
								</outline>
							<outline text="5/26/20; 4:15:05 PM by DW">
								<outline text="Add support for imageLink attribute. Add an imgRightMargin class to the images. "/>
								</outline>
							<outline text="1/7/20; 11:43:27 AM by DW">
								<outline text="When generating urls, add on a parameter with the title of the post, help human beings figure it out."/>
								</outline>
							<outline text="1/3/20; 12:18:59 PM by DW">
								<outline text="If it's an inlineImage, include the text of the post within a div."/>
								</outline>
							<outline text="1/2/20; 3:38:56 PM by DW">
								<outline text="Add support for inlineImage attribute. It's the URL of an image that will be placed above the text of the headline. Use it when the image is part of the content, not off to the side. "/>
								</outline>
							<outline text="12/30/17; 11:23:31 AM by DW">
								<outline text="New optional param, urlStoryPage. "/>
								</outline>
							<outline text="7/9/17; 1:57:05 PM by DW">
								<outline text="http://scripting.com/2017/07/09.html"/>
								</outline>
							</outline>
						<outline text="var s = processText (item.text), flInlineImage = false;"/>
						<outline text="if (item.inlineImage !== undefined) { //1/2/20 by DW">
							<outline text="s = addInlineImageTo (s, item.inlineImage);"/>
							<outline text="flInlineImage = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (item.inlineVideo !== undefined) { //10/11/20 by DW">
								<outline text="s = addInlineVideoTo (s, item.inlineVideo);"/>
								<outline text="flInlineImage = true;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="switch (item.type) {">
							<outline text="case &quot;link&quot;:">
								<outline text="var parsedUrl = urlpack.parse (item.url, true), host = parsedUrl.host;" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
								<outline text="if (utils.beginsWith (host, &quot;www.&quot;)) {">
									<outline text="host = utils.stringDelete (host, 1, 4);"/>
									<outline text="}"/>
									</outline>
								<outline text="s += &quot;&lt;span class=\&quot;spLink\&quot;&gt;&lt;a href=\&quot;&quot; + item.url + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&lt;/span&gt;&quot;;"/>
								<outline text="&lt;i class=\&quot;fa fa-external-link\&quot;&gt;&lt;/i&gt;" isComment="true"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;markdown&quot;: //5/26/17 by DW">
								<outline text="s = &quot;&lt;span class=\&quot;spRenderedMarkdown\&quot;&gt;&quot; + markdownProcess (s) + &quot;&lt;/span&gt;&quot;;"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var ourLink = getPermalinkString (item.created); //7/9/17 by DW"/>
						<outline text=""/>
						<outline text="if (urlStoryPage !== undefined) { //12/30/17 by DW">
							<outline text="item.permalink = urlStoryPage + &quot;#&quot; + ourLink;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (item.subs !== undefined) { //12/29/17 by DW">
								<outline text="item.permalink = blogConfig.baseUrl + utils.getDatePath (new Date (item.created), true) + utils.stringDelete (ourLink, 1, 1) + &quot;.html&quot;;"/>
								<outline text="item.permalink += &quot;?title=&quot; + utils.innerCaseName (item.text); //1/7/20 by DW -- commented out 11/7/22 by DW" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="item.permalink = urlpage + &quot;#&quot; + ourLink;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var imgHtml = getImageHtml (item); //11/12/21 by DW"/>
						<outline text="if (item.image !== undefined) {" isComment="true">
							<outline text="imgHtml = &quot;&lt;img class=\&quot;imgRightMargin\&quot; src=\&quot;&quot; + item.image + &quot;\&quot; border=\&quot;0\&quot; style=\&quot;float: right; padding-left: 25px; padding-bottom: 10px; padding-top: 10px; padding-right: 15px;\&quot;&gt;&quot;;"/>
							<outline text="if (item.imageLink !== undefined) { //5/26/20 by DW">
								<outline text="imgHtml = &quot;&lt;a class=\&quot;anchorRightMargin\&quot; href=\&quot;&quot; + item.imageLink + &quot;\&quot;&gt;&quot; + imgHtml + &quot;&lt;/a&gt;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (flTextIsTitle) {">
							<outline text="s = &quot;&lt;a href=\&quot;&quot; + item.permalink + &quot;\&quot;&gt;&lt;span class=\&quot;spTitleLink\&quot;&gt;&quot; + s + &quot;&lt;/span&gt;&lt;/a&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="const title = &quot;Direct link to this item.&quot;;"/>
						<outline text="s = &quot;&lt;a name=\&quot;&quot; + ourLink + &quot;\&quot;&gt;&lt;/a&gt;&quot; + imgHtml + s + permalinkStyle;"/>
						<outline text=""/>
						<outline text="if (flInlineImage) { //1/3/20 by DW">
							<outline text="s = &quot;&lt;div class=\&quot;divInlineImage\&quot;&gt;&quot; + s + &quot;&lt;/div&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function formatTimeLine (when) { //2/11/18 by DW">
						<outline text="return (cmsDateFormat (when, &quot;dddd mmmm d, yyyy; h:MM TT Z&quot;));"/>
						<outline text="}"/>
						</outline>
					<outline text="function getDataAtts (item) { //7/12/17 by DW">
						<outline text="var atts = &quot;&quot;;"/>
						<outline text="for (var x in item) {">
							<outline text="switch (x) {">
								<outline text="case &quot;text&quot;: case &quot;created&quot;: case &quot;permalink&quot;: case &quot;subs&quot;: //5/16/18 by DW -- added subs">
									<outline text="break;"/>
									</outline>
								<outline text="default:">
									<outline text="atts += &quot; data-&quot; + x + &quot;=\&quot;&quot; + item [x] + &quot;\&quot;&quot;;"/>
									<outline text="break;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (atts);"/>
						<outline text="}"/>
						</outline>
					<outline text="" created="Sun, 21 Nov 2021 14:33:19 GMT"/>
					<outline text="function subsToMarkdown (parent) { //10/30/21 by DW" created="Sat, 30 Oct 2021 17:09:14 GMT">
						<outline text="Changes" isComment="true" created="Sat, 30 Oct 2021 17:18:38 GMT">
							<outline text="11/23/21; 9:45:04 AM by DW" created="Fri, 26 Nov 2021 14:45:03 GMT">
								<outline text="Implement flSinglespaceMarkdown attribute, otherwise we double-space. " created="Fri, 26 Nov 2021 14:45:04 GMT">
									<outline text="http://scripting.com/drummer/blog/2021/11/23/192342.html?title=nextIterationOnMarkdowninanoutline" created="Fri, 26 Nov 2021 14:46:48 GMT"/>
									</outline>
								</outline>
							<outline text="11/21/21; 9:35:21 AM by DW" created="Sun, 21 Nov 2021 14:35:21 GMT">
								<outline text="Enclose in divMarkdownText, because it's a div not a span." created="Sun, 21 Nov 2021 14:35:21 GMT"/>
								</outline>
							<outline text="11/19/21; 2:07:52 PM by DW" created="Fri, 19 Nov 2021 19:07:52 GMT">
								<outline text="No more indentation, and only output one newline per headline." created="Fri, 19 Nov 2021 19:07:52 GMT"/>
								</outline>
							<outline text="10/30/21; 1:04:46 PM by DW" isComment="true" created="Sat, 30 Oct 2021 17:04:45 GMT">
								<outline text="Use spaces to indent in markdown, not tabs. " created="Sat, 30 Oct 2021 17:04:46 GMT"/>
								</outline>
							</outline>
						<outline text="let markdowntext = &quot;&quot;, indentlevel = 0;"/>
						<outline text="function addlevel (theNode, flSinglespace=false) {" created="Fri, 29 Oct 2021 15:26:16 GMT">
							<outline text="var flAddExtraReturn = false;" created="Tue, 23 Nov 2021 18:57:00 GMT"/>
							<outline text="function add (s) {">
								<outline text="markdowntext += s + ((flSinglespace) ? &quot;\n&quot; : &quot;\n\n&quot;);"/>
								<outline text="" isComment="true" created="Tue, 23 Nov 2021 18:37:17 GMT"/>
								<outline text="markdowntext += utils.filledString (&quot;    &quot;, indentlevel) + s + &quot;\n\n&quot;;" isComment="true"/>
								<outline text="markdowntext += s + &quot;\n\n&quot;;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="if (theNode.flSinglespaceMarkdown !== undefined) {" created="Tue, 23 Nov 2021 18:38:32 GMT">
								<outline text="var newSingleVal = utils.getBoolean (theNode.flSinglespaceMarkdown);" created="Tue, 23 Nov 2021 18:38:55 GMT"/>
								<outline text="if (newSingleVal &amp;&amp; (!flSinglespace)) {" created="Tue, 23 Nov 2021 18:55:38 GMT">
									<outline text="flAddExtraReturn = true;" created="Tue, 23 Nov 2021 18:56:28 GMT"/>
									<outline text="}" created="Tue, 23 Nov 2021 18:55:54 GMT"/>
									</outline>
								<outline text="flSinglespace = newSingleVal;" created="Tue, 23 Nov 2021 18:56:46 GMT"/>
								<outline text="}" created="Tue, 23 Nov 2021 18:38:47 GMT"/>
								</outline>
							<outline text="if (theNode.subs !== undefined) {" created="Fri, 29 Oct 2021 15:27:11 GMT">
								<outline text="theNode.subs.forEach (function (sub) {" created="Fri, 29 Oct 2021 15:27:20 GMT">
									<outline text="add (sub.text);" created="Fri, 29 Oct 2021 15:27:50 GMT"/>
									<outline text="indentlevel++;" created="Fri, 29 Oct 2021 15:28:13 GMT"/>
									<outline text="addlevel (sub, flSinglespace);" created="Fri, 29 Oct 2021 15:28:08 GMT"/>
									<outline text="indentlevel--;" created="Fri, 29 Oct 2021 15:28:13 GMT"/>
									<outline text="});" created="Fri, 29 Oct 2021 15:27:31 GMT"/>
									</outline>
								<outline text="if (flAddExtraReturn) {" created="Tue, 23 Nov 2021 18:58:19 GMT">
									<outline text="markdowntext += &quot;\n&quot;;" created="Tue, 23 Nov 2021 18:58:28 GMT"/>
									<outline text="}" created="Tue, 23 Nov 2021 18:58:22 GMT"/>
									</outline>
								<outline text="}" created="Fri, 29 Oct 2021 15:27:19 GMT"/>
								</outline>
							<outline text="}" created="Fri, 29 Oct 2021 15:26:29 GMT"/>
							</outline>
						<outline text="addlevel (parent);" created="Fri, 29 Oct 2021 15:26:30 GMT"/>
						<outline text="markdowntext = processText (markdowntext); //convert glossary references, emoji shortcodes, etc" created="Sun, 21 Nov 2021 19:03:17 GMT"/>
						<outline text="var processedtext = markdownProcess (markdowntext, true); " created="Sat, 30 Oct 2021 17:14:34 GMT"/>
						<outline text="console.log (&quot;getItemSubs: markdowntext == &quot; + debugMarkdownText (markdowntext));" isComment="true" created="Sat, 30 Oct 2021 17:07:24 GMT"/>
						<outline text="console.log (&quot;getItemSubs: processedtext == &quot; + debugMarkdownText (processedtext));" isComment="true" created="Sat, 30 Oct 2021 17:07:24 GMT"/>
						<outline text="return (&quot;&lt;div class=\&quot;divMarkdownText\&quot;&gt;&quot; + processedtext + &quot;&lt;/div&gt;&quot;);"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:09:27 GMT"/>
						</outline>
					<outline text="" created="Sun, 21 Nov 2021 14:33:20 GMT"/>
					<outline text="" created="Wed, 28 Jun 2023 13:57:35 GMT"/>
					<outline text="function getItemSubs (parent, ulLevel, urlStoryPage, flLevelIsList=true) {">
						<outline text="Changes" isComment="true">
							<outline text="6/27/23; 11:37:31 AM by DW" created="Tue, 27 Jun 2023 15:37:31 GMT">
								<outline text="New optional param, flLevelIsList. If false we generate &lt;div&gt;s instead of &lt;ul&gt;s and &lt;p&gt;s instead of &lt;li&gt;s." created="Tue, 27 Jun 2023 15:37:32 GMT"/>
								<outline text="In places where we don't have easy control of CSS, it'll work better this way, for example WordPress sites." created="Tue, 27 Jun 2023 15:38:06 GMT"/>
								<outline text="It only applies to the top level. Any indentations are treated as lists." created="Tue, 27 Jun 2023 15:42:42 GMT"/>
								</outline>
							<outline text="10/29/21; 11:32:54 AM by DW" created="Fri, 29 Oct 2021 15:32:53 GMT">
								<outline text="If we encounter a node of type markdown, run the text through a markdown processor, and that's what we return." created="Fri, 29 Oct 2021 15:32:54 GMT"/>
								</outline>
							<outline text="5/15/18; 10:40:03 AM by DW">
								<outline text="Support collapse attribute."/>
								</outline>
							</outline>
						<outline text="if (getNodeType (parent) == &quot;markdown&quot;) {" created="Fri, 29 Oct 2021 15:24:11 GMT">
							<outline text="return (subsToMarkdown (parent));" created="Sat, 30 Oct 2021 17:09:47 GMT"/>
							<outline text="}" created="Fri, 29 Oct 2021 15:24:41 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 29 Oct 2021 15:24:42 GMT">
							<outline text="let htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="function add (s) {">
								<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="var ulAddedClass = &quot;&quot;, ulCollapsedClass = &quot;&quot;;" created="Fri, 29 Oct 2021 15:25:11 GMT"/>
							<outline text="if (utils.getBoolean (parent.flNumberedSubs)) { //6/15/17 by DW">
								<outline text="ulAddedClass = &quot; ulNumberedSubs&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (utils.getBoolean (parent.flBulletedSubs)) { //5/15/18 by DW">
									<outline text="ulAddedClass = &quot; ulBulletedSubs&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (utils.getBoolean (parent.flCodeSubs)) { //4/24/20 by DW">
										<outline text="ulAddedClass = &quot; ulCodeSubs&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (utils.getBoolean (parent.collapse)) { //5/15/18 by DW">
								<outline text="ulCollapsedClass = &quot; ulCollapsed&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="" created="Tue, 27 Jun 2023 15:39:30 GMT"/>
							<outline text="const htmlElement = (flLevelIsList) ? &quot;ul&quot; : &quot;div&quot;; //6/27/23 by DW" created="Tue, 27 Jun 2023 15:39:30 GMT"/>
							<outline text="add (&quot;&lt;&quot; + htmlElement + &quot; class=\&quot;ulLevel&quot; + ulLevel + ulAddedClass + ulCollapsedClass + &quot;\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="for (var i = 0; i &lt; parent.subs.length; i++) {">
								<outline text="var item = parent.subs [i];"/>
								<outline text="if (notComment (item)) { //11/5/20 by DW">
									<outline text="const htmlElement = (flLevelIsList) ? &quot;li&quot; : &quot;p&quot;; //6/27/23 by DW" created="Tue, 27 Jun 2023 15:39:30 GMT"/>
									<outline text="add (&quot;&lt;&quot; + htmlElement + getDataAtts (item) + &quot;&gt;&quot; + getRenderedText (item, undefined, urlStoryPage, wpPermalinkStyle) + &quot;&lt;/&quot; + htmlElement + &quot;&gt;&quot;);"/>
									<outline text="if (item.subs !== undefined) {">
										<outline text="add (getItemSubs (item, ulLevel + 1, urlStoryPage));"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;/&quot; + htmlElement + &quot;&gt;&quot;); indentlevel--;"/>
							<outline text="return (htmltext);"/>
							<outline text="}" created="Fri, 29 Oct 2021 15:24:45 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Tue, 27 Jun 2023 13:51:07 GMT"/>
					<outline text="function sendItemToWordpress (item, urlStoryPage, callback) { //6/27/23 by DW" created="Tue, 27 Jun 2023 12:54:17 GMT">
						<outline text="Changes" isComment="true" created="Thu, 29 Jun 2023 13:26:15 GMT">
							<outline text="6/29/23; 9:26:19 AM by DW" created="Thu, 29 Jun 2023 13:26:18 GMT">
								<outline text="New param, urlStoryPage. " created="Thu, 29 Jun 2023 13:26:19 GMT"/>
								</outline>
							</outline>
						<outline text="if (blogConfig.wordpress !== undefined) {" created="Tue, 27 Jun 2023 13:06:58 GMT">
							<outline text="const theWordpress = blogConfig.wordpress;" created="Tue, 27 Jun 2023 13:07:51 GMT"/>
							<outline text="if (utils.getBoolean (theWordpress.enabled)) {" created="Tue, 27 Jun 2023 13:07:25 GMT">
								<outline text="var thePost = {" created="Wed, 28 Jun 2023 13:45:34 GMT">
									<outline text="title: &quot;&quot;," created="Wed, 28 Jun 2023 13:47:53 GMT"/>
									<outline text="content: &quot;&quot;," created="Wed, 28 Jun 2023 13:47:56 GMT"/>
									<outline text="status: &quot;publish&quot; //omit this to create a draft that isn't published" created="Sun, 23 Apr 2023 15:23:39 GMT"/>
									<outline text="};" created="Wed, 28 Jun 2023 13:46:10 GMT"/>
									</outline>
								<outline text="" created="Wed, 28 Jun 2023 13:45:42 GMT"/>
								<outline text="console.log (&quot;sendPostToWordpress: item.text == &quot; + item.text);" created="Tue, 27 Jun 2023 12:55:44 GMT"/>
								<outline text="" created="Wed, 28 Jun 2023 11:52:16 GMT"/>
								<outline text="if (item.subs === undefined) {" created="Wed, 28 Jun 2023 13:44:39 GMT">
									<outline text="thePost.content = getRenderedText (item, false, urlStoryPage, wpPermalinkStyle);" created="Wed, 28 Jun 2023 13:46:34 GMT"/>
									<outline text="}" created="Wed, 28 Jun 2023 13:44:42 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 28 Jun 2023 13:44:42 GMT">
									<outline text="thePost.title = item.text;" created="Wed, 28 Jun 2023 13:46:48 GMT"/>
									<outline text="thePost.content = getItemSubs (item, 0, urlStoryPage, false);" created="Tue, 27 Jun 2023 13:49:36 GMT"/>
									<outline text="}" created="Wed, 28 Jun 2023 13:44:44 GMT"/>
									</outline>
								<outline text="const client = wordpress.createClient ({">
									<outline text="url: theWordpress.siteurl,"/>
									<outline text="username: theWordpress.username,"/>
									<outline text="password: theWordpress.password"/>
									<outline text="});"/>
									</outline>
								<outline text="const ix = new Date (item.created).getTime ();" created="Tue, 27 Jun 2023 14:15:40 GMT"/>
								<outline text="" created="Tue, 27 Jun 2023 15:20:24 GMT"/>
								<outline text="if (blogData.wordpress.ids [ix] === undefined) {" created="Tue, 27 Jun 2023 15:20:24 GMT">
									<outline text="client.newPost (thePost, function (err, idNewPost) {" created="Sun, 23 Apr 2023 15:08:51 GMT">
										<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
											<outline text="if (callback !== undefined) {" created="Tue, 27 Jun 2023 13:19:24 GMT">
												<outline text="callback (err);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
												<outline text="}" created="Tue, 27 Jun 2023 13:19:33 GMT"/>
												</outline>
											<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
											<outline text="console.log (&quot;sendPostToWordpress: idNewPost == &quot; + idNewPost);" created="Tue, 27 Jun 2023 12:55:44 GMT"/>
											<outline text="" created="Tue, 27 Jun 2023 14:12:11 GMT"/>
											<outline text="blogData.wordpress.ids [ix] = idNewPost;" created="Tue, 27 Jun 2023 14:12:11 GMT"/>
											<outline text="blogData.wordpress.flChanged = true;" created="Tue, 27 Jun 2023 14:13:10 GMT"/>
											<outline text="" created="Tue, 27 Jun 2023 14:12:13 GMT"/>
											<outline text="if (callback !== undefined) {" created="Tue, 27 Jun 2023 13:19:24 GMT">
												<outline text="callback (undefined, idNewPost);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
												<outline text="}" created="Tue, 27 Jun 2023 13:19:33 GMT"/>
												</outline>
											<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
											</outline>
										<outline text="});" created="Sun, 23 Apr 2023 15:10:01 GMT"/>
										</outline>
									<outline text="}" created="Tue, 27 Jun 2023 15:20:52 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 27 Jun 2023 15:20:53 GMT">
									<outline text="const idPostToUpdate = blogData.wordpress.ids [ix];" created="Tue, 27 Jun 2023 15:21:41 GMT"/>
									<outline text="client.editPost (idPostToUpdate, thePost, function (err) {" created="Sun, 23 Apr 2023 15:08:51 GMT">
										<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
											<outline text="if (callback !== undefined) {" created="Tue, 27 Jun 2023 15:22:17 GMT">
												<outline text="callback (err);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
												<outline text="}" created="Tue, 27 Jun 2023 15:22:22 GMT"/>
												</outline>
											<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
											<outline text="if (callback !== undefined) {" created="Tue, 27 Jun 2023 15:22:17 GMT">
												<outline text="callback (undefined, true);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
												<outline text="}" created="Tue, 27 Jun 2023 15:22:22 GMT"/>
												</outline>
											<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
											</outline>
										<outline text="});" created="Sun, 23 Apr 2023 15:10:01 GMT"/>
										</outline>
									<outline text="}" created="Tue, 27 Jun 2023 15:20:54 GMT"/>
									</outline>
								<outline text="}" created="Tue, 27 Jun 2023 13:07:38 GMT"/>
								</outline>
							<outline text="}" created="Tue, 27 Jun 2023 13:07:22 GMT"/>
							</outline>
						<outline text="}" created="Tue, 27 Jun 2023 12:54:29 GMT"/>
						</outline>
					<outline text="" created="Tue, 27 Jun 2023 13:51:09 GMT"/>
					<outline text="function dayNotDeleted (whenDayCreated) { //8/30/21 by DW " created="Mon, 30 Aug 2021 14:11:15 GMT">
						<outline text="Changes" isComment="true" created="Mon, 30 Aug 2021 14:12:28 GMT">
							<outline text="10/22/21; 10:06:41 AM by DW" created="Fri, 22 Oct 2021 14:06:41 GMT">
								<outline text="Compare the dates in UTC, otherwise we're comparing dates in the server's time zone with dates in the user's time zone. " created="Fri, 22 Oct 2021 14:06:42 GMT"/>
								</outline>
							<outline text="8/30/21; 1:22:15 PM by DW" created="Mon, 30 Aug 2021 17:22:15 GMT">
								<outline text="The former approach didn't work -- too complicated for users who don't care, and until their outlines get too large they won't care." created="Mon, 30 Aug 2021 17:22:15 GMT"/>
								<outline text="So I introduced a new config setting -- blogConfig.flOldSchoolUseCache. For most people this will be false." created="Mon, 30 Aug 2021 17:22:45 GMT"/>
								<outline text="If it's true, we always return true. Basically saying to use the cache if you have something in the cache for that day." created="Mon, 30 Aug 2021 17:23:29 GMT"/>
								<outline text="If it's false, we check the daysArray to see if it's there and return true if it is there, false if it isn't." created="Mon, 30 Aug 2021 17:25:04 GMT"/>
								</outline>
							<outline text="8/30/21; 10:12:32 AM by DW" created="Mon, 30 Aug 2021 14:12:31 GMT">
								<outline text="A day has been deleted if the place where it would be in daysArray is before the last entry in daysArray." created="Mon, 30 Aug 2021 14:12:32 GMT"/>
								<outline text="This makes it possible for a blogger to keep the (for example) most recent month in the outline, but still have the home page show the most recent 25 days of posts. " created="Mon, 30 Aug 2021 14:13:10 GMT"/>
								</outline>
							</outline>
						<outline text="if (blogConfig.flOldSchoolUseCache) {" created="Mon, 30 Aug 2021 17:26:23 GMT">
							<outline text="return (true);" created="Mon, 30 Aug 2021 17:26:42 GMT"/>
							<outline text="}" created="Mon, 30 Aug 2021 17:26:25 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 30 Aug 2021 17:26:26 GMT">
							<outline text="for (var i = 0; i &lt; daysArray.length; i++) {" created="Mon, 30 Aug 2021 14:14:35 GMT">
								<outline text="var item = daysArray [i];" created="Mon, 30 Aug 2021 14:15:19 GMT"/>
								<outline text="if (item.created !== undefined) {" created="Mon, 30 Aug 2021 14:15:58 GMT">
									<outline text="if (sameDayUTC (item.created, whenDayCreated)) { //it's in the days array ==&gt; has not been deleted" created="Mon, 30 Aug 2021 14:16:26 GMT">
										<outline text="return (true);" created="Mon, 30 Aug 2021 14:16:40 GMT"/>
										<outline text="}" created="Mon, 30 Aug 2021 14:16:43 GMT"/>
										</outline>
									<outline text="}" created="Mon, 30 Aug 2021 14:36:11 GMT"/>
									</outline>
								<outline text="}" created="Mon, 30 Aug 2021 14:15:07 GMT"/>
								</outline>
							<outline text="return (false);" created="Mon, 30 Aug 2021 17:26:42 GMT"/>
							<outline text="}" created="Mon, 30 Aug 2021 17:26:28 GMT"/>
							</outline>
						<outline text="previous version -- see comment under changes" isComment="true" created="Mon, 30 Aug 2021 17:25:37 GMT">
							<outline text="for (var i = 0; i &lt; daysArray.length; i++) {" created="Mon, 30 Aug 2021 14:14:35 GMT">
								<outline text="var item = daysArray [i];" created="Mon, 30 Aug 2021 14:15:19 GMT"/>
								<outline text="if (item.created !== undefined) {" created="Mon, 30 Aug 2021 14:15:58 GMT">
									<outline text="if (utils.sameDay (item.created, whenDayCreated)) { //it's in the days array ==&gt; has not been deleted" created="Mon, 30 Aug 2021 14:16:26 GMT">
										<outline text="return (true);" created="Mon, 30 Aug 2021 14:16:40 GMT"/>
										<outline text="}" created="Mon, 30 Aug 2021 14:16:43 GMT"/>
										</outline>
									<outline text="}" created="Mon, 30 Aug 2021 14:36:11 GMT"/>
									</outline>
								<outline text="}" created="Mon, 30 Aug 2021 14:15:07 GMT"/>
								</outline>
							<outline text="var lastDay = daysArray [daysArray.length - 1];" created="Mon, 30 Aug 2021 14:17:00 GMT"/>
							<outline text="if (lastDay.created !== undefined) {" created="Mon, 30 Aug 2021 14:21:35 GMT">
								<outline text="return (dateGreater (lastDay.created, whenDayCreated));" created="Mon, 30 Aug 2021 14:21:52 GMT"/>
								<outline text="}" created="Mon, 30 Aug 2021 14:21:42 GMT"/>
								</outline>
							<outline text="return (true);" created="Mon, 30 Aug 2021 14:21:22 GMT"/>
							</outline>
						<outline text="}" created="Mon, 30 Aug 2021 14:11:25 GMT"/>
						</outline>
					<outline text="function publishThroughTemplate (relpath, pagetitle, metadata, htmltext, templatetext, addToConfig, callback) {">
						<outline text="Changes" isComment="true">
							<outline text="11/10/21; 10:13:22 AM by DW" created="Wed, 10 Nov 2021 15:13:21 GMT">
								<outline text="twitter:body was an experiment, as far as I know nothing is using it. And it's putting random garbage in pages. I don't have time to figure out what's going wrong, so I'm commenting out the feature. " created="Wed, 10 Nov 2021 15:13:23 GMT"/>
								</outline>
							<outline text="10/28/21; 11:14:51 AM by DW" created="Thu, 28 Oct 2021 15:14:51 GMT">
								<outline text="If pagetable.copyright is not defined, set it to the empty string." created="Thu, 28 Oct 2021 15:14:52 GMT"/>
								</outline>
							<outline text="10/18/21; 10:30:13 AM by DW" created="Mon, 18 Oct 2021 14:30:13 GMT">
								<outline text="If it's the home page and there is an about outline, include it in the pagetable, so the template can catch it" created="Mon, 18 Oct 2021 14:30:14 GMT"/>
								</outline>
							<outline text="8/23/21; 12:40:47 PM by DW" created="Mon, 23 Aug 2021 16:40:46 GMT">
								<outline text="New config setting, blogConfig.flAlwaysBuildHomePage -- if true -- we rebuild the home page and all pages prefixed with its date (the archive page, story pages). " created="Mon, 23 Aug 2021 16:40:47 GMT"/>
								<outline text="Without this, you'd have to make a change to the text to force it to rebuild. That was ok when I was the only user of old school, but now we're asking others to use it, this is not acceptable. These are guests, they deserve more consideration. ;-)" created="Mon, 23 Aug 2021 16:41:50 GMT"/>
								<outline text="The assumption is that the user wouldn't cause a rebuild if there wasn't anything to rebuild." created="Mon, 23 Aug 2021 16:43:45 GMT"/>
								<outline text="It defaults true. " created="Mon, 23 Aug 2021 16:43:13 GMT"/>
								</outline>
							<outline text="11/4/20; 11:55:11 AM by DW">
								<outline text="Add generator property to pagetable."/>
								</outline>
							<outline text="5/4/20; 12:59:38 PM by DW">
								<outline text="Add metadata to config in the rendered page. This allows us to use the metaImage if present in the rendering of the page, by the JavaScript code in the page."/>
								</outline>
							<outline text="12/22/19; 12:40:06 PM by DW">
								<outline text="Extending Twitter's metadata. In case there's a developer inside Twitter who thinks it would be cool if Twitter did something with the full text of a blog post, in addition to the title, description and image, I've added a new bit of metadata for Twitter with the encoded HTML body of the post, using something I made up -- twitter:body. It's also available, of course to developers of other environments. Sometimes it takes someone to go first, in case this is one of those times -- here goes. ;-)"/>
								</outline>
							<outline text="11/30/19; 9:45:35 AM by DW">
								<outline text="pagedescription becomes a metadata object that includes a description property, and others. "/>
								</outline>
							<outline text="1/6/18; 12:58:28 PM by DW">
								<outline text="New optional param, pagedescription. When building a story page, if the top item has a description attribute, we use that in the Twitter and Facebook metadata. Took a long time to debug because it only updates the page when the content changes, not when the description changes. Watch out for that! ;-)"/>
								</outline>
							<outline text="9/12/17; 12:11:56 PM by DW">
								<outline text="New optional param, addToConfig. Any elements in that struct are added to the config object in the generated page."/>
								</outline>
							<outline text="9/12/17; 11:00:50 AM by DW">
								<outline text="New optional param templatetext. If undefined, we use blogConfig.templatetext."/>
								</outline>
							</outline>
						<outline text="function getSocialMediaLinks () {">
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0, head = blogConfig.jstruct.head;" created="Fri, 08 Nov 2013 17:50:26 GMT" pgfnum="31260"/>
							<outline text="function add (s) {" created="Fri, 08 Nov 2013 17:50:40 GMT" pgfnum="31261">
								<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Fri, 08 Nov 2013 17:50:51 GMT" pgfnum="31263"/>
								<outline text="}" created="Fri, 08 Nov 2013 17:50:46 GMT" pgfnum="31262"/>
								</outline>
							<outline text="function haveString (name) {">
								<outline text="if (head [name] !== undefined) {">
									<outline text="if (head [name].length !== undefined) {">
										<outline text="return (true);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="return (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="function addlink (id, url, icon, color) {" created="Wed, 25 Dec 2013 00:22:07 GMT" pgfnum="34466">
								<outline text="add (&quot;&lt;a class=\&quot;aSocialMediaLink\&quot; id=\&quot;&quot; + id + &quot;\&quot; href=\&quot;&quot; + url + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&lt;i class=\&quot;fa fa-&quot; + icon + &quot;\&quot; style=\&quot;color: &quot; + color + &quot;; font-weight: bold;\&quot;&gt;&lt;/i&gt;&lt;/a&gt;&quot;);" created="Wed, 25 Dec 2013 00:19:27 GMT" pgfnum="34465"/>
								<outline text="}" created="Wed, 25 Dec 2013 00:22:25 GMT" pgfnum="34467"/>
								</outline>
							<outline text="add (&quot;&lt;div class=\&quot;divSocialMediaLinks\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="addlink (&quot;idTwitterLink&quot;, &quot;http://twitter.com/&quot; + head.ownerTwitterScreenName, &quot;twitter&quot;, &quot;#4099FF&quot;);" created="Wed, 25 Dec 2013 00:24:04 GMT" pgfnum="34468"/>
							<outline text="if (haveString (&quot;ownerFacebookAccount&quot;)) {" created="Mon, 17 Feb 2014 23:04:42 GMT" pgfnum="37793">
								<outline text="addlink (&quot;idFacebookLink&quot;, &quot;http://facebook.com/&quot; + head.ownerFacebookAccount, &quot;facebook&quot;, &quot;#4C66A4&quot;);" created="Wed, 25 Dec 2013 00:24:04 GMT" pgfnum="34468"/>
								<outline text="}" created="Mon, 17 Feb 2014 23:05:02 GMT" pgfnum="37796"/>
								</outline>
							<outline text="if (haveString (&quot;ownerGithubAccount&quot;)) { " created="Mon, 17 Feb 2014 23:04:42 GMT" pgfnum="37793">
								<outline text="addlink (&quot;idGithubLink&quot;, &quot;http://github.com/&quot; + head.ownerGithubAccount, &quot;github&quot;, &quot;black&quot;);" created="Wed, 25 Dec 2013 00:24:04 GMT" pgfnum="34468"/>
								<outline text="}" created="Mon, 17 Feb 2014 23:05:02 GMT" pgfnum="37796"/>
								</outline>
							<outline text="if (haveString (&quot;ownerLinkedinAccount&quot;)) { " created="Mon, 17 Feb 2014 23:04:42 GMT" pgfnum="37793">
								<outline text="addlink (&quot;idLinkedInLink&quot;, &quot;http://www.linkedin.com/in/&quot; + head.ownerLinkedinAccount, &quot;linkedin&quot;, &quot;#069&quot;);" created="Wed, 25 Dec 2013 00:24:04 GMT" pgfnum="34468"/>
								<outline text="}" created="Mon, 17 Feb 2014 23:05:02 GMT" pgfnum="37796"/>
								</outline>
							<outline text="addlink (&quot;idRssLink&quot;, blogConfig.baseUrl + config.rssFname, &quot;rss&quot;, &quot;orange&quot;);" created="Wed, 25 Dec 2013 00:24:04 GMT" pgfnum="34468"/>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="return (htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getConfigJson () { //don't copy socket and other big hairy system data">
							<outline text="var myConfig = new Object ();"/>
							<outline text="utils.copyScalars (blogConfig, myConfig);"/>
							<outline text="if (addToConfig !== undefined) { //9/12/17 by DW">
								<outline text="utils.copyScalars (addToConfig, myConfig);"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="delete myConfig.mySocket;"/>
							<outline text="delete myConfig.templatetext;"/>
							<outline text="delete myConfig.homePageTemplatetext; //9/12/17 by DW"/>
							<outline text=""/>
							<outline text="if (myConfig.lastSocketJsontext !== undefined) { //6/17/17 by DW">
								<outline text="delete myConfig.lastSocketJsontext;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="myConfig.urlCalendar = blogConfig.baseUrl + config.calendarFname;"/>
							<outline text="myConfig.now = new Date (); //9/28/17 by DW"/>
							<outline text="myConfig.metadata = metadata; //5/4/20 by DW"/>
							<outline text="myConfig.generator = myProductName + &quot; v&quot; + myVersion; //11/4/20 by DW -- write over any generator provided in blogConfig"/>
							<outline text=""/>
							<outline text="return (utils.jsonStringify (myConfig));"/>
							<outline text="}"/>
							</outline>
						<outline text="function getOpmlHeadInJson () {">
							<outline text="return (utils.jsonStringify (blogConfig.jstruct.head));"/>
							<outline text="}"/>
							</outline>
						<outline text="function getAboutOutlineInJson () { //10/18/21 by DW">
							<outline text="if ((blogConfig.aboutOutline !== undefined) &amp;&amp; (relpath == config.indexHtmlFname)) {" created="Mon, 18 Oct 2021 14:25:09 GMT">
								<outline text="return (utils.jsonStringify (blogConfig.aboutOutline));"/>
								<outline text="}" created="Mon, 18 Oct 2021 14:25:16 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 18 Oct 2021 14:25:17 GMT">
								<outline text="return (undefined);" created="Mon, 18 Oct 2021 14:25:48 GMT"/>
								<outline text="}" created="Mon, 18 Oct 2021 14:25:19 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function getRssLink () {">
							<outline text="return (&quot;&lt;link rel=\&quot;alternate\&quot; type=\&quot;application/rss+xml\&quot; href=\&quot;&quot; + blogConfig.baseUrl + config.rssFname + &quot;\&quot;&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getHeaderImage () {">
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="var titleLink = &quot;&lt;a href=\&quot;&quot; + blogConfig.baseUrl + &quot;\&quot;&gt;&quot; + utils.stringUpper (blogConfig.title) + &quot;&lt;/a&gt;&quot;;"/>
							<outline text="function add (s) {">
								<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;div class=\&quot;divPagetopImage\&quot; id=\&quot;idPagetopImage\&quot; style=\&quot;background-image: url(&quot; + blogConfig.urlHeaderImage + &quot;)\&quot;&gt;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divPagetopTextBackground\&quot;&gt;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divPagetopText\&quot; id=\&quot;idPageTopText\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;div class=\&quot;divPagetopTitle\&quot; id=\&quot;idMessageTitle\&quot;&gt;&quot; + titleLink + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divPagetopDescription\&quot; id=\&quot;idMessageDescription\&quot;&gt;&quot; + blogConfig.description + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="return (htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getTwitterMetadata (pagetitle) {">
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="function add (s) {">
								<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="function addImage (urlImage) {">
								<outline text="add (&quot;&lt;meta name=\&quot;twitter:image:src\&quot; content=\&quot;&quot; + urlImage + &quot;\&quot;&gt;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;!-- Twitter metadata --&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;meta name=\&quot;twitter:card\&quot; content=\&quot;summary_large_image\&quot;&gt;&quot;);"/>
							<outline text="add (&quot;&lt;meta name=\&quot;twitter:site\&quot; content=\&quot;@&quot; + blogConfig.twitterScreenName + &quot;\&quot;&gt;&quot;);"/>
							<outline text="add (&quot;&lt;meta name=\&quot;twitter:title\&quot; content=\&quot;&quot; + metadata.title + &quot;\&quot;&gt;&quot;);"/>
							<outline text="add (&quot;&lt;meta name=\&quot;twitter:description\&quot; content=\&quot;&quot; + metadata.description + &quot;\&quot;&gt;&quot;);"/>
							<outline text="if (metadata.image !== undefined) { //11/30/19 by DW">
								<outline text="addImage (metadata.image);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (metadata.body !== undefined) { //12/22/19 by DW -- disabled -- 11/10/21 by DW" isComment="true">
								<outline text="add (&quot;&lt;meta name=\&quot;twitter:body\&quot; content=\&quot;&quot; + Buffer.from (metadata.body, &quot;base64&quot;) + &quot;\&quot;&gt;&quot;);"/>
								<outline text="add (&quot;&lt;meta name=\&quot;twitter:body\&quot; content=\&quot;&quot; + new Buffer (metadata.body).toString (&quot;base64&quot;) + &quot;\&quot;&gt;&quot;);" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (blogConfig.flIncludeImageInMetadata) { //6/27/17 by DW">
									<outline text="addImage (blogConfig.urlHeaderImage);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getFacebookMetadata (pagetitle, relpath) {">
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="function add (s) {">
								<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="function addImage (urlImage) {">
								<outline text="add (&quot;&lt;meta property=\&quot;og:image\&quot; content=\&quot;&quot; + urlImage + &quot;\&quot; /&gt;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;!-- Facebook metadata --&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;meta property=\&quot;og:type\&quot; content=\&quot;website\&quot; /&gt;&quot;);"/>
							<outline text="add (&quot;&lt;meta property=\&quot;og:site_name\&quot; content=\&quot;&quot; + blogConfig.title + &quot;\&quot; /&gt;&quot;);"/>
							<outline text="add (&quot;&lt;meta property=\&quot;og:title\&quot; content=\&quot;&quot; + metadata.title + &quot;\&quot; /&gt;&quot;);"/>
							<outline text="add (&quot;&lt;meta property=\&quot;og:url\&quot; content=\&quot;&quot; + blogConfig.baseUrl + relpath + &quot;\&quot; /&gt;&quot;);"/>
							<outline text="add (&quot;&lt;meta property=\&quot;og:description\&quot; content=\&quot;&quot; + metadata.description + &quot;\&quot; /&gt;&quot;);"/>
							<outline text="if (metadata.image !== undefined) { //11/30/19 by DW">
								<outline text="addImage (metadata.image);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (blogConfig.flIncludeImageInMetadata) { //6/27/17 by DW">
									<outline text="addImage (blogConfig.urlHeaderImage);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (metadata === undefined) { //11/30/19 by DW">
							<outline text="metadata = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (metadata.title === undefined) { //11/30/19 by DW">
							<outline text="metadata.title = pagetitle;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (metadata.description === undefined) { //1/6/18 by DW">
							<outline text="metadata.description = blogConfig.description;"/>
							<outline text="}"/>
							</outline>
						<outline text="var pagetable = {">
							<outline text="pagetitle: pagetitle,"/>
							<outline text="bodytext: htmltext,"/>
							<outline text="pagetop: getHeaderImage (),"/>
							<outline text="twittermetadata: getTwitterMetadata (pagetitle),"/>
							<outline text="facebookmetadata: getFacebookMetadata (pagetitle, relpath),"/>
							<outline text="socialMediaLinks: getSocialMediaLinks (),"/>
							<outline text="rssLink: getRssLink (),"/>
							<outline text="now: cmsDateFormat (new Date (), &quot;dddd mmmm d, yyyy; h:MM TT Z&quot;),"/>
							<outline text="generator: myProductName + &quot; v&quot; + myVersion, //11/4/20 by DW"/>
							<outline text="configJson: getConfigJson (),"/>
							<outline text="opmlHead: getOpmlHeadInJson (),"/>
							<outline text="aboutOutline: getAboutOutlineInJson () //10/18/21 by DW" created="Mon, 18 Oct 2021 14:20:03 GMT"/>
							<outline text="};"/>
							</outline>
						<outline text="utils.copyScalars (blogConfig.jstruct.head, pagetable);"/>
						<outline text="" created="Thu, 28 Oct 2021 15:13:55 GMT"/>
						<outline text="if (pagetable.copyright === undefined) { //it's used in the default template" created="Thu, 28 Oct 2021 15:13:55 GMT">
							<outline text="pagetable.copyright = &quot;&quot;;" created="Thu, 28 Oct 2021 15:14:05 GMT"/>
							<outline text="}" created="Thu, 28 Oct 2021 15:14:11 GMT"/>
							</outline>
						<outline text="" created="Thu, 28 Oct 2021 15:13:56 GMT"/>
						<outline text="if (templatetext === undefined) { //9/12/17 by DW">
							<outline text="templatetext = blogConfig.templatetext; "/>
							<outline text="}"/>
							</outline>
						<outline text="var pagetext = utils.multipleReplaceAll (templatetext, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
						<outline text="findPublishedPage (relpath, function (savedtext) {">
							<outline text="function mustRebuildPage () { //8/23/21 by DW" created="Mon, 23 Aug 2021 15:56:49 GMT">
								<outline text="if (savedtext != pagetable.bodytext) {" created="Mon, 23 Aug 2021 15:57:14 GMT">
									<outline text="return (true);" created="Mon, 23 Aug 2021 15:57:20 GMT"/>
									<outline text="}" created="Mon, 23 Aug 2021 15:57:24 GMT"/>
									</outline>
								<outline text="if (blogConfig.flAlwaysBuildHomePage) {" created="Mon, 23 Aug 2021 15:57:33 GMT">
									<outline text="if (relpath == config.indexHtmlFname) {" created="Mon, 23 Aug 2021 15:58:03 GMT">
										<outline text="console.log (&quot;mustRebuildPage: returning true because it's the index file.&quot;);" isComment="true" created="Mon, 23 Aug 2021 16:09:42 GMT"/>
										<outline text="return (true);" created="Mon, 23 Aug 2021 15:57:20 GMT"/>
										<outline text="}" created="Mon, 23 Aug 2021 15:58:18 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 23 Aug 2021 16:33:20 GMT">
										<outline text="if (daysArray.length &gt; 0) {" created="Mon, 23 Aug 2021 16:32:51 GMT">
											<outline text="var homePathPrefix = utils.getDatePath (daysArray [0].created, false);"/>
											<outline text="if (utils.beginsWith (relpath, homePathPrefix)) {" created="Mon, 23 Aug 2021 16:31:48 GMT">
												<outline text="console.log (&quot;mustRebuildPage: returning true because &quot; + relpath + &quot; is one of today's pages.&quot;);" isComment="true" created="Mon, 23 Aug 2021 16:09:42 GMT"/>
												<outline text="return (true);" created="Mon, 23 Aug 2021 15:57:20 GMT"/>
												<outline text="}" created="Mon, 23 Aug 2021 15:58:18 GMT"/>
												</outline>
											<outline text="}" created="Mon, 23 Aug 2021 16:33:03 GMT"/>
											</outline>
										<outline text="}" created="Mon, 23 Aug 2021 16:33:22 GMT"/>
										</outline>
									<outline text="}" created="Mon, 23 Aug 2021 15:57:52 GMT"/>
									</outline>
								<outline text="return (false);" created="Mon, 23 Aug 2021 15:58:52 GMT"/>
								<outline text="}" created="Mon, 23 Aug 2021 15:57:00 GMT"/>
								</outline>
							<outline text="if (mustRebuildPage ()) { //8/23/21 by DW">
								<outline text="savePublishedPage (relpath, pagetable.bodytext);"/>
								<outline text="publishFile (blogConfig.basePath + relpath, pagetext, &quot;text/html&quot;, &quot;public-read&quot;, function (err, data) {">
									<outline text="if (err) {">
										<outline text="debugMessage (&quot;publishThroughTemplate: relpath == &quot; + relpath + &quot;, err.message == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="addToPagesPublished (relpath);" created="Wed, 27 Oct 2021 15:59:29 GMT"/>
										<outline text="debugMessage (&quot;published: &quot; + blogConfig.baseUrl + relpath);" isComment="true"/>
										<outline text="}"/>
										</outline>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="debugMessage (&quot;unchanged: &quot; + blogConfig.baseUrl + relpath);" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function publishDay (day, blogConfig, callback) {">
						<outline text="console.log (&quot;publishDay: day == &quot; + utils.jsonStringify (day)); " isComment="true"/>
						<outline text="if (isComment (day)) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="var daypath = day.path, relpath = daypath + &quot;.html&quot;, path = blogConfig.basePath + relpath;" created="Wed, 27 Oct 2021 13:41:47 GMT"/>
							<outline text="var urlpage = blogConfig.baseUrl + relpath;"/>
							<outline text="var daystring = getDayTitle (day.created); "/>
							<outline text="var pagetitle = blogConfig.title + &quot;: &quot; + daystring;"/>
							<outline text=""/>
							<outline text="function add (s) {">
								<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="function getItemSubsMarkdown (storystruct) { //12/22/19 by DW">
								<outline text="Changes" isComment="true">
									<outline text="10/13/19; 11:24:48 AM by DW">
										<outline text="Handle images."/>
										</outline>
									<outline text="10/12/19; 12:52:43 PM by DW">
										<outline text="We handle up to two levels. "/>
										</outline>
									</outline>
								<outline text="var markdowntext = &quot;&quot;, indentlevel = 0;"/>
								<outline text="function add (s) {">
									<outline text="markdowntext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="function getItemText (item) {">
									<outline text="var img = &quot;&quot;;"/>
									<outline text="if (item.image !== undefined) {">
										<outline text="img = &quot;&lt;img src=\&quot;&quot; + item.image + &quot;\&quot; border=\&quot;0\&quot; align=\&quot;right\&quot;&gt;&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="return (img + item.text);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (storystruct.subs === undefined) { //it's an untitled story">
									<outline text="add (getItemText (storystruct));"/>
									<outline text="console.log (markdowntext);"/>
									<outline text="}"/>
									</outline>
								<outline text="else { //it's a titled story">
									<outline text="add (&quot;# &quot; + storystruct.text);"/>
									<outline text="storystruct.subs.forEach (function (sub, ix) {">
										<outline text="if (sub.subs !== undefined) {">
											<outline text="var flNumberedSubs = utils.getBoolean (sub.flNumberedSubs);"/>
											<outline text="var flBulletedSubs = utils.getBoolean (sub.flBulletedSubs);"/>
											<outline text="add (getItemText (sub));"/>
											<outline text="sub.subs.forEach (function (listitem, ixitem) {">
												<outline text="if (flNumberedSubs) {">
													<outline text="add ((ixitem + 1) + &quot;. &quot; + getItemText (listitem));"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="add (&quot;* &quot; + getItemText (listitem));"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="add (&quot;&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="add (getItemText (sub));"/>
											<outline text="add (&quot;&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="return (markdowntext);"/>
								<outline text="}"/>
								</outline>
							<outline text="function buildStoryPage (item, itemsubtext, itemsubmarkdown, callback) { //12/28/17 by DW">
								<outline text="var daypath = utils.getDatePath (new Date (item.created), true);"/>
								<outline text="var relpath = daypath + utils.stringDelete (getPermalinkString (item.created), 1, 1) + &quot;.html&quot;;"/>
								<outline text="var pagetitle = blogConfig.title + &quot;: &quot; + item.text;"/>
								<outline text="var pagedescription = item.description;" isComment="true"/>
								<outline text="var metadata = {">
									<outline text="title: item.text,"/>
									<outline text="description: item.description,"/>
									<outline text="image: item.metaImage,"/>
									<outline text="body: itemsubmarkdown //12/22/19 by DW"/>
									<outline text="};"/>
									</outline>
								<outline text=""/>
								<outline text=""/>
								<outline text="console.log (&quot;buildStoryPage: item.description == &quot; + item.description);" isComment="true"/>
								<outline text="console.log (&quot;buildStoryPage: item == &quot; + utils.jsonStringify (item));" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="var titleline = &quot;&lt;div class=\&quot;divStoryPageTitle\&quot;&gt;&quot; + getRenderedText (item, true) + &quot;&lt;/div&gt;&quot;;"/>
								<outline text="var posttimeline = &quot;&lt;div class=\&quot;divStoryPagePostTime\&quot;&gt;&quot; + formatTimeLine (item.created) + &quot;&lt;/div&gt;&quot;;"/>
								<outline text="var htmltext = &quot;&lt;div class=\&quot;divTitledItem\&quot;&gt;&quot; + posttimeline + titleline + itemsubtext + &quot;&lt;/div&gt;&quot;;"/>
								<outline text=""/>
								<outline text="console.log (&quot;buildStoryPage: relpath == &quot; + relpath + &quot;, item == &quot; + utils.jsonStringify (item));" isComment="true"/>
								<outline text=""/>
								<outline text="publishThroughTemplate (relpath, pagetitle, metadata, htmltext, undefined, undefined, function () {">
									<outline text="debugMessage (&quot;buildStoryPage: callback from publishThroughTemplate.&quot;);" isComment="true"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="pingForStoryPage (); //10/14/19 by DW"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="addDayToCalendar (blogData, day.created, urlpage); //5/13/17 by DW"/>
							<outline text=""/>
							<outline text="add (&quot;&lt;div class=\&quot;divDayTitle\&quot;&gt;&lt;a href=\&quot;&quot; + urlpage + &quot;\&quot;&gt;&quot; + daystring + &quot;&lt;/a&gt;&lt;/div&gt;&quot;);"/>
							<outline text="if (day.subs !== undefined) { //11/5/20 by DW">
								<outline text="for (var i = 0; i &lt; day.subs.length; i++) { //loop over all top level subs">
									<outline text="var item = day.subs [i];"/>
									<outline text="saveItem (item); //6/4/17 by DW"/>
									<outline text="if (notComment (item)) { //11/5/20 by DW">
										<outline text="if (item.subs === undefined) {">
											<outline text="add (&quot;&lt;div class=\&quot;divSingularItem\&quot;&quot; + getDataAtts (item) + &quot;&gt;&quot; + getRenderedText (item, false, urlpage) + &quot;&lt;/div&gt;&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="const titletext = getRenderedText (item, true); //6/27/23 by DW" created="Tue, 27 Jun 2023 12:51:38 GMT"/>
											<outline text="const itemsubtext = getItemSubs (item, 0, item.permalink);"/>
											<outline text="const itemsubmarkdown = getItemSubsMarkdown (item, 0);"/>
											<outline text="" created="Tue, 27 Jun 2023 12:53:16 GMT"/>
											<outline text="add (&quot;&lt;div class=\&quot;divTitledItem\&quot;&gt;&quot;); indentlevel++;"/>
											<outline text="add (&quot;&lt;div class=\&quot;divTitle\&quot;&gt;&quot; + titletext + &quot;&lt;/div&gt;&quot;);"/>
											<outline text="add (itemsubtext);"/>
											<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
											<outline text=""/>
											<outline text="buildStoryPage (item, itemsubtext, itemsubmarkdown); //12/28/17 by DW"/>
											<outline text="}"/>
											</outline>
										<outline text="sendItemToWordpress (item, urlpage); //6/27/23 by DW" created="Tue, 27 Jun 2023 12:52:25 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="day.htmltext = htmltext; //so the home page and month archive can access it"/>
							<outline text=""/>
							<outline text="blogData.htmlArchive [daypath] = { //save the text in blogData.htmlArchive -- 6/10/17 by DW">
								<outline text="htmltext: htmltext"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="publishThroughTemplate (relpath, pagetitle, undefined, htmltext, undefined, undefined, function () {">
								<outline text="debugMessage (&quot;publishDay: callback from publishThroughTemplate.&quot;);" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function publishNextDay (ixday, callback) {">
						<outline text="if (ixday &lt; daysArray.length) {">
							<outline text="publishDay (daysArray [ixday], blogConfig, function () {">
								<outline text="publishNextDay (ixday + 1, callback);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Tue, 26 Oct 2021 16:20:23 GMT"/>
					<outline text="function publishHomePage (callback) { //10/26/21 by DW" created="Tue, 26 Oct 2021 16:20:23 GMT">
						<outline text="Changes" isComment="true" created="Wed, 27 Oct 2021 15:23:08 GMT">
							<outline text="10/27/21; 11:23:10 AM by DW" created="Wed, 27 Oct 2021 15:23:09 GMT">
								<outline text="New version of function to handle home pages of sites that might be in a time zone other than the one the server is running in." created="Wed, 27 Oct 2021 15:23:11 GMT"/>
								</outline>
							</outline>
						<outline text="var htmltext = &quot;&quot;, ctDaysOnHomePage = 0;" created="Tue, 26 Oct 2021 16:46:11 GMT"/>
						<outline text="var newestDayOnHomePage = undefined, oldestDayOnHomePage = undefined;" created="Tue, 26 Oct 2021 16:55:58 GMT"/>
						<outline text="var earliestDayInHtmlArchive = getEarliestDayInHtmlArchive ();" created="Wed, 29 Sep 2021 14:28:15 GMT"/>
						<outline text="function getEarliestDayInHtmlArchive () { //9/29/21 by DW" created="Wed, 29 Sep 2021 14:27:59 GMT">
							<outline text="var earliestday = new Date ();" created="Wed, 29 Sep 2021 14:29:18 GMT"/>
							<outline text="for (var x in blogData.htmlArchive) {" created="Wed, 29 Sep 2021 14:29:19 GMT">
								<outline text="var splits = x.split (&quot;/&quot;); //x is something like 2021/08/09"/>
								<outline text="if (splits.length == 3) {" created="Wed, 29 Sep 2021 14:29:44 GMT">
									<outline text="var thisday = new Date (x);" created="Wed, 29 Sep 2021 14:32:52 GMT"/>
									<outline text="if (thisday &lt; earliestday) {" created="Wed, 29 Sep 2021 14:33:16 GMT">
										<outline text="earliestday = thisday;" created="Wed, 29 Sep 2021 14:33:45 GMT"/>
										<outline text="}" created="Wed, 29 Sep 2021 14:33:35 GMT"/>
										</outline>
									<outline text="}" created="Wed, 29 Sep 2021 14:31:59 GMT"/>
									</outline>
								<outline text="}" created="Wed, 29 Sep 2021 14:29:25 GMT"/>
								</outline>
							<outline text="return (earliestday);" created="Wed, 29 Sep 2021 14:33:59 GMT"/>
							<outline text="}" created="Wed, 29 Sep 2021 14:28:09 GMT"/>
							</outline>
						<outline text="" created="Wed, 27 Oct 2021 14:55:04 GMT"/>
						<outline text="for (var i = 0; i &lt; daysArray.length; i++) {" created="Wed, 27 Oct 2021 14:55:04 GMT">
							<outline text="let day = daysArray [i], dayInArchive = blogData.htmlArchive [day.path];" created="Wed, 27 Oct 2021 15:01:25 GMT"/>
							<outline text="htmltext += &quot;&lt;div class=\&quot;divArchivePageDay\&quot;&gt;&quot; + dayInArchive.htmltext + &quot;&lt;/div&gt;\n&quot;;"/>
							<outline text="if (newestDayOnHomePage === undefined) {" created="Wed, 29 Sep 2021 14:35:11 GMT">
								<outline text="newestDayOnHomePage = day.created;"/>
								<outline text="}" created="Wed, 29 Sep 2021 14:35:20 GMT"/>
								</outline>
							<outline text="oldestDayOnHomePage = day.created;"/>
							<outline text="if (++ctDaysOnHomePage &gt; blogConfig.maxDaysOnHomePage) {" created="Wed, 29 Sep 2021 14:24:15 GMT">
								<outline text="break;" created="Wed, 29 Sep 2021 14:24:41 GMT"/>
								<outline text="}" created="Wed, 29 Sep 2021 14:24:43 GMT"/>
								</outline>
							<outline text="}" created="Wed, 27 Oct 2021 14:55:14 GMT"/>
							</outline>
						<outline text="" created="Wed, 27 Oct 2021 15:24:11 GMT"/>
						<outline text="if (ctDaysOnHomePage &lt; blogConfig.maxDaysOnHomePage) { //there's room for more stuff, check the htmlcache" created="Wed, 27 Oct 2021 15:25:35 GMT">
							<outline text="let theDay = (oldestDayOnHomePage === undefined) ? getBlogLocalDate () : utils.dateYesterday (oldestDayOnHomePage);" created="Fri, 29 Oct 2021 13:03:47 GMT"/>
							<outline text="let theDay = utils.dateYesterday (oldestDayOnHomePage);" isComment="true" created="Wed, 27 Oct 2021 15:25:56 GMT"/>
							<outline text="function pad (n) {" created="Wed, 27 Oct 2021 16:59:48 GMT">
								<outline text="return (utils.padWithZeros (n, 2));" created="Wed, 27 Oct 2021 16:59:52 GMT"/>
								<outline text="}" created="Wed, 27 Oct 2021 17:00:01 GMT"/>
								</outline>
							<outline text="while (true) {" created="Wed, 27 Oct 2021 15:25:55 GMT">
								<outline text="if (theDay &lt; earliestDayInHtmlArchive) {" created="Wed, 29 Sep 2021 14:26:49 GMT">
									<outline text="break;" created="Wed, 29 Sep 2021 14:27:16 GMT"/>
									<outline text="}" created="Wed, 29 Sep 2021 14:27:18 GMT"/>
									</outline>
								<outline text="let path = theDay.getFullYear () + &quot;/&quot; + pad (theDay.getMonth () + 1) + &quot;/&quot; + pad (theDay.getDate ());" created="Wed, 27 Oct 2021 15:31:27 GMT"/>
								<outline text="let dayInArchive = blogData.htmlArchive [path];" created="Wed, 27 Oct 2021 15:25:56 GMT"/>
								<outline text="if (dayInArchive !== undefined) {" created="Wed, 27 Oct 2021 15:33:23 GMT">
									<outline text="htmltext += &quot;&lt;div class=\&quot;divArchivePageDay\&quot;&gt;&quot; + dayInArchive.htmltext + &quot;&lt;/div&gt;\n&quot;;"/>
									<outline text="oldestDayOnHomePage = theDay;"/>
									<outline text="if (++ctDaysOnHomePage &gt; blogConfig.maxDaysOnHomePage) {" created="Wed, 29 Sep 2021 14:24:15 GMT">
										<outline text="break;" created="Wed, 29 Sep 2021 14:24:41 GMT"/>
										<outline text="}" created="Wed, 29 Sep 2021 14:24:43 GMT"/>
										</outline>
									<outline text="}" created="Wed, 27 Oct 2021 15:33:34 GMT"/>
									</outline>
								<outline text="theDay = utils.dateYesterday (theDay);"/>
								<outline text="}" created="Wed, 27 Oct 2021 15:33:47 GMT"/>
								</outline>
							<outline text="}" created="Wed, 27 Oct 2021 15:25:43 GMT"/>
							</outline>
						<outline text="" created="Wed, 27 Oct 2021 15:24:13 GMT"/>
						<outline text="var addToConfig = {">
							<outline text="flHomePage: true, //so JS code can tell that it should add the tabs"/>
							<outline text="newestDayOnHomePage, oldestDayOnHomePage //10/17/19 by DW"/>
							<outline text="};"/>
							</outline>
						<outline text="publishThroughTemplate (config.indexHtmlFname, blogConfig.title, undefined, htmltext, blogConfig.homePageTemplatetext, addToConfig, function () {">
							<outline text="var path = blogConfig.basePath + config.homeHtmlFname;"/>
							<outline text="publishFile (path, htmltext, &quot;text/html&quot;, &quot;public-read&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="debugMessage (&quot;publishHomePage: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="addToPagesPublished (config.homeHtmlFname);" created="Wed, 27 Oct 2021 15:59:29 GMT"/>
									<outline text="debugMessage (&quot;published: &quot; + path);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Tue, 26 Oct 2021 16:20:36 GMT"/>
						</outline>
					<outline text="" created="Tue, 26 Oct 2021 16:20:25 GMT"/>
					<outline text="function publishHomePageText (callback) { //9/9/17 by DW" isComment="true">
						<outline text="var path = blogConfig.basePath + &quot;homepage.html&quot;;"/>
						<outline text="publishFile (path, htmltext, &quot;text/html&quot;, &quot;public-read&quot;, function (err, data) {">
							<outline text="if (err) {">
								<outline text="debugMessage (&quot;pubFacebookRss: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="debugMessage (&quot;published: &quot; + path);"/>
								<outline text="ping (blogConfig.baseUrl + config.facebookRssFname);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function publishMonthArchivePage (callback) {">
						<outline text="var now = new Date (), relpath = now.getFullYear () + &quot;/&quot; + utils.padWithZeros (now.getMonth () + 1, 2) + &quot;/&quot; + config.indexHtmlFname;"/>
						<outline text="var pagetitle = blogConfig.title + &quot;: &quot; + cmsDateFormat (now, &quot;mmmm yyyy&quot;);"/>
						<outline text="function getMonthlyHtml () {">
							<outline text="Changes" isComment="true">
								<outline text="7/31/17; 10:03:08 AM by DW">
									<outline text="Fixed a bug where it would omit the last day of the month. The day of the month is 1-based not 0-based. "/>
									</outline>
								</outline>
							<outline text="var htmltext = &quot;&quot;;"/>
							<outline text="var ctDays = daysInMonth (now), year = now.getFullYear (), month = now.getMonth ();"/>
							<outline text="for (var i = ctDays; i &gt; 0; i--) {">
								<outline text="var dayInArchive = blogData.htmlArchive [utils.getDatePath (new Date (year, month, i), false)];"/>
								<outline text="if (dayInArchive !== undefined) {">
									<outline text="htmltext += &quot;&lt;div class=\&quot;divArchivePageDay\&quot;&gt;&quot; + dayInArchive.htmltext + &quot;&lt;/div&gt;&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="for (var i = ctDays - 1; i &gt; 0; i--) {" isComment="true">
								<outline text="var dayInArchive = blogData.htmlArchive [utils.getDatePath (new Date (year, month, i), false)];"/>
								<outline text="if (dayInArchive !== undefined) {">
									<outline text="htmltext += &quot;&lt;div class=\&quot;divArchivePageDay\&quot;&gt;&quot; + dayInArchive.htmltext + &quot;&lt;/div&gt;&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="publishThroughTemplate (relpath, pagetitle, undefined, getMonthlyHtml (), undefined, undefined, function () {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function publishRssFeed (callback) {">
						<outline text="Changes" isComment="true">
							<outline text="11/6/20; 1:48:42 PM by DW">
								<outline text="Allow for days with no subs, commented days, and commented items."/>
								</outline>
							<outline text="1/13/20; 10:40:57 AM by DW">
								<outline text="Include inlineImage if present. "/>
								</outline>
							<outline text="5/16/18; 11:47:42 AM by DW">
								<outline text="If flNumberedSubs output &lt;ol&gt; in the RSS description, not &lt;ul&gt;."/>
								</outline>
							<outline text="6/23/17; 10:49:17 AM by DW">
								<outline text="Flow the text through the glossary and emoji. "/>
								</outline>
							</outline>
						<outline text="var rssHistory = new Array (), headElements, now = new Date ();"/>
						<outline text="function getSubsText (parent) {">
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="function add (s) {">
								<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="function visit (parent) {">
								<outline text="for (var i = 0; i &lt; parent.subs.length; i++) {">
									<outline text="var item = parent.subs [i], text = processText (item.text);"/>
									<outline text="var imgHtml = getImageHtml (item); //11/12/21 by DW" created="Fri, 12 Nov 2021 20:03:02 GMT"/>
									<outline text="" created="Sat, 23 Jul 2022 21:51:55 GMT"/>
									<outline text="var objtext = imgHtml + text; //7/23/22 by DW" created="Sat, 23 Jul 2022 21:51:55 GMT"/>
									<outline text="if (item.inlineImage !== undefined) { //7/23/22 by DW">
										<outline text="objtext = &quot;&lt;div class=\&quot;divInlineImage\&quot;&gt;&quot; + addInlineImageTo (text, item.inlineImage) + &quot;&lt;/div&gt;&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text=""/>
									<outline text="if (indentlevel == 0) {">
										<outline text="add (&quot;&lt;p&gt;&quot; + objtext + &quot;&lt;/p&gt;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="add (&quot;&lt;li&gt;&quot; + objtext + &quot;&lt;/li&gt;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text=""/>
									<outline text="if (item.subs !== undefined) {">
										<outline text="if (utils.getBoolean (item.flNumberedSubs)) { //5/16/18 by DW">
											<outline text="add (&quot;&lt;ol&gt;&quot;); indentlevel++;"/>
											<outline text="visit (item);"/>
											<outline text="add (&quot;&lt;/ol&gt;&quot;); indentlevel--;"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++;"/>
											<outline text="visit (item);"/>
											<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="for (var i = 0; i &lt; parent.subs.length; i++) {" isComment="true">
									<outline text="var item = parent.subs [i], text = processText (item.text);"/>
									<outline text="var imgHtml = getImageHtml (item); //11/12/21 by DW" created="Fri, 12 Nov 2021 20:03:02 GMT"/>
									<outline text=""/>
									<outline text="if (indentlevel == 0) {">
										<outline text="add (&quot;&lt;p&gt;&quot; + imgHtml + text + &quot;&lt;/p&gt;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="add (&quot;&lt;li&gt;&quot; + imgHtml + text + &quot;&lt;/li&gt;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text=""/>
									<outline text="if (item.subs !== undefined) {">
										<outline text="if (utils.getBoolean (item.flNumberedSubs)) { //5/16/18 by DW">
											<outline text="add (&quot;&lt;ol&gt;&quot;); indentlevel++;"/>
											<outline text="visit (item);"/>
											<outline text="add (&quot;&lt;/ol&gt;&quot;); indentlevel--;"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++;"/>
											<outline text="visit (item);"/>
											<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="visit (parent);"/>
							<outline text="return (htmltext)"/>
							<outline text="}"/>
							</outline>
						<outline text="function pingForUser (callback) { //8/17/17 by DW">
							<outline text="Changes" isComment="true">
								<outline text="8/17/17; 3:27:03 PM by DW">
									<outline text="The user can specify a URL for us to ping when the JSON feed has been built. This is used in the connection between Electric Outliner and the screen2.io server when I'm updating Scripting News. "/>
									</outline>
								</outline>
							<outline text="function doPing () {">
								<outline text="httpReadUrl (options.urlToPing, function (s) {">
									<outline text="debugMessage (&quot;pingForUser: options.urlToPing == &quot; + options.urlToPing + &quot;, s == &quot; + s);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="try {">
								<outline text="if (options.urlToPing !== undefined) {">
									<outline text="if (options.urlToPing.length &gt; 0) {">
										<outline text="setTimeout (doPing, 100);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function ping (urlFeed) {">
							<outline text="if (blogConfig.flRssCloudEnabled &amp;&amp; (blogConfig.rssCloudProtocol == &quot;http-post&quot;)) {">
								<outline text="var urlServer = &quot;http://&quot; + blogConfig.rssCloudDomain + &quot;:&quot; + blogConfig.rssCloudPort + blogConfig.rssPingPath;"/>
								<outline text="addToPingsSent ({urlServer, urlFeed});"/>
								<outline text="debugMessage (&quot;ping: urlServer == &quot; + urlServer + &quot;, urlFeed == &quot; + urlFeed);" isComment="true"/>
								<outline text="rss.cloudPing (urlServer, urlFeed, function (err, res, body) {">
									<outline text="if (flPingLogEnabled) {">
										<outline text="var message = undefined, statusCode = undefined;"/>
										<outline text="if (res !== undefined) { //protect against failure below -- 9/3/17 by DW">
											<outline text="statusCode = res.statusCode;"/>
											<outline text="}"/>
											</outline>
										<outline text="if (err) {">
											<outline text="message = err.message;"/>
											<outline text="}"/>
											</outline>
										<outline text="pingLog.unshift ({">
											<outline text="urlFeed: urlFeed,"/>
											<outline text="urlServer: urlServer,"/>
											<outline text="when: new Date ().toGMTString (),"/>
											<outline text="code: statusCode,"/>
											<outline text="body: body,"/>
											<outline text="message: message"/>
											<outline text="});"/>
											</outline>
										<outline text="flPingLogChanged = true;"/>
										<outline text="}"/>
										</outline>
									<outline text="if (err) { //12/2/23 by DW" created="Sat, 02 Dec 2023 18:24:49 GMT">
										<outline text="console.log (&quot;publishRssFeed: urlFeed == &quot; + urlFeed + &quot;, urlServer == &quot; + urlServer + &quot;, err.message == &quot; + err.message, + &quot;, res.statusCode == &quot; + res.statusCode);" created="Sat, 02 Dec 2023 18:24:04 GMT"/>
										<outline text="}" created="Sat, 02 Dec 2023 18:25:58 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 02 Dec 2023 18:26:00 GMT">
										<outline text="console.log (&quot;publishRssFeed: urlFeed == &quot; + urlFeed + &quot;, urlServer == &quot; + urlServer + &quot;, res.statusCode == &quot; + res.statusCode);" created="Sat, 02 Dec 2023 18:24:04 GMT"/>
										<outline text="}" created="Sat, 02 Dec 2023 18:26:07 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function pubFacebookRss (headElements, rssHistory) { //7/4/17 by DW">
							<outline text="var myHeadElements = new Object ();"/>
							<outline text="utils.copyScalars (headElements, myHeadElements);"/>
							<outline text=""/>
							<outline text="myHeadElements.flUseContentEncoded = true;"/>
							<outline text="myHeadElements.flTitledItemsOnly = true;"/>
							<outline text="myHeadElements.flFacebookEncodeContent = true;"/>
							<outline text=""/>
							<outline text="var xmltext = rss.buildRssFeed (myHeadElements, rssHistory);"/>
							<outline text=""/>
							<outline text="var path = blogConfig.basePath + config.facebookRssFname;"/>
							<outline text="publishFile (path, xmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="debugMessage (&quot;pubFacebookRss: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="addToPagesPublished (config.facebookRssFname);" created="Wed, 27 Oct 2021 15:59:29 GMT"/>
									<outline text="debugMessage (&quot;published: &quot; + path);" isComment="true"/>
									<outline text="ping (blogConfig.baseUrl + config.facebookRssFname);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="function processOutline (theOutline) { //8/24/17 by DW">
							<outline text="Changes" isComment="true">
								<outline text="8/24/17; 12:22:18 PM by DW">
									<outline text="Creates and returns a copy of the outline with the glossary text and emojis processed."/>
									</outline>
								</outline>
							<outline text="var theCopy = JSON.parse (JSON.stringify (theOutline));"/>
							<outline text="function visit (parent) {">
								<outline text="if (parent.text !== undefined) {">
									<outline text="parent.text = processText (parent.text);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (parent.subs !== undefined) {">
									<outline text="for (var i = 0; i &lt; parent.subs.length; i++) {">
										<outline text="visit (parent.subs [i]);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="visit (theCopy);"/>
							<outline text="" isComment="true"/>
							<outline text="debugMessage (&quot;processOutline: returning == &quot; + utils.jsonStringify (theCopy));" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="return (theCopy);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="function pubRss (headElements, historyArray) {">
							<outline text="var xmltext = rss.buildRssFeed (headElements, rssHistory);"/>
							<outline text="var path = path = blogConfig.basePath + config.rssFname;"/>
							<outline text="publishFile (path, xmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="debugMessage (&quot;publishRssFeed: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="addToPagesPublished (config.rssFname);" created="Wed, 27 Oct 2021 15:59:29 GMT"/>
									<outline text="debugMessage (&quot;published: &quot; + path);" isComment="true"/>
									<outline text="ping (blogConfig.baseUrl + config.rssFname);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function pubJson (headElements, historyArray) {">
							<outline text="var jsontext = rss.buildJsonFeed (headElements, historyArray);"/>
							<outline text="var path = blogConfig.basePath + config.rssJsonFname;"/>
							<outline text="" isComment="true"/>
							<outline text="debugMessage (&quot;pubJson: jsontext == &quot; + jsontext);" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="publishFile (path, jsontext, &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="debugMessage (&quot;publishJsonFeed: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="addToPagesPublished (config.rssJsonFname);" created="Wed, 27 Oct 2021 15:59:29 GMT"/>
									<outline text="debugMessage (&quot;published: &quot; + path);" isComment="true"/>
									<outline text="ping (blogConfig.baseUrl + config.rssJsonFname);"/>
									<outline text="pingForUser (); //8/17/17 by DW"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {" isComment="true">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="//set up headElements ">
							<outline text="headElements = new Object ();"/>
							<outline text="utils.copyScalars (blogConfig, headElements);"/>
							<outline text="utils.copyScalars (blogConfig.jstruct.head, headElements);"/>
							<outline text="headElements.generator = myProductName + &quot; v&quot; + myVersion; //8/24/17 by DW"/>
							</outline>
						<outline text="for (var i = 0; i &lt; daysArray.length; i++) {">
							<outline text="var day = daysArray [i];"/>
							<outline text="if ((day.subs !== undefined) &amp;&amp; notComment (day)) { //11/6/20 by DW">
								<outline text="for (var j = 0; j &lt; day.subs.length; j++) {">
									<outline text="var item = day.subs [j], obj = new Object ();"/>
									<outline text="if (notComment (item)) { //11/6/20 by DW">
										<outline text="let addToLink = &quot;&quot;; //11/7/22 by DW" created="Tue, 08 Nov 2022 00:12:50 GMT"/>
										<outline text="if (item.subs === undefined) {">
											<outline text="obj.text = getImageHtml (item) + processText (item.text); //11/12/21 by DW"/>
											<outline text="if (item.inlineImage !== undefined) { //1/13/20 by DW">
												<outline text="obj.text = &quot;&lt;div class=\&quot;divInlineImage\&quot;&gt;&quot; + addInlineImageTo (obj.text, item.inlineImage) + &quot;&lt;/div&gt;&quot;;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="obj.title = item.text;"/>
											<outline text="obj.text = getSubsText (item);"/>
											<outline text="addToLink = &quot;?title=&quot; + utils.innerCaseName (item.text); //11/7/22 by DW" created="Tue, 08 Nov 2022 00:13:05 GMT"/>
											<outline text="}"/>
											</outline>
										<outline text="obj.outline = processOutline (item); //5/12/17 by DW"/>
										<outline text="obj.link = item.permalink + addToLink;"/>
										<outline text="obj.pubDate = item.created;"/>
										<outline text="obj.guid = {flPermalink: true, value: item.permalink};"/>
										<outline text="obj.when = item.created;"/>
										<outline text="if ((item.enclosure !== undefined) &amp;&amp; (item.enclosureType !== undefined) &amp;&amp; (item.enclosureLength !== undefined)) { //6/9/17 by DW">
											<outline text="obj.enclosure = {">
												<outline text="url: item.enclosure,"/>
												<outline text="type: item.enclosureType,"/>
												<outline text="length: item.enclosureLength"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="rssHistory [rssHistory.length] = obj;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="pubRss (headElements, rssHistory); "/>
						<outline text="pubJson (headElements, rssHistory); "/>
						<outline text="pubFacebookRss (headElements, rssHistory); //7/4/17 by DW"/>
						<outline text="if (config.flSaveRssDebuggingInfo) { //1/13/20 by DW">
							<outline text="fsWriteFile (config.debugFolder + &quot;headElements.json&quot;, utils.jsonStringify (headElements));"/>
							<outline text="fsWriteFile (config.debugFolder + &quot;rssHistory.json&quot;, utils.jsonStringify (rssHistory));"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function publishHomeJson (callback) { //7/18/17 by DW">
						<outline text="var path = blogConfig.basePath + config.indexJsonFname;"/>
						<outline text="function copyOutlineWithoutExtras (theOutline) {">
							<outline text="function copyOutlineStruct (theOutline) {">
								<outline text="var newstruct = new Object ();"/>
								<outline text="utils.copyScalars (theOutline, newstruct);"/>
								<outline text="if (newstruct.htmltext !== undefined) {">
									<outline text="delete newstruct.htmltext;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (theOutline.subs !== undefined) {">
									<outline text="newstruct.subs = new Array ();"/>
									<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
										<outline text="newstruct.subs.push (copyOutlineStruct (theOutline.subs [i]));"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="return (newstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="var smallerStruct = new Object ();"/>
							<outline text="smallerStruct.head = new Object ();"/>
							<outline text="utils.copyScalars (theOutline.head, smallerStruct.head);"/>
							<outline text="smallerStruct.body = copyOutlineStruct (theOutline.body);"/>
							<outline text="return (smallerStruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="var smallerStruct = copyOutlineWithoutExtras (jstruct);"/>
						<outline text="publishFile (path, utils.jsonStringify (smallerStruct), &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
							<outline text="if (err) {">
								<outline text="debugMessage (&quot;publishHomeJson: path == &quot; + path + &quot;, err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="addToPagesPublished (config.indexJsonFname);" created="Wed, 27 Oct 2021 15:59:29 GMT"/>
								<outline text="debugMessage (&quot;published: &quot; + path);" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function publishCustomPages (callback) {">
						<outline text="if (blogConfig.customPages !== undefined) {">
							<outline text="function pubOnePage (path, pagetitle, htmltext, callback) {">
								<outline text="publishThroughTemplate (path, pagetitle, undefined, htmltext, undefined, undefined, function () {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="for (var i = 0; i &lt; blogConfig.customPages.length; i++) {">
								<outline text="var thePage = blogConfig.customPages [i];"/>
								<outline text="pubOnePage (thePage.fname, thePage.title, thePage.htmltext);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function setCalendarFlags () { //11/9/20 by DW">
						<outline text="Changes" isComment="true">
							<outline text="11/9/20; 3:45:07 PM by DW">
								<outline text="Every node has a new property, flInCalendar -- true if it's nested within the calendar structure."/>
								<outline text="This allows us to treat nodes that are not in the calendar structure differently."/>
								</outline>
							</outline>
						<outline text="function addflags (parent, flInCalendar) {">
							<outline text="if (parent.name !== undefined) {">
								<outline text="flInCalendar = true;"/>
								<outline text="}"/>
								</outline>
							<outline text="parent.flInCalendar = flInCalendar;"/>
							<outline text="if (parent.subs !== undefined) {">
								<outline text="parent.subs.forEach (function (item) {">
									<outline text="item.flInCalendar = flInCalendar;"/>
									<outline text="addflags (item, flInCalendar);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="addflags (jstruct.body, false);"/>
						<outline text="console.log (&quot;setCalendarFlags: jstruct.body == &quot; + utils.jsonStringify (jstruct.body));" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function publishStandalonePages (callback) { //11/9/20 by DW">
						<outline text="Changes" isComment="true">
							<outline text="11/9/20; 3:51:37 PM by DW">
								<outline text="Find pages outside the calendar structure, and publish them. "/>
								</outline>
							</outline>
						<outline text="var pages = new Array ();"/>
						<outline text="function findStandalonePages (parent) {">
							<outline text="if (parent.subs !== undefined) {">
								<outline text="parent.subs.forEach (function (item) {">
									<outline text="if (!item.flInCalendar) {">
										<outline text="if (item.type == &quot;page&quot;) {">
											<outline text="pages.push (item);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="findStandalonePages (item);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function publish (item, callback) {">
							<outline text="console.log (&quot;publishStandalonePages/publish: item.title == &quot; + item.title);"/>
							<outline text="if (item.relpath === undefined) {">
								<outline text="console.log (&quot;publishStandalonePages: can't render the standalone page because it doesn't have a relpath attribute.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var metadata = new Object ();"/>
								<outline text="var titleline = &quot;&lt;div class=\&quot;divStoryPageTitle\&quot;&gt;&quot; + getRenderedText (item, true) + &quot;&lt;/div&gt;&quot;;"/>
								<outline text="var posttimeline = &quot;&lt;div class=\&quot;divStoryPagePostTime\&quot;&gt;&quot; + formatTimeLine (item.created) + &quot;&lt;/div&gt;&quot;;"/>
								<outline text="var itemsubtext = getItemSubs (item, 0, item.permalink);"/>
								<outline text="var htmltext = &quot;&lt;div class=\&quot;divTitledItem\&quot;&gt;&quot; + posttimeline + titleline + itemsubtext + &quot;&lt;/div&gt;&quot;;"/>
								<outline text="publishThroughTemplate (item.relpath, item.text, metadata, htmltext, undefined, undefined, function () {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function publishNextStandalonePage (ix) {">
							<outline text="if (ix &lt; pages.length) {">
								<outline text="publish (pages [ix], function () {">
									<outline text="publishNextStandalonePage (ix + 1);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="findStandalonePages (jstruct.body);"/>
						<outline text="publishNextStandalonePage (0);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getBlogTemplate (callback) {">
						<outline text="var urlTemplate = (blogConfig.urlTemplate === undefined) ? urlDefaultTemplate : blogConfig.urlTemplate; "/>
						<outline text="httpReadUrl (urlTemplate, function (templatetext) {">
							<outline text="blogConfig.templatetext = templatetext;"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getHomePageTemplate (callback) { //9/12/17 by DW">
						<outline text="Changes" isComment="true">
							<outline text="9/12/17; 10:54:59 AM by DW">
								<outline text="If urlHomePageTemplate is specified, we read the template text into blogConfig.homePageTemplatetext. "/>
								</outline>
							</outline>
						<outline text="debugMessage (&quot;getHomePageTemplate: blogConfig.urlHomePageTemplate == &quot; + blogConfig.urlHomePageTemplate);" isComment="true"/>
						<outline text="if (blogConfig.urlHomePageTemplate !== undefined) {">
							<outline text="httpReadUrl (blogConfig.urlHomePageTemplate, function (templatetext) {">
								<outline text="blogConfig.homePageTemplatetext = templatetext;"/>
								<outline text="debugMessage (&quot;getHomePageTemplate: blogConfig.homePageTemplatetext.length == &quot; + blogConfig.homePageTemplatetext.length);" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getBlogGlossary (callback) {">
						<outline text="Changes" isComment="true" created="Sun, 22 Aug 2021 16:11:21 GMT">
							<outline text="10/31/21; 10:11:46 AM by DW" created="Sun, 31 Oct 2021 14:11:45 GMT">
								<outline text="What if a glossary entry has no subs? We weren't checking, now we do." created="Sun, 31 Oct 2021 14:11:47 GMT"/>
								</outline>
							<outline text="10/18/21; 11:32:35 AM by DW" created="Mon, 18 Oct 2021 15:32:35 GMT">
								<outline text="Changed the way we read the OPML file." created="Mon, 18 Oct 2021 15:32:35 GMT"/>
								</outline>
							<outline text="10/16/21; 10:16:13 AM by DW" created="Sat, 16 Oct 2021 14:16:13 GMT">
								<outline text="If there was an error reading the glossary, don't bother parsing the non-existent outline. ;-)" created="Sat, 16 Oct 2021 14:16:13 GMT"/>
								</outline>
							<outline text="8/22/21; 12:11:23 PM by DW" created="Sun, 22 Aug 2021 16:11:22 GMT">
								<outline text="Don't try to read the glossary if it hasn't been undefined." created="Sun, 22 Aug 2021 16:11:23 GMT"/>
								</outline>
							</outline>
						<outline text="blogConfig.glossary = new Object ();"/>
						<outline text="if (blogConfig.urlGlossaryOpml !== undefined) {" created="Sun, 22 Aug 2021 16:10:38 GMT">
							<outline text="httpReadOutline (blogConfig.urlGlossaryOpml, function (err, theOutline) {">
								<outline text="if (!err) {" created="Mon, 18 Oct 2021 15:31:45 GMT">
									<outline text="for (i = 0; i &lt; theOutline.opml.body.subs.length; i++) {">
										<outline text="var item = theOutline.opml.body.subs [i];"/>
										<outline text="if (item.text.length &gt; 0) { //10/31/21 by DW" created="Sun, 31 Oct 2021 14:11:12 GMT">
											<outline text="if (item.subs !== undefined) {" created="Sun, 31 Oct 2021 14:10:16 GMT">
												<outline text="if (item.subs.length &gt; 0) {" created="Sun, 31 Oct 2021 14:10:16 GMT">
													<outline text="blogConfig.glossary [item.text] = item.subs [0].text;"/>
													<outline text="}" created="Sun, 31 Oct 2021 14:10:27 GMT"/>
													</outline>
												<outline text="}" created="Sun, 31 Oct 2021 14:10:27 GMT"/>
												</outline>
											<outline text="}" created="Sun, 31 Oct 2021 14:11:18 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}" created="Mon, 18 Oct 2021 15:31:50 GMT"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sun, 22 Aug 2021 16:10:45 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 22 Aug 2021 16:10:57 GMT">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Sun, 22 Aug 2021 16:10:59 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getAboutOutline (callback) { //10/18/21 by DW">
						<outline text="if (blogConfig.urlAboutOpml !== undefined) {" created="Sun, 22 Aug 2021 16:10:38 GMT">
							<outline text="httpReadOutline (blogConfig.urlAboutOpml, function (err, theOutline) {">
								<outline text="if (err) {" created="Mon, 18 Oct 2021 15:33:29 GMT">
									<outline text="blogConfig.aboutOutline = undefined;" created="Mon, 18 Oct 2021 14:17:27 GMT"/>
									<outline text="}" created="Mon, 18 Oct 2021 15:33:32 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 18 Oct 2021 15:33:33 GMT">
									<outline text="blogConfig.aboutOutline = theOutline;" created="Mon, 18 Oct 2021 14:17:27 GMT"/>
									<outline text="}" created="Mon, 18 Oct 2021 15:33:34 GMT"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sun, 22 Aug 2021 16:10:45 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 22 Aug 2021 16:10:57 GMT">
							<outline text="blogConfig.aboutOutline = undefined;" created="Mon, 18 Oct 2021 14:17:27 GMT"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Sun, 22 Aug 2021 16:10:59 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="if (blogConfig === undefined) { //8/21/17 by DW">
						<outline text="debugMessage (&quot;publishBlog: can't publish because there is no blog named \&quot;&quot; + blogName + &quot;.\&quot;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="setCalendarFlags (); //11/9/20 by DW"/>
						<outline text="blogData.sortedStories = outlineToStories (jstruct); //10/26/21 by DW" isComment="true" created="Tue, 26 Oct 2021 16:41:28 GMT"/>
						<outline text="daysArray = outlineToDaysArray (jstruct); //10/26/21 by DW"/>
						<outline text="daysArray.forEach (function (day) {" created="Tue, 26 Oct 2021 22:50:08 GMT">
							<outline text="saveDay (day); ///6/10/17 by DW"/>
							<outline text="saveDayInOpml (day); //1/16/21 by DW"/>
							<outline text="});" created="Tue, 26 Oct 2021 22:50:17 GMT"/>
							</outline>
						<outline text="for (var i = 0; i &lt; jstruct.body.subs.length; i++) {" isComment="true">
							<outline text="var month = jstruct.body.subs [i];"/>
							<outline text="if ((month.subs !== undefined) &amp;&amp; notComment (month) &amp;&amp; month.flInCalendar) { //11/5/20 by DW">
								<outline text="for (var j = 0; j &lt; month.subs.length; j++) {">
									<outline text="var day = month.subs [j];"/>
									<outline text="daysArray [daysArray.length] = day;"/>
									<outline text="saveDay (day); ///6/10/17 by DW"/>
									<outline text="saveDayInOpml (day); //1/16/21 by DW"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="blogConfig.jstruct = jstruct; //8/8/17 by DW"/>
						<outline text="blogConfig.ownerFacebookAccount = jstruct.head.ownerFacebookAccount; //5/26/17 by DW"/>
						<outline text="blogConfig.ownerGithubAccount = jstruct.head.ownerGithubAccount; //5/26/17 by DW"/>
						<outline text="blogConfig.ownerLinkedinAccount = jstruct.head.ownerLinkedinAccount; //5/26/17 by DW"/>
						<outline text="" created="Mon, 23 Aug 2021 17:06:33 GMT"/>
						<outline text="if (blogConfig.flAlwaysBuildHomePage === undefined) { //8/23/21; 1:07:01 PM by DW" created="Mon, 23 Aug 2021 17:06:34 GMT">
							<outline text="blogConfig.flAlwaysBuildHomePage = true;" created="Mon, 23 Aug 2021 17:07:01 GMT"/>
							<outline text="}" created="Mon, 23 Aug 2021 17:07:16 GMT"/>
							</outline>
						<outline text="if (blogConfig.flOldSchoolUseCache === undefined) { //8/30/21 by DW" created="Mon, 23 Aug 2021 17:06:34 GMT">
							<outline text="blogConfig.flOldSchoolUseCache = false;" created="Mon, 23 Aug 2021 17:07:01 GMT"/>
							<outline text="}" created="Mon, 23 Aug 2021 17:07:16 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="if (blogData.calendar === undefined) { //1/9/20 by DW">
							<outline text="blogData.calendar = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (blogData.htmlArchive === undefined) { //1/9/20 by DW">
							<outline text="blogData.htmlArchive = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="getAboutOutline (function () {" created="Mon, 18 Oct 2021 14:18:48 GMT">
							<outline text="getBlogGlossary (function () {">
								<outline text="getHomePageTemplate (function () {">
									<outline text="getBlogTemplate (function () {">
										<outline text="publishNextDay (0, function () { //callback runs when all daily pages have been built">
											<outline text="publishHomePage (function () {">
												<outline text="publishMonthArchivePage (function () {">
													<outline text="publishRssFeed (function () {" created="Tue, 02 Nov 2021 15:48:03 GMT">
														<outline text="publishCustomPages (function () {" created="Tue, 02 Nov 2021 15:48:18 GMT">
															<outline text="publishHomeJson (function () { //7/18/17 by DW" created="Tue, 02 Nov 2021 15:48:33 GMT">
																<outline text="publishStandalonePages (function () { //11/9/20 by DW">
																	<outline text="debugMessage (&quot;publishBlog: ctsecs == &quot; + utils.secondsSince (whenstart));"/>
																	<outline text="if (callback !== undefined) {">
																		<outline text="callback (blogConfig, eventLog);"/>
																		<outline text="}"/>
																		</outline>
																	<outline text="});" created="Tue, 02 Nov 2021 15:49:03 GMT"/>
																	</outline>
																<outline text="});" created="Tue, 02 Nov 2021 15:48:38 GMT"/>
																</outline>
															<outline text="});" created="Tue, 02 Nov 2021 15:48:25 GMT"/>
															</outline>
														<outline text="});" created="Tue, 02 Nov 2021 15:48:09 GMT"/>
														</outline>
													<outline text="});" created="Tue, 02 Nov 2021 15:47:55 GMT"/>
													</outline>
												<outline text="});" created="Tue, 02 Nov 2021 15:47:39 GMT"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="publishNextDay (0, function () { //callback runs when all daily pages have been built" isComment="true">
											<outline text="publishHomePage (); "/>
											<outline text="publishMonthArchivePage ();"/>
											<outline text="publishRssFeed ();"/>
											<outline text="publishCustomPages ();"/>
											<outline text="publishHomeJson (); //7/18/17 by DW"/>
											<outline text="publishStandalonePages (); //11/9/20 by DW"/>
											<outline text="pingTagServer (); //1/13/21 by DW" isComment="true"/>
											<outline text="debugMessage (&quot;publishBlog: ctsecs == &quot; + utils.secondsSince (whenstart));"/>
											<outline text="if (callback !== undefined) {">
												<outline text="callback (blogConfig);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});" created="Mon, 18 Oct 2021 14:18:53 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function readConfig (callback) { ">
					<outline text="Changes" isComment="true">
						<outline text="10/8/20; 11:09:36 AM by DW">
							<outline text="Display a message on console when config.json changed. "/>
							</outline>
						</outline>
					<outline text="fs.readFile (fnameConfig, function (err, jsontext) {">
						<outline text="if (!err) {">
							<outline text="try {">
								<outline text="jsontext = jsontext.toString ();"/>
								<outline text="if (jsontext != lastConfigJsontext) {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="console.log (&quot;readConfig: updated &quot; + fnameConfig);"/>
									<outline text="lastConfigJsontext = jsontext;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="debugMessage (&quot;readConfig: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function writeConfig () { //10/6/20 by DW -- for debugging">
					<outline text="fs.writeFile (&quot;configDebug.json&quot;, utils.jsonStringify (config), function (err) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;writeConfig: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;writeConfig: configDebug.json written.&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function initBlog (blogName, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="8/10/21; 11:25:21 AM by DW" created="Tue, 10 Aug 2021 15:25:21 GMT">
							<outline text="Added callback." created="Tue, 10 Aug 2021 15:25:23 GMT"/>
							</outline>
						<outline text="8/10/21; 11:21:06 AM by DW" created="Tue, 10 Aug 2021 15:21:05 GMT">
							<outline text="Previously it was local to init. Now we need to call it from drummeroldschool, since we create blogs on the fly there. " created="Tue, 10 Aug 2021 15:21:07 GMT"/>
							</outline>
						<outline text="10/8/20; 11:13:30 AM by DW">
							<outline text="Added console message to say how long it took to load the htmlArchive for each blog."/>
							</outline>
						<outline text="10/6/20; 4:05:05 PM by DW">
							<outline text="Init blogData."/>
							</outline>
						<outline text="8/8/17; 6:20:01 PM by DW">
							<outline text="While OldSchool was in development, before it was a package, we built each blog when the app launched. This made it easy to test, but isn't right in the current context. The code that does that is in the callback for getBlogHtmlArchive. I just commented it out. "/>
							</outline>
						</outline>
					<outline text="var blogConfig = config.blogs [blogName];"/>
					<outline text="dataForBlogs [blogName] = {">
						<outline text="htmlArchive: new Object (),"/>
						<outline text="calendar: new Object (),"/>
						<outline text="flCalendarChanged: false,"/>
						<outline text="wordpress: { //6/27/23 by DW" created="Tue, 27 Jun 2023 13:54:05 GMT">
							<outline text="ids: new Object ()," created="Tue, 27 Jun 2023 13:54:22 GMT"/>
							<outline text="flChanged: false" created="Tue, 27 Jun 2023 14:07:29 GMT"/>
							<outline text="}," created="Tue, 27 Jun 2023 13:54:10 GMT"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="var blogData = dataForBlogs [blogName];"/>
					<outline text="function getBlogHtmlArchive (callback) {">
						<outline text="var pagesfolder = config.pagesFolder + blogName + &quot;/&quot;, whenstart = new Date ();"/>
						<outline text="utils.sureFilePath  (pagesfolder + &quot;x&quot;, function () {">
							<outline text="var yearlist = fs.readdirSync (pagesfolder);"/>
							<outline text="blogData.htmlArchive = new Object ();"/>
							<outline text="for (var i = 0; i &lt; yearlist.length; i++) {">
								<outline text="var yearname = yearlist [i], yearfolder = pagesfolder + yearname;"/>
								<outline text="if (isDirectory (yearfolder)) {">
									<outline text="var monthlist = fs.readdirSync (yearfolder);"/>
									<outline text="for (var j = 0; j &lt; monthlist.length; j++) {">
										<outline text="var monthname = monthlist [j]; var monthfolder = yearfolder + &quot;/&quot; + monthname;"/>
										<outline text="if (isDirectory (monthfolder)) {">
											<outline text="var daylist = fs.readdirSync (monthfolder);"/>
											<outline text="for (var k = 0; k &lt; daylist.length; k++) {">
												<outline text="var dayname = daylist [k];"/>
												<outline text="if (utils.endsWith (dayname, &quot;.html&quot;)) {">
													<outline text="var f = monthfolder + &quot;/&quot; + dayname;"/>
													<outline text="var objname = yearname + &quot;/&quot; + monthname + &quot;/&quot; + dayname;"/>
													<outline text="objname = utils.stringMid (objname, 1, objname.length - 5); //pop off .html at end"/>
													<outline text="debugMessage (&quot;getBlogHtmlArchive: objname == &quot; + objname);" isComment="true"/>
													<outline text="blogData.htmlArchive [objname] = {">
														<outline text="htmltext: fs.readFileSync (f).toString ()"/>
														<outline text="}"/>
														</outline>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;getBlogHtmlArchive:  html archive for blog &quot; + blogName + &quot; took &quot; + utils.secondsSince (whenstart) + &quot; seconds to load.&quot;);" isComment="true"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getWordpressData (callback) { //6/27/23 by DW" created="Tue, 27 Jun 2023 13:56:38 GMT">
						<outline text="var f = config.wordpressFolder + blogName + &quot;.json&quot;;"/>
						<outline text="utils.sureFilePath  (f, function () {">
							<outline text="fs.readFile (f, function (err, jsontext) {" created="Tue, 27 Jun 2023 14:02:52 GMT">
								<outline text="if (err) {" created="Tue, 27 Jun 2023 14:03:19 GMT">
									<outline text="callback (err);" created="Tue, 27 Jun 2023 14:03:27 GMT"/>
									<outline text="}" created="Tue, 27 Jun 2023 14:03:31 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 27 Jun 2023 14:03:31 GMT">
									<outline text="try {" created="Tue, 27 Jun 2023 14:03:52 GMT">
										<outline text="blogData.wordpress = JSON.parse (jsontext);" created="Tue, 27 Jun 2023 14:04:18 GMT"/>
										<outline text="callback (undefined);" created="Tue, 27 Jun 2023 14:03:59 GMT"/>
										<outline text="}" created="Tue, 27 Jun 2023 14:03:55 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Tue, 27 Jun 2023 14:03:56 GMT">
										<outline text="callback (err);" created="Tue, 27 Jun 2023 14:03:59 GMT"/>
										<outline text="}" created="Tue, 27 Jun 2023 14:04:02 GMT"/>
										</outline>
									<outline text="}" created="Tue, 27 Jun 2023 14:03:34 GMT"/>
									</outline>
								<outline text="});" created="Tue, 27 Jun 2023 14:03:06 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Tue, 27 Jun 2023 13:56:46 GMT"/>
						</outline>
					<outline text="" created="Tue, 27 Jun 2023 13:56:39 GMT"/>
					<outline text="var urlTemplate = (blogConfig.urlTemplate === undefined) ? urlDefaultTemplate : blogConfig.urlTemplate; " isComment="true"/>
					<outline text="readCalendarJson (blogConfig, blogData, function () {">
						<outline text="getBlogHtmlArchive (function () {">
							<outline text="getWordpressData (function () { //6/27/23 by DW" created="Tue, 27 Jun 2023 14:06:17 GMT">
								<outline text="if (callback !== undefined) { //8/10/21 by DW">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});" created="Tue, 27 Jun 2023 14:06:22 GMT"/>
								</outline>
							<outline text="getBlogJsontext (blogConfig, function (jsontext) {" isComment="true">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="blogConfig.urlUpdateSocket = jstruct.head.urlUpdateSocket;"/>
								<outline text=""/>
								<outline text="blogConfig.ownerFacebookAccount = jstruct.head.ownerFacebookAccount; //5/26/17 by DW"/>
								<outline text="blogConfig.ownerGithubAccount = jstruct.head.ownerGithubAccount; //5/26/17 by DW"/>
								<outline text="blogConfig.ownerLinkedinAccount = jstruct.head.ownerLinkedinAccount; //5/26/17 by DW"/>
								<outline text=""/>
								<outline text="blogConfig.jstruct = jstruct; //5/15/17 by DW"/>
								<outline text="publishBlog (jstruct, blogName, function () {">
									<outline text="initSocket (blogConfig);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="httpReadUrl (urlTemplate, function (templatetext) {" isComment="true">
							<outline text="blogConfig.templatetext = templatetext;"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function init (configParam, callback) {">
					<outline text="if (configParam !== undefined) {">
						<outline text="for (x in configParam) {">
							<outline text="config [x] = configParam [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="readConfig (function () {">
						<outline text="var portMessage = &quot;&quot;;"/>
						<outline text="if (config.flHttpEnabled) {">
							<outline text="portMessage =  &quot; running on port &quot; + config.port;"/>
							<outline text="}"/>
							</outline>
						<outline text="debugMessage (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + portMessage + &quot;\n&quot;);"/>
						<outline text="readPingLog (function () {">
							<outline text="var whenLastSocketUpdate = undefined, lastSocketJsontext = undefined;"/>
							<outline text="var flScheduledEveryMinute = false;" isComment="true"/>
							<outline text="var mySocket = undefined, urlUpdateSocket = undefined;"/>
							<outline text=""/>
							<outline text="function getBlogJsontext (blogConfig, callback) {">
								<outline text="Changes" isComment="true">
									<outline text="10/18/21; 11:36:54 AM by DW" created="Mon, 18 Oct 2021 15:36:53 GMT">
										<outline text="We now read the OPML file over the web via the opml package, not daveopml." created="Mon, 18 Oct 2021 15:36:54 GMT"/>
										</outline>
									<outline text="1/9/20; 12:56:16 PM by DW">
										<outline text="If urlJson isn't present in the blogConfig, look for urlOpml and use that instead. We should be able to handle an OPML file, don't you think?"/>
										</outline>
									<outline text="8/7/17; 11:07:41 AM by DW">
										<outline text="Added option to read the JSON file locally from a file."/>
										</outline>
									</outline>
								<outline text="if (blogConfig.lastSocketJsontext !== undefined) {">
									<outline text="callback (blogConfig.lastSocketJsontext);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (blogConfig.flReadLocalJsonFile) {">
										<outline text="fs.readFile (blogConfig.localJsonFilePath, function (err, jsontext) {">
											<outline text="if (err) {">
												<outline text="debugMessage (&quot;getBlogJsontext: err.message == &quot; + err.message);"/>
												<outline text="callback (undefined);"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="callback (jsontext.toString ());"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (blogConfig.urlJson === undefined) { //1/9/20 by DW">
											<outline text="httpReadOutline (blogConfig.urlOpml, function (err, theOutline) {" created="Mon, 18 Oct 2021 15:34:38 GMT">
												<outline text="if (err) {" created="Mon, 18 Oct 2021 15:36:04 GMT">
													<outline text="callback (undefined);"/>
													<outline text="}" created="Mon, 18 Oct 2021 15:36:07 GMT"/>
													</outline>
												<outline text="else {" created="Mon, 18 Oct 2021 15:36:07 GMT">
													<outline text="if (theOutline.opml !== undefined) { //10/31/22 by DW" created="Mon, 31 Oct 2022 19:36:57 GMT">
														<outline text="let newOutline = {" created="Mon, 31 Oct 2022 19:37:21 GMT">
															<outline text="head: theOutline.opml.head," created="Mon, 31 Oct 2022 19:37:32 GMT"/>
															<outline text="body: theOutline.opml.body" created="Mon, 31 Oct 2022 19:37:48 GMT"/>
															<outline text="};" created="Mon, 31 Oct 2022 19:37:26 GMT"/>
															</outline>
														<outline text="theOutline = newOutline;" created="Mon, 31 Oct 2022 19:38:09 GMT"/>
														<outline text="}" created="Mon, 31 Oct 2022 19:37:09 GMT"/>
														</outline>
													<outline text="callback (utils.jsonStringify (theOutline));"/>
													<outline text="}" created="Mon, 18 Oct 2021 15:36:10 GMT"/>
													</outline>
												<outline text="});" created="Mon, 18 Oct 2021 15:34:58 GMT"/>
												</outline>
											<outline text="opml.readOpmlUrl (blogConfig.urlOpml, function (theOutline) {" isComment="true">
												<outline text="var container = {">
													<outline text="head: {">
														<outline text="},"/>
														</outline>
													<outline text="body: theOutline"/>
													<outline text="};"/>
													</outline>
												<outline text="callback (utils.jsonStringify (container));"/>
												<outline text="});"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="httpReadUrl (blogConfig.urlJson, function (jsontext) {">
												<outline text="callback (jsontext);"/>
												<outline text="});"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function startHttpServer () {">
								<outline text="function httpServer (httpRequest, httpResponse) {">
									<outline text="function doHttpReturn (code, type, s) { ">
										<outline text="httpResponse.writeHead (code, {&quot;Content-Type&quot;: type});"/>
										<outline text="httpResponse.end (s);    "/>
										<outline text="}"/>
										</outline>
									<outline text="try {" created="Tue, 29 Apr 2014 21:25:20 GMT" pgfnum="40664">
										<outline text="var parsedUrl = urlpack.parse (httpRequest.url, true), now = new Date ();" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
										<outline text="var lowerpath = parsedUrl.pathname.toLowerCase ();"/>
										<outline text="" isComment="true"/>
										<outline text="debugMessage (&quot;httpServer: &quot; + lowerpath);" isComment="true"/>
										<outline text="" isComment="true"/>
										<outline text="switch (httpRequest.method) {" created="Thu, 01 May 2014 20:42:04 GMT" pgfnum="40803">
											<outline text="case &quot;GET&quot;:" created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807">
												<outline text="switch (lowerpath) {">
													<outline text="case &quot;/version&quot;:" created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
														<outline text="doHttpReturn (200, &quot;text/plain&quot;, myVersion);"/>
														<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
														</outline>
													<outline text="case &quot;/now&quot;:" created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236">
														<outline text="doHttpReturn (200, &quot;text/plain&quot;, new Date ().toString ());"/>
														<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
														</outline>
													<outline text="case &quot;/build&quot;:">
														<outline text="try {">
															<outline text="var blogName = parsedUrl.query.blog, blogConfig = config.blogs [blogName];" created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413"/>
															<outline text="debugMessage (&quot;/build: blogName == &quot; + blogName);"/>
															<outline text="getBlogJsontext (blogConfig, function (jsontext) {">
																<outline text="try {">
																	<outline text="var jstruct = JSON.parse (jsontext);"/>
																	<outline text="blogConfig.lastSocketJsontext = undefined; //consume it"/>
																	<outline text="blogConfig.jstruct = jstruct; //5/15/17 by DW"/>
																	<outline text="publishBlog (jstruct, {blogName: blogName}, function () {">
																		<outline text="doHttpReturn (200, &quot;text/plain&quot;, blogConfig.baseUrl);"/>
																		<outline text="});"/>
																		</outline>
																	<outline text="}"/>
																	</outline>
																<outline text="catch (err) {">
																	<outline text="blogConfig.lastSocketJsontext = undefined;"/>
																	<outline text="doHttpReturn (503, &quot;text/plain&quot;, err.message);"/>
																	<outline text="}"/>
																	</outline>
																<outline text="});"/>
																</outline>
															<outline text="else {" isComment="true">
																<outline text="doHttpReturn (200, &quot;text/plain&quot;, &quot;not built&quot;);"/>
																<outline text="}"/>
																</outline>
															<outline text="}"/>
															</outline>
														<outline text="catch (err) {">
															<outline text="doHttpReturn (503, &quot;text/plain&quot;, err.message);"/>
															<outline text="}"/>
															</outline>
														<outline text="break;"/>
														</outline>
													<outline text="case &quot;/day&quot;: //10/17/19 by DW -- used for infinite scroll on scripting.com">
														<outline text="getDayHtml (parsedUrl.query.blog, parsedUrl.query.day, doHttpReturn);"/>
														<outline text="break;"/>
														</outline>
													<outline text="default: " created="Tue, 21 Jan 2014 00:38:22 GMT" pgfnum="36084">
														<outline text="doHttpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
														<outline text="break;" created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808"/>
														</outline>
													<outline text="}" created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830"/>
													</outline>
												<outline text="break;" created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808"/>
												</outline>
											<outline text="}" created="Thu, 01 May 2014 20:42:10 GMT" pgfnum="40804"/>
											</outline>
										<outline text="}" created="Tue, 29 Apr 2014 21:25:26 GMT" pgfnum="40668"/>
										</outline>
									<outline text="catch (err) {" created="Tue, 29 Apr 2014 21:25:27 GMT" pgfnum="40669">
										<outline text="doHttpReturn (503, &quot;text/plain&quot;, err.message);"/>
										<outline text="debugMessage (&quot;handleRequest: tryError.message == &quot; + err.message);"/>
										<outline text="}" created="Tue, 29 Apr 2014 21:25:35 GMT" pgfnum="40670"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="debugMessage (&quot;startHttpServer: config.port == &quot; + config.port);"/>
								<outline text="http.createServer (httpServer).listen (config.port);"/>
								<outline text="}"/>
								</outline>
							<outline text="function initSocket (blogConfig) {">
								<outline text="debugMessage (&quot;initSocket: blogConfig.title == &quot; + blogConfig.title + &quot;, blogConfig.urlUpdateSocket == &quot; + blogConfig.urlUpdateSocket);" isComment="true"/>
								<outline text="if (blogConfig.urlUpdateSocket !== undefined) {">
									<outline text="function startSocket (callback) {">
										<outline text="blogConfig.mySocket = websocket.connect (blogConfig.urlUpdateSocket); "/>
										<outline text="blogConfig.mySocket.on (&quot;connect&quot;, function () {">
											<outline text="var msg = &quot;watch &quot; + blogConfig.urlJson;"/>
											<outline text="debugMessage (&quot;startSocket: \&quot;&quot; + msg + &quot;\&quot;&quot;);"/>
											<outline text="blogConfig.mySocket.send (msg);"/>
											<outline text="});"/>
											</outline>
										<outline text="blogConfig.mySocket.on (&quot;text&quot;, function (s) {">
											<outline text="if (s !== undefined) { //no error">
												<outline text="var updatekey = &quot;update\r&quot;;"/>
												<outline text="if (utils.beginsWith (s, updatekey)) { //it's an update">
													<outline text="s = utils.stringDelete (s, 1, updatekey.length);"/>
													<outline text="callback (s);"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="blogConfig.mySocket.on (&quot;close&quot;, function (code, reason) {">
											<outline text="debugMessage (&quot;startSocket: blogConfig.mySocket was closed.&quot;);"/>
											<outline text="blogConfig.mySocket = undefined;"/>
											<outline text="});"/>
											</outline>
										<outline text="blogConfig.mySocket.on (&quot;error&quot;, function (err) {">
											<outline text="debugMessage (&quot;blogConfig.mySocket received an error&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if (blogConfig.mySocket === undefined) {">
										<outline text="startSocket (function (jsontext) {">
											<outline text="debugMessage (&quot;Update message received: blogConfig.title == &quot; + blogConfig.title + &quot;, jsontext.length == &quot; + jsontext.length);" isComment="true"/>
											<outline text="debugMessage (&quot;\n&quot; + new Date ().toLocaleTimeString () + &quot;: blog \&quot;&quot; + blogConfig.title + &quot;\&quot; updated, &quot; + jsontext.length + &quot; chars.&quot;);"/>
											<outline text="Update message received: blogConfig.title == Scripting News, jsontext.length == 171454" isComment="true"/>
											<outline text="blogConfig.whenLastSocketUpdate = new Date ();"/>
											<outline text="blogConfig.lastSocketJsontext = jsontext;"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function everyMinute () {">
								<outline text="var now = new Date ();"/>
								<outline text="var portpart = &quot;&quot;;"/>
								<outline text="if (config.flHttpEnabled) { //8/14/17 by DW">
									<outline text="portpart =  &quot;, running on port &quot; + config.port;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (now.getMinutes () == 0) { //1/6/20 by DW">
									<outline text="debugMessage (&quot;\n&quot; + now.toLocaleTimeString () + &quot;: &quot; + myProductName + &quot; v&quot; + myVersion + portpart);"/>
									<outline text="}"/>
									</outline>
								<outline text="readConfig (); //10/8/20 by DW"/>
								<outline text="writeConfig (); //10/6/20 by DW -- for debugging" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="function everySecond () {">
								<outline text="if (flBackgroundBuilds) {">
									<outline text="for (var x in config.blogs) {">
										<outline text="var blogConfig = config.blogs [x];"/>
										<outline text="if ((blogConfig.whenLastSocketUpdate !== undefined) &amp;&amp; (blogConfig.lastSocketJsontext !== undefined)) {">
											<outline text="var secs = utils.secondsSince (blogConfig.whenLastSocketUpdate);"/>
											<outline text="if (secs &gt;= 30) {">
												<outline text="debugMessage (&quot;everySecond: It has been &quot; + secs + &quot; since we received the last update.&quot;);"/>
												<outline text="blogConfig.whenLastSocketUpdate = undefined; //consume the update"/>
												<outline text="try {">
													<outline text="var jstruct = JSON.parse (lastSocketJsontext);"/>
													<outline text="blogConfig.lastSocketJsontext = undefined;"/>
													<outline text="blogConfig.jstruct = jstruct; //5/15/17 by DW"/>
													<outline text="publishBlog (jstruct, {blogName: x});"/>
													<outline text="}"/>
													</outline>
												<outline text="catch (err) {">
													<outline text="debugMessage (&quot;everySecond: err.message == &quot; + err.message);"/>
													<outline text="blogConfig.lastSocketJsontext = undefined;"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (!flScheduledEveryMinute) { " isComment="true">
									<outline text="if (new Date ().getSeconds () == 0) {">
										<outline text="setInterval (everyMinute, 60000); "/>
										<outline text="flScheduledEveryMinute = true;"/>
										<outline text="everyMinute (); //it's the top of the minute, we have to do one now"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="for (var x in config.blogs) {">
									<outline text="initSocket (config.blogs [x]);"/>
									<outline text="}"/>
									</outline>
								<outline text="for (var x in config.blogs) {">
									<outline text="var blogConfig = config.blogs [x];"/>
									<outline text="var blogData = dataForBlogs [x];"/>
									<outline text="if (blogData.flCalendarChanged) {">
										<outline text="publishCalendarJson (blogConfig, blogData);"/>
										<outline text="blogData.flCalendarChanged = false;"/>
										<outline text="}"/>
										</outline>
									<outline text="if (blogData.wordpress.flChanged) { //6/27/23 by DW" created="Tue, 27 Jun 2023 14:08:02 GMT">
										<outline text="blogData.wordpress.flChanged = false;" created="Tue, 27 Jun 2023 14:08:55 GMT"/>
										<outline text="const f = config.wordpressFolder + x + &quot;.json&quot;;"/>
										<outline text="utils.sureFilePath  (f, function () {">
											<outline text="const jsontext = utils.jsonStringify (blogData.wordpress);" created="Tue, 27 Jun 2023 14:11:13 GMT"/>
											<outline text="fs.writeFile (f, jsontext, function (err) {" created="Tue, 27 Jun 2023 14:02:52 GMT">
												<outline text="if (err) {" created="Tue, 27 Jun 2023 14:03:19 GMT">
													<outline text="console.log (&quot;saveWordpressData: err.message == &quot; + err.message);" created="Tue, 27 Jun 2023 14:03:27 GMT"/>
													<outline text="}" created="Tue, 27 Jun 2023 14:03:31 GMT"/>
													</outline>
												<outline text="});" created="Tue, 27 Jun 2023 14:03:06 GMT"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}" created="Tue, 27 Jun 2023 14:08:38 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flPingLogEnabled &amp;&amp; flPingLogChanged) {">
									<outline text="flPingLogChanged = false;"/>
									<outline text="writePingLog ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="for (var x in config.blogs) {">
								<outline text="initBlog (x);"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="if (config.flHttpEnabled) {">
								<outline text="startHttpServer ();"/>
								<outline text="}"/>
								</outline>
							<outline text="setInterval (everySecond, 1000); "/>
							<outline text="utils.runEveryMinute (everyMinute); //2/11/19 by DW"/>
							<outline text=""/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="startup ();" isComment="true"/>
				</outline>
			<outline text="readme.md">
				<outline text="# oldSchoolBlog ">
					<outline text="Blogging in the ways of the old school."/>
					</outline>
				<outline text="### Blog post">
					<outline text="I wrote a &lt;a href=&quot;http://scripting.com/2019/06/02/150411.html&quot;&gt;blog post&lt;/a&gt; on June 2, 2019 about Old School. "/>
					</outline>
				<outline text="### Updates" created="Sun, 22 Aug 2021 16:12:36 GMT">
					<outline text="Moved updates docs to &lt;a href=&quot;worknotes.md&quot;&gt;worknotes.md&lt;/a&gt;. " created="Wed, 28 Jun 2023 12:56:58 GMT"/>
					</outline>
				</outline>
			<outline text="examples/helloworld/hellomain.js">
				<outline text="const oldschool = require (&quot;oldschoolblog&quot;);" isComment="true"/>
				<outline text="const oldschool = require (&quot;../../oldschool.js&quot;);"/>
				<outline text="oldschool.init (); //it sets up a server and waits for instructions"/>
				</outline>
			<outline text="examples/helloworld/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;helloWorld&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;hellomain.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;oldschoolblog&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/helloworld/config.json" isComment="true">
				<outline text="{">
					<outline text="&quot;blogs&quot;: {">
						<outline text="&quot;kim&quot;: {">
							<outline text="&quot;title&quot;: &quot;Kim Parker's Blog&quot;,"/>
							<outline text="&quot;link&quot;: &quot;http://bloatware.org/users/kim/&quot;,"/>
							<outline text="&quot;description&quot;: &quot;I work for Bloatware, the best company in the world, now that I'm there!&quot;,"/>
							<outline text=""/>
							<outline text="8/7/17 by DW -- option to read JSON file from local filesystem for Instant Dave project" isComment="true">
								<outline text="&quot;flReadLocalJsonFile&quot;: true,"/>
								<outline text="&quot;localJsonFilePath&quot;: &quot;/Users/davewiner/Library/Application Support/instantDave2/data/blog.json&quot;,"/>
								</outline>
							<outline text="" created="Sat, 23 Jul 2022 21:28:29 GMT"/>
							<outline text="7/23/22 by DW -- it's set up to build with the latest scripting news blog, for debugging" isComment="true" created="Sat, 23 Jul 2022 21:28:30 GMT"/>
							<outline text="&quot;urlJson&quot;: &quot;http://drummer.scripting.com/davewiner/blog.json&quot;,"/>
							<outline text="&quot;urlJson&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/blog.json&quot;," isComment="true"/>
							<outline text=""/>
							<outline text="&quot;basePath&quot;: &quot;/bloatware.org/users/kim/&quot;,"/>
							<outline text="&quot;basePathItems&quot;: &quot;/bloatware.org/users/kim/items/&quot;,"/>
							<outline text="&quot;baseUrl&quot;: &quot;http://bloatware.org/users/kim/&quot;,"/>
							<outline text="&quot;language&quot;: &quot;en-us&quot;,"/>
							<outline text="&quot;generator&quot;: &quot;oldSchool v0.46f&quot;,"/>
							<outline text="&quot;docs&quot;: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
							<outline text="&quot;docsForJsonFeed&quot;: &quot;https://github.com/scripting/Scripting-News/blob/master/rss-in-json/README.md&quot;,"/>
							<outline text="&quot;twitterScreenName&quot;: &quot;kim_bloatware&quot;,"/>
							<outline text="&quot;facebookPageName&quot;: &quot;Kim at Bloatware&quot;,"/>
							<outline text="&quot;maxFeedItems&quot;: 50,"/>
							<outline text="&quot;appDomain&quot;: &quot;bloatware.org&quot;,"/>
							<outline text="&quot;flRssCloudEnabled&quot;: true,"/>
							<outline text="&quot;rssCloudDomain&quot;: &quot;rpc.rsscloud.io&quot;,"/>
							<outline text="&quot;rssCloudPort&quot;: 5337,"/>
							<outline text="&quot;rssCloudPath&quot;: &quot;/pleaseNotify&quot;,"/>
							<outline text="&quot;rssPingPath&quot;: &quot;/ping&quot;,"/>
							<outline text="&quot;rssCloudRegisterProcedure&quot;: &quot;&quot;,"/>
							<outline text="&quot;rssCloudProtocol&quot;: &quot;http-post&quot;,"/>
							<outline text="&quot;customPages&quot;: [">
								<outline text="{" isComment="true">
									<outline text="&quot;fname&quot;: &quot;about.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;About Scripting News&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divOutlineContainer\&quot;&gt;&lt;div class=\&quot;divAboutOutline\&quot; id=\&quot;idAboutOutline\&quot; data-title=\&quot;About Scripting News\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{" isComment="true">
									<outline text="&quot;fname&quot;: &quot;river.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News River&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divRiverContainer\&quot;&gt;&lt;div class=\&quot;divRiverDisplay\&quot; id=\&quot;idRiverDisplay\&quot; data-title=\&quot;River\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{" isComment="true">
									<outline text="&quot;fname&quot;: &quot;links.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News Links&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divLinkblogDays\&quot; id=\&quot;idLinkblogDays\&quot; data-title=\&quot;Linkblog\&quot;&gt;&lt;/div&gt;&lt;div class=\&quot;divLinkblogSubscribeInfo\&quot; id=\&quot;idLinkblogSubscribeInfo\&quot;&gt;Get the new links from this page &lt;a href=\&quot;https://groups.google.com/forum/?fromgroups#!forum/daves-linkblog\&quot; target=\&quot;_blank\&quot;&gt;sent via email&lt;/a&gt; every night.&lt;/div&gt;&quot;"/>
									<outline text="}"/>
									</outline>
								<outline text="],"/>
								</outline>
							<outline text="&quot;maxDaysOnHomePage&quot;: 25,"/>
							<outline text="&quot;flUploadItemsToS3&quot;: true, "/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/2016/10/31/auroraBridge.png&quot;,"/>
							<outline text="&quot;flIncludeImageInMetadata&quot;: false,"/>
							<outline text="&quot;urlGlossaryOpml&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/glossary.opml&quot;,"/>
							<outline text="&quot;flGoogleAnalytics&quot;: true,"/>
							<outline text="&quot;idGoogleAccount&quot;: &quot;UA-39531990-1&quot;"/>
							<outline text="&quot;calendar&quot;: {}," isComment="true"/>
							<outline text="&quot;flCalendarChanged&quot;: false" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="docs/atts.md">
				<outline text="# Cheat sheet">
					<outline text="These are the attributes you can put on an oldschool outline. It's a good thing to bookmark if you're going to write content for publishing through oldschool."/>
					<outline text="### image">
						<outline text="The URL of an image that appears to the right of the text of the post it's attached to."/>
						</outline>
					<outline text="### imageLink">
						<outline text="If you have an image attribute, you can cause it to link to another place by adding an imageLink attribute whose value is the web address of the place"/>
						</outline>
					<outline text="### urlvideo">
						<outline text="URL of a YouTube video. If present there's a wedge to the left of the headline, click it to reveal the video below the post. You can get the URL by viewing the video in YouTube, click on Share and copy the URL."/>
						</outline>
					<outline text="### urltweet">
						<outline text="URL of a tweet. If present there's a wedge to the left of the headline, click it to reveal the embedded tweet below the post. You can get the URL by viewing the tweet in Twitter, copy the address in the address bar of the browser. "/>
						</outline>
					<outline text="### urlexpandableimage">
						<outline text="URL of an image. If present there's a wedge to the left of the headline, click it to reveal the image below the post."/>
						</outline>
					<outline text="### description">
						<outline text="Attach this to the title headline of a titled post. It's the description of the Twitter and Facebook metadata in the page for the post. Twitter and Facebook will pick it up when you link to the story."/>
						</outline>
					<outline text="### metaImage">
						<outline text="Like description, this is part of the Twitter and Facebook metadata. It's the image. We couldn't call it image because there already was an attribute with that name. "/>
						</outline>
					<outline text="### flBulletedSubs">
						<outline text="Add this to a headline with subs. When viewing the page the reader will see bullets next to each of the subs. "/>
						</outline>
					<outline text="### flNumberedSubs">
						<outline text="Add this to a headline with subs. When viewing the page the reader will see a number, in sequence, next to each of the subs. "/>
						</outline>
					<outline text="### collapse">
						<outline text="Add this to a headline with subs. If present and true, the subs will be collapse initially when displayed for the reader. "/>
						</outline>
					</outline>
				</outline>
			<outline text="config.json">
				<outline text="{">
					<outline text="&quot;rssFname&quot;: &quot;rss.xml&quot;,"/>
					<outline text="&quot;rssJsonFname&quot;: &quot;rss.json&quot;,"/>
					<outline text="&quot;indexHtmlFname&quot;: &quot;index.html&quot;,"/>
					<outline text="&quot;indexJsonFname&quot;: &quot;index.json&quot;,"/>
					<outline text="&quot;facebookRssFname&quot;: &quot;fb/rss.xml&quot;,"/>
					<outline text="&quot;calendarFname&quot;: &quot;calendar.json&quot;,"/>
					<outline text="&quot;pagesFolder&quot;: &quot;data/pages/&quot;,"/>
					<outline text="&quot;daysFolder&quot;: &quot;data/days/&quot;,"/>
					<outline text="&quot;itemsFolder&quot;: &quot;data/items/&quot;,"/>
					<outline text="&quot;blogs&quot;: {">
						<outline text="&quot;demo&quot;: {">
							<outline text="&quot;title&quot;: &quot;Demo blog for Old School&quot;,"/>
							<outline text="&quot;link&quot;: &quot;http://bloatware.org/users/demo/&quot;,"/>
							<outline text="&quot;description&quot;: &quot;I use this blog to test new features in Old School, and make sure old ones still work.&quot;,"/>
							<outline text=""/>
							<outline text="8/7/17 by DW -- option to read JSON file from local filesystem for Instant Dave project" isComment="true"/>
							<outline text="&quot;flReadLocalJsonFile&quot;: true," isComment="true"/>
							<outline text="&quot;localJsonFilePath&quot;: &quot;/Users/davewiner/Library/Application Support/instantDave2/data/blog.json&quot;," isComment="true"/>
							<outline text="&quot;urlOpml&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/demoblog.opml&quot;,"/>
							<outline text=""/>
							<outline text="&quot;basePath&quot;: &quot;/bloatware.org/users/demo/&quot;,"/>
							<outline text="&quot;basePathItems&quot;: &quot;/bloatware.org/users/demo/items/&quot;,"/>
							<outline text="&quot;baseUrl&quot;: &quot;http://bloatware.org/users/demo/&quot;,"/>
							<outline text="&quot;language&quot;: &quot;en-us&quot;,"/>
							<outline text="&quot;generator&quot;: &quot;oldSchool v0.46f&quot;,"/>
							<outline text="&quot;docs&quot;: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
							<outline text="&quot;docsForJsonFeed&quot;: &quot;https://github.com/scripting/Scripting-News/blob/master/rss-in-json/README.md&quot;,"/>
							<outline text="&quot;twitterScreenName&quot;: &quot;kim_bloatware&quot;,"/>
							<outline text="&quot;facebookPageName&quot;: &quot;Kim at Bloatware&quot;,"/>
							<outline text="&quot;maxFeedItems&quot;: 50,"/>
							<outline text="&quot;appDomain&quot;: &quot;bloatware.org&quot;,"/>
							<outline text="&quot;flRssCloudEnabled&quot;: true,"/>
							<outline text="&quot;rssCloudDomain&quot;: &quot;rpc.rsscloud.io&quot;,"/>
							<outline text="&quot;rssCloudPort&quot;: 5337,"/>
							<outline text="&quot;rssCloudPath&quot;: &quot;/pleaseNotify&quot;,"/>
							<outline text="&quot;rssPingPath&quot;: &quot;/ping&quot;,"/>
							<outline text="&quot;rssCloudRegisterProcedure&quot;: &quot;&quot;,"/>
							<outline text="&quot;rssCloudProtocol&quot;: &quot;http-post&quot;,"/>
							<outline text="&quot;customPages&quot;: [">
								<outline text="{" isComment="true">
									<outline text="&quot;fname&quot;: &quot;about.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;About Scripting News&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divOutlineContainer\&quot;&gt;&lt;div class=\&quot;divAboutOutline\&quot; id=\&quot;idAboutOutline\&quot; data-title=\&quot;About Scripting News\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{" isComment="true">
									<outline text="&quot;fname&quot;: &quot;river.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News River&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divRiverContainer\&quot;&gt;&lt;div class=\&quot;divRiverDisplay\&quot; id=\&quot;idRiverDisplay\&quot; data-title=\&quot;River\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{" isComment="true">
									<outline text="&quot;fname&quot;: &quot;links.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News Links&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divLinkblogDays\&quot; id=\&quot;idLinkblogDays\&quot; data-title=\&quot;Linkblog\&quot;&gt;&lt;/div&gt;&lt;div class=\&quot;divLinkblogSubscribeInfo\&quot; id=\&quot;idLinkblogSubscribeInfo\&quot;&gt;Get the new links from this page &lt;a href=\&quot;https://groups.google.com/forum/?fromgroups#!forum/daves-linkblog\&quot; target=\&quot;_blank\&quot;&gt;sent via email&lt;/a&gt; every night.&lt;/div&gt;&quot;"/>
									<outline text="}"/>
									</outline>
								<outline text="],"/>
								</outline>
							<outline text="&quot;maxDaysOnHomePage&quot;: 25,"/>
							<outline text="&quot;flUploadItemsToS3&quot;: true, "/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/2016/10/31/auroraBridge.png&quot;,"/>
							<outline text="&quot;flIncludeImageInMetadata&quot;: false,"/>
							<outline text="&quot;urlGlossaryOpml&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/glossary.opml&quot;,"/>
							<outline text="&quot;flGoogleAnalytics&quot;: true,"/>
							<outline text="&quot;idGoogleAccount&quot;: &quot;UA-39531990-1&quot;"/>
							<outline text="&quot;calendar&quot;: {}," isComment="true"/>
							<outline text="&quot;flCalendarChanged&quot;: false" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="&quot;dave&quot;: {" isComment="true">
							<outline text="&quot;title&quot;: &quot;Scripting News&quot;,"/>
							<outline text="&quot;link&quot;: &quot;http://scripting.com/&quot;,"/>
							<outline text="&quot;description&quot;: &quot;It's even worse than it appears.&quot;,"/>
							<outline text="&quot;language&quot;: &quot;en-us&quot;,"/>
							<outline text="&quot;generator&quot;: &quot;oldSchool v0.46f&quot;,"/>
							<outline text="&quot;docs&quot;: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
							<outline text="&quot;docsForJsonFeed&quot;: &quot;https://github.com/scripting/Scripting-News/blob/master/rss-in-json/README.md&quot;,"/>
							<outline text="&quot;twitterScreenName&quot;: &quot;davewiner&quot;,"/>
							<outline text="&quot;facebookPageName&quot;: &quot;Scripting News&quot;,"/>
							<outline text="&quot;maxFeedItems&quot;: 50,"/>
							<outline text="&quot;appDomain&quot;: &quot;scripting.com&quot;,"/>
							<outline text="&quot;flRssCloudEnabled&quot;: true,"/>
							<outline text="&quot;rssCloudDomain&quot;: &quot;rpc.rsscloud.io&quot;,"/>
							<outline text="&quot;rssCloudPort&quot;: 5337,"/>
							<outline text="&quot;rssCloudPath&quot;: &quot;/pleaseNotify&quot;,"/>
							<outline text="&quot;rssPingPath&quot;: &quot;/ping&quot;,"/>
							<outline text="&quot;rssCloudRegisterProcedure&quot;: &quot;&quot;,"/>
							<outline text="&quot;rssCloudProtocol&quot;: &quot;http-post&quot;,"/>
							<outline text="&quot;customPages&quot;: [">
								<outline text="{">
									<outline text="&quot;fname&quot;: &quot;about.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;About Scripting News&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divOutlineContainer\&quot;&gt;&lt;div class=\&quot;divAboutOutline\&quot; id=\&quot;idAboutOutline\&quot; data-title=\&quot;About Scripting News\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="&quot;fname&quot;: &quot;river.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News River&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divRiverContainer\&quot;&gt;&lt;div class=\&quot;divRiverDisplay\&quot; id=\&quot;idRiverDisplay\&quot; data-title=\&quot;River\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="&quot;fname&quot;: &quot;links.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News Links&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divLinkblogDays\&quot; id=\&quot;idLinkblogDays\&quot; data-title=\&quot;Linkblog\&quot;&gt;&lt;/div&gt;&lt;div class=\&quot;divLinkblogSubscribeInfo\&quot; id=\&quot;idLinkblogSubscribeInfo\&quot;&gt;Get the new links from this page &lt;a href=\&quot;https://groups.google.com/forum/?fromgroups#!forum/daves-linkblog\&quot; target=\&quot;_blank\&quot;&gt;sent via email&lt;/a&gt; every night.&lt;/div&gt;&quot;"/>
									<outline text="}"/>
									</outline>
								<outline text="],"/>
								</outline>
							<outline text="&quot;maxDaysOnHomePage&quot;: 25,"/>
							<outline text="&quot;urlJson&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/blog.json&quot;,"/>
							<outline text="&quot;basePath&quot;: &quot;/scripting.com/&quot;,"/>
							<outline text="&quot;flUploadItemsToS3&quot;: true, "/>
							<outline text="&quot;basePathItems&quot;: &quot;/scripting.com/items/&quot;,"/>
							<outline text="&quot;baseUrl&quot;: &quot;http://scripting.com/&quot;,"/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/2016/10/31/auroraBridge.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/images/2017/05/10/greatWall.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/images/2017/06/27/scriptingHeader.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/images/2017/06/30/thelma.png&quot;,"/>
							<outline text="&quot;flIncludeImageInMetadata&quot;: false,"/>
							<outline text="&quot;urlGlossaryOpml&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/glossary.opml&quot;,"/>
							<outline text="&quot;flGoogleAnalytics&quot;: true,"/>
							<outline text="&quot;idGoogleAccount&quot;: &quot;UA-39531990-1&quot;"/>
							<outline text="&quot;calendar&quot;: {}," isComment="true"/>
							<outline text="&quot;flCalendarChanged&quot;: false" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="lib/rss.js" isComment="true">
				<outline text="Notes" isComment="true">
					<outline text="5/28/17; 2:00:55 PM by DW">
						<outline text="Forked from buildrss.js in libraries. There was lots of buggy cruft in here, I wanted to fix stuff, but without taking chances on breaking basically frozen apps like Radio3, LCE."/>
						</outline>
					<outline text="3/8/17; 4:24:13 PM by DW">
						<outline text="Copied rssCloudPing from Radio3. I didn't want to copy the code into ElectricPork."/>
						<outline text="Use rssCloudDefaults in producing your RSS feed. If you don't specify a server URL in the call to rssCloudPing, we'll use what's in rssCloudDefaults to form the URL."/>
						</outline>
					</outline>
				<outline text="[[http://fargo.io/code/shared/daverss/daverss.js]]"/>
				</outline>
			<outline text="lib/s3.js" isComment="true">
				<outline text="var AWS = require (&quot;aws-sdk&quot;);"/>
				<outline text="var s3 = new AWS.S3 ();"/>
				<outline text=""/>
				<outline text="exports.stats = s3stats;"/>
				<outline text="exports.defaultType = s3defaultType;"/>
				<outline text="exports.defaultAcl = s3defaultAcl;"/>
				<outline text="exports.splitPath = s3SplitPath;"/>
				<outline text="exports.newObject = s3NewObject;"/>
				<outline text="exports.redirect = s3Redirect;"/>
				<outline text="exports.getObjectMetadata = s3GetObjectMetadata;"/>
				<outline text="exports.getObject = s3GetObject;"/>
				<outline text="exports.listObjects = s3ListObjects;"/>
				<outline text=""/>
				<outline text="[[http://fargo.io/code/node/shared/s3.js]]" created="Sat, 26 Apr 2014 23:28:41 GMT" pgfnum="40498"/>
				</outline>
			</outline>
		<outline text="/scripting.com/reboot/">
			<outline text="index.opml">
				<outline text="May 2017">
					<outline text="May 7, 2017">
						<outline text="Idea for Scripting News reboot: Publish to a GitHub repo in addition to all the other ways I publish. "/>
						<outline text="Paving my Mac">
							<outline text="As of mid-day today I had re-initialized everything on my main computer but I was still getting rainbow cursors in the OPML Editor, making it virtually impossible to get any work done. The software would just disappear at random times for random amounts of time. Try doing anything complex that way. "/>
							<outline text="So I figured that the only thing remaining that's different between the computer and a new one (an idea I was considering) is that the internal drive had not been formatted. I had tried doing it with the disk utility app, but it couldn't unmount the drive, so it couldn't format it. Seems weird. "/>
							<outline text="Anyway I figured out what to do. Hold down Cmd-R while booting, wait a few minutes and you're presented with an option to use the Disk Utility in recovery mode, which will let you format the internal hard drive."/>
							<outline text="I'm typing this rather long post here to see if I can get the OPML Editor to freeze, and am happy to report, no freezing. Maybe I can finally put this behind me starting tomorrow?"/>
							</outline>
						<outline text="More work on EO">
							<outline text="EO stands for Electric Outliner."/>
							<outline text=""/>
							</outline>
						</outline>
					<outline text="May 6, 2017">
						<outline text="Putin became the richest person in the world by looting a tiny, crippled economy. Trumps are looting the richest country in the world. Do you still think Trump is a bozo?"/>
						<outline text="Reboot of Scripting News">
							<outline text="Yesterday I wrote a &lt;a href=&quot;http://scripting.com/2017/05/05/iWantMyOldBlogBack.html&quot;&gt;post&lt;/a&gt; saying I want my old blog back."/>
							<outline text="I'm still trying to piece together how I want to do. The &lt;i&gt;what&lt;/i&gt; of what I want to do is just a clone of what I had working before my blogging got squeezed by Twitter and Google Reader. "/>
							<outline text="To get started I'm writing this as an OPML file using the excellent tools I have for posting public stuff inside Frontier. (See below.)"/>
							<outline text="I want to make this also work in LO2 and in EO (more on that later)."/>
							</outline>
						<outline text="Reboot of Frontier">
							<outline text="A project that I haven't written about yet. "/>
							<outline text="Brent Simmons sent me a note about a  month ago saying he was working on the Frontier codebase, converting it to run native on the most modern Mac OS. "/>
							<outline text="Brent is one of the original guys on the UserLand team. And he's become an expert Mac developer since we last worked together. "/>
							<outline text="So you'll see notes in here from time to time about that project. "/>
							<outline text="You can also read about it on Brent's blog, &lt;a href=&quot;http://inessential.com/&quot;&gt;innessential.com&lt;/a&gt;. "/>
							</outline>
						</outline>
					</outline>
				</outline>
			</outline>
		<outline text="dropbox:rockaway3:scriptingoldschool:" isComment="true">
			<outline text="config.json">
				<outline text="{">
					<outline text="&quot;blogs&quot;: {">
						<outline text="&quot;woodstock&quot;: {">
							<outline text="&quot;basePath&quot;: &quot;/scripting.com/woodstock/&quot;,"/>
							<outline text="&quot;basePathItems&quot;: &quot;/scripting.com/woodstock/items/&quot;,"/>
							<outline text="&quot;baseUrl&quot;: &quot;http://scripting.com/woodstock/&quot;,"/>
							<outline text="&quot;urlTemplate&quot;: &quot;http://scripting.com/code/woodstockblog/hometemplate.html&quot;,"/>
							<outline text="&quot;title&quot;: &quot;Woodstock Blog&quot;,"/>
							<outline text="&quot;link&quot;: &quot;http://scripting.com/woodstock/&quot;,"/>
							<outline text="&quot;description&quot;: &quot;Newbie questions and answers about Woodstock, NY.&quot;,"/>
							<outline text="&quot;urlJson&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/woodstock.json&quot;,"/>
							<outline text="&quot;language&quot;: &quot;en-us&quot;,"/>
							<outline text="&quot;generator&quot;: &quot;oldSchool v0.46f&quot;,"/>
							<outline text="&quot;docs&quot;: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
							<outline text="&quot;docsForJsonFeed&quot;: &quot;https://github.com/scripting/Scripting-News/blob/master/rss-in-json/README.md&quot;,"/>
							<outline text="&quot;twitterScreenName&quot;: &quot;davewiner&quot;,"/>
							<outline text="&quot;facebookPageName&quot;: &quot;Woodstock Blog&quot;,"/>
							<outline text="&quot;maxFeedItems&quot;: 50,"/>
							<outline text="&quot;appDomain&quot;: &quot;scripting.com&quot;,"/>
							<outline text="&quot;flRssCloudEnabled&quot;: true,"/>
							<outline text="&quot;rssCloudDomain&quot;: &quot;rpc.rsscloud.io&quot;,"/>
							<outline text="&quot;rssCloudPort&quot;: 5337,"/>
							<outline text="&quot;rssCloudPath&quot;: &quot;/pleaseNotify&quot;,"/>
							<outline text="&quot;rssPingPath&quot;: &quot;/ping&quot;,"/>
							<outline text="&quot;rssCloudRegisterProcedure&quot;: &quot;&quot;,"/>
							<outline text="&quot;rssCloudProtocol&quot;: &quot;http-post&quot;,"/>
							<outline text="&quot;maxDaysOnHomePage&quot;: 25,"/>
							<outline text="&quot;flUploadItemsToS3&quot;: true,"/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/images/2019/02/09/winterReservoir.png&quot;,"/>
							<outline text="&quot;flIncludeImageInMetadata&quot;: false,"/>
							<outline text="&quot;urlGlossaryOpml&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/glossary.opml&quot;,"/>
							<outline text="&quot;flGoogleAnalytics&quot;: true,"/>
							<outline text="&quot;idGoogleAccount&quot;: &quot;UA-39531990-1&quot;,"/>
							<outline text="&quot;calendar&quot;: {},"/>
							<outline text="&quot;flCalendarChanged&quot;: false"/>
							<outline text="},"/>
							</outline>
						<outline text="&quot;dave&quot;: {">
							<outline text="&quot;basePath&quot;: &quot;/scripting.com/&quot;,"/>
							<outline text="&quot;basePathItems&quot;: &quot;/scripting.com/items/&quot;,"/>
							<outline text="&quot;title&quot;: &quot;Scripting News&quot;,"/>
							<outline text="&quot;link&quot;: &quot;http://scripting.com/&quot;,"/>
							<outline text="&quot;description&quot;: &quot;It's even worse than it appears.&quot;,"/>
							<outline text="&quot;language&quot;: &quot;en-us&quot;,"/>
							<outline text="&quot;generator&quot;: &quot;oldSchool v0.46f&quot;,"/>
							<outline text="&quot;docs&quot;: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
							<outline text="&quot;docsForJsonFeed&quot;: &quot;https://github.com/scripting/Scripting-News/blob/master/rss-in-json/README.md&quot;,"/>
							<outline text="&quot;twitterScreenName&quot;: &quot;davewiner&quot;,"/>
							<outline text="&quot;facebookPageName&quot;: &quot;Scripting News&quot;,"/>
							<outline text="&quot;likes&quot;: &quot;http://likes.scripting.com/&quot;,"/>
							<outline text="&quot;maxFeedItems&quot;: 50,"/>
							<outline text="&quot;appDomain&quot;: &quot;scripting.com&quot;,"/>
							<outline text="&quot;flRssCloudEnabled&quot;: true,"/>
							<outline text="&quot;rssCloudDomain&quot;: &quot;rpc.rsscloud.io&quot;,"/>
							<outline text="&quot;rssCloudPort&quot;: 5337,"/>
							<outline text="&quot;rssCloudPath&quot;: &quot;/pleaseNotify&quot;,"/>
							<outline text="&quot;rssPingPath&quot;: &quot;/ping&quot;,"/>
							<outline text="&quot;rssCloudRegisterProcedure&quot;: &quot;&quot;,"/>
							<outline text="&quot;rssCloudProtocol&quot;: &quot;http-post&quot;,"/>
							<outline text="&quot;customPages&quot;: [">
								<outline text="{">
									<outline text="&quot;fname&quot;: &quot;about.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;About Scripting News&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divOutlineContainer\&quot;&gt;&lt;div class=\&quot;divAboutOutline\&quot; id=\&quot;idAboutOutline\&quot; data-title=\&quot;About Scripting News\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="&quot;fname&quot;: &quot;river.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News River&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divRiverContainer\&quot;&gt;&lt;div class=\&quot;divRiverDisplay\&quot; id=\&quot;idRiverDisplay\&quot; data-title=\&quot;River\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="&quot;fname&quot;: &quot;links.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting News Links&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divLinkblogDays\&quot; id=\&quot;idLinkblogDays\&quot; data-title=\&quot;Linkblog\&quot;&gt;&lt;/div&gt;&lt;div class=\&quot;divLinkblogSubscribeInfo\&quot; id=\&quot;idLinkblogSubscribeInfo\&quot;&gt;Get the new links from this page &lt;a href=\&quot;https://groups.google.com/forum/?fromgroups#!forum/daves-linkblog\&quot; target=\&quot;_blank\&quot;&gt;sent via email&lt;/a&gt; every night.&lt;/div&gt;&quot;"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="&quot;fname&quot;: &quot;discuss.html&quot;,"/>
									<outline text="&quot;title&quot;: &quot;Scripting Discuss&quot;,"/>
									<outline text="&quot;htmltext&quot;: &quot;&lt;div class=\&quot;divScriptingDiscuss\&quot; id=\&quot;idScriptingDiscuss\&quot; data-title=\&quot;Discuss\&quot;&gt;&lt;/div&gt;&quot;"/>
									<outline text="}"/>
									</outline>
								<outline text="],"/>
								</outline>
							<outline text="&quot;maxDaysOnHomePage&quot;: 25,"/>
							<outline text="&quot;urlJson&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/blog.json&quot;,"/>
							<outline text="&quot;flUploadItemsToS3&quot;: true,"/>
							<outline text="&quot;baseUrl&quot;: &quot;http://scripting.com/&quot;,"/>
							<outline text="&quot;urlHomePageTemplate&quot;: &quot;http://fargo.io/code/shared/oldschool/hometemplate.html&quot;,"/>
							<outline text="&quot;urlHeaderImage&quot;: &quot;http://scripting.com/images/2019/10/12/autumn.png&quot;,"/>
							<outline text="&quot;commentHeaderImage&quot;: &quot;Edit config.json in the Old School project file, in OPML, not in JSON. -- 10/14/19 by DW&quot;,"/>
							<outline text="&quot;urlHeaderImage6&quot;: &quot;http://scripting.com/images/2019/08/21/kingKong.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage5&quot;: &quot;http://scripting.com/images/2019/07/29/niagaraFalls.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage4&quot;: &quot;http://scripting.com/images/2019/07/07/americanPride.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage3&quot;: &quot;http://scripting.com/images/2019/07/02/meadow.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage2&quot;: &quot;http://scripting.com/images/2019/06/05/rusticCountryRoad.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage1&quot;: &quot;http://scripting.com/images/2019/03/26/eveAndPeterWalkingToSchoolIn1964.png&quot;," isComment="true"/>
							<outline text="&quot;urlHeaderImage0&quot;: &quot;http://scripting.com/images/2019/02/08/driveway.png&quot;," isComment="true"/>
							<outline text="&quot;flIncludeImageInMetadata&quot;: false,"/>
							<outline text="&quot;urlGlossaryOpml&quot;: &quot;http://electricserver.scripting.com/users/davewiner/electric/glossary.opml&quot;,"/>
							<outline text="&quot;flGoogleAnalytics&quot;: true,"/>
							<outline text="&quot;idGoogleAccount&quot;: &quot;UA-39531990-1&quot;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="Notes" isComment="true">
			<outline text="Snapshot of template before integrations with snap and special scripting.com pages">
				<outline text="daytemplate.css" isComment="true">
					<outline text="@import url('https://fonts.googleapis.com/css?family=Oswald');"/>
					<outline text=""/>
					<outline text="body {">
						<outline text="font-family: &quot;Ubuntu&quot;;"/>
						<outline text="font-size: 18px;"/>
						<outline text="background-color: whitesmoke;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetop {">
						<outline text="width: 100%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetopImage {">
						<outline text="position: absolute;"/>
						<outline text="top: 0;"/>
						<outline text="left: 0;"/>
						<outline text="height: 230px;"/>
						<outline text="width: 100%;"/>
						<outline text="margin-left: 0;"/>
						<outline text="margin-top: 0;"/>
						<outline text="border-top: 1px solid silver;" isComment="true"/>
						<outline text="z-index: -1;"/>
						<outline text="-webkit-background-size: cover;"/>
						<outline text="-moz-background-size: cover;"/>
						<outline text="-o-background-size: cover;"/>
						<outline text="background-size: cover;"/>
						<outline text="background-position: center;"/>
						<outline text="background-repeat: no-repeat;"/>
						<outline text="background-color: black;"/>
						<outline text="z-index: 0;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetopTextBackground {">
						<outline text="position: absolute;"/>
						<outline text="top: 30;"/>
						<outline text="left: 15%;"/>
						<outline text="width: 70%;"/>
						<outline text="height: 140px;"/>
						<outline text="z-index: 1;"/>
						<outline text="background-color: black;"/>
						<outline text="opacity: 0.25;"/>
						<outline text="border-top: 1px solid white;"/>
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetopText {">
						<outline text="position: absolute;"/>
						<outline text="text-align: center;"/>
						<outline text="top: 60;"/>
						<outline text="left: 15%;"/>
						<outline text="width: 65%;"/>
						<outline text="height: 200px;"/>
						<outline text="color: white;"/>
						<outline text="padding-top: 3px;"/>
						<outline text="padding-left: 20px;"/>
						<outline text="z-index: 2;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetopTitle {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-size: 80px;"/>
						<outline text="font-weight: 700;"/>
						<outline text="font-style: normal;"/>
						<outline text="letter-spacing: -0.01em;"/>
						<outline text="line-height: 1.1;"/>
						<outline text="margin-bottom: 0;"/>
						<outline text="color: white;"/>
						<outline text="text-shadow: 1px 1px black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetopTitle a {">
						<outline text="color: white;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetopTitle a:hover {">
						<outline text="text-decoration: none;"/>
						<outline text="color: lemonchiffon;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPagetopDescription {">
						<outline text="font-family: &quot;Oswald&quot;;" isComment="true"/>
						<outline text="font-size: 20px;"/>
						<outline text="margin-top: 5px;"/>
						<outline text="text-shadow: 1px 1px black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divPageBody {">
						<outline text="width: 630px;"/>
						<outline text="margin-top: 280px;"/>
						<outline text="margin-left: auto;"/>
						<outline text="margin-right: auto;"/>
						<outline text="margin-bottom: 400px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDayTitle {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-size: 32px;"/>
						<outline text="font-weight: bold;"/>
						<outline text="margin-bottom: 30px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDayTitle a {">
						<outline text="color: black;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSingularItem {">
						<outline text="color: green;" isComment="true"/>
						<outline text="line-height: 150%;"/>
						<outline text="margin-bottom: .6em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTitledItem {">
						<outline text="color: blue;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTitledItem .divTitle {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-size: 22px;"/>
						<outline text="color: black;" isComment="true"/>
						<outline text="margin-top: 30px;"/>
						<outline text="margin-bottom: .6em;"/>
						<outline text="font-weight: bold;"/>
						<outline text="line-height: 140%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTitledItem .ulLevel0 {">
						<outline text="margin-left: 0;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTitledItem li {">
						<outline text="list-style-type: none;"/>
						<outline text="margin-bottom: .6em;"/>
						<outline text="line-height: 150%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLink {">
						<outline text="margin-left: .5em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLink a {">
						<outline text="color: gray;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spPermaLink {">
						<outline text="margin-left: .4em;"/>
						<outline text="display: none;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".spPermaLink a {">
						<outline text="font-family: &quot;Ubuntu&quot;;"/>
						<outline text="color: purple;"/>
						<outline text="opacity: 0.5;"/>
						<outline text="font-weight: normal;"/>
						<outline text="font-size: .8em;" isComment="true"/>
						<outline text="font-size: 14px;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divArchivePageDay {">
						<outline text="margin-bottom: 40px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divArchivePageDay .divDayTitle {" isComment="true">
						<outline text="font-size: 1.5em;" isComment="true"/>
						<outline text="margin-bottom: 30px;" isComment="true"/>
						<outline text="color: green;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divFooter {" created="Fri, 07 Mar 2014 17:07:49 GMT" pgfnum="38596">
						<outline text="font-family: &quot;Ubuntu&quot;, sans-serif;" isComment="true"/>
						<outline text="margin-top: 400px;"/>
						<outline text="font-size: .80em;"/>
						<outline text="line-height: 180%;" created="Sun, 09 Mar 2014 22:42:38 GMT" pgfnum="38763"/>
						<outline text="border-top: 1px solid silver;" created="Fri, 07 Mar 2014 17:08:19 GMT" pgfnum="38600"/>
						<outline text="text-align: center;" created="Fri, 07 Mar 2014 17:10:00 GMT" pgfnum="38601"/>
						<outline text="padding-top: 15px;" created="Fri, 07 Mar 2014 17:12:24 GMT" pgfnum="38602"/>
						<outline text="height: 400px;" isComment="true" created="Fri, 07 Mar 2014 17:08:00 GMT" pgfnum="38598"/>
						<outline text="}" created="Fri, 07 Mar 2014 17:07:51 GMT" pgfnum="38597"/>
						</outline>
					<outline text=".divSocialMediaLinks {">
						<outline text="letter-spacing: 12px; "/>
						<outline text="font-size: 1.2em; " isComment="true"/>
						<outline text="margin-top: 5px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spTitleLink {">
						<outline text="color: black;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="/* styles for phone */" created="Sun, 09 Mar 2014 19:11:13 GMT" pgfnum="38719">
						<outline text="@media only screen "/>
						<outline text="and (min-device-width : 320px) "/>
						<outline text="and (max-device-width : 480px) {">
							<outline text="body {">
								<outline text="font-size: 16px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 90%;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="margin-top: 160px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPagetopImage {">
								<outline text="height: 135px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPagetopText {">
								<outline text="top: 20;"/>
								<outline text="width: 100%;"/>
								<outline text="left: 0;"/>
								<outline text="padding-left: 0;"/>
								<outline text="height: 200px;" isComment="true"/>
								<outline text="color: white;" isComment="true"/>
								<outline text="padding-top: 3px;" isComment="true"/>
								<outline text="z-index: 2;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPagetopTitle {">
								<outline text="font-size: 45px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPagetopDescription {">
								<outline text="font-size: 16px;"/>
								<outline text="margin-top: 3px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divDayTitle {">
								<outline text="font-size: 22px;"/>
								<outline text="margin-bottom: 15px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divTitledItem .divTitle {">
								<outline text="font-size: 16px;"/>
								<outline text="margin-top: 15px;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="}"/>
							</outline>
						</outline>
					<outline text="/* styles for tablet */">
						<outline text="@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {">
							<outline text=".divPagetopText {">
								<outline text="top: 30;"/>
								<outline text="width: 100%;"/>
								<outline text="left: 0;"/>
								<outline text="padding-left: 0;"/>
								<outline text="height: 200px;" isComment="true"/>
								<outline text="color: white;" isComment="true"/>
								<outline text="padding-top: 3px;" isComment="true"/>
								<outline text="z-index: 2;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPagetopImage {">
								<outline text="height: 185px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 75%;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="margin-top: 230px;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						</outline>
					</outline>
				<outline text="daytemplate.js" isComment="true">
					<outline text="function everySecond () {">
						<outline text="}"/>
						</outline>
					<outline text="function startup () {">
						<outline text="console.log (&quot;startup&quot;);"/>
						<outline text="if (config.flGoogleAnalytics) {">
							<outline text="initGoogleAnalytics (config.appDomain, config.idGoogleAccount); "/>
							<outline text="}"/>
							</outline>
						<outline text="self.setInterval (everySecond, 1000); "/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="daytemplate.html" isComment="true">
					<outline text="&lt;html&gt;">
						<outline text="&lt;head&gt;">
							<outline text="&lt;title&gt;[%pagetitle%]&lt;/title&gt;"/>
							<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
							<outline text="[%rssLink%]"/>
							<outline text="[%facebookmetadata%]"/>
							<outline text="[%twittermetadata%]"/>
							<outline text="&lt;%basicIncludes2%&gt;"/>
							<outline text="&lt;link href=&quot;http://fargo.io/code/shared/oldschool/daytemplate.css?x=5&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
							<outline text="&lt;script src=&quot;http://fargo.io/code/shared/oldschool/daytemplate.js?x=0&quot;&gt;&lt;/script&gt;"/>
							<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
								<outline text="var config = [%configJson%];"/>
								<outline text="var opmlHead = [%opmlHead%];"/>
								<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
								</outline>
							<outline text="&lt;/head&gt;"/>
							</outline>
						<outline text="&lt;body&gt;">
							<outline text="&lt;div class=&quot;divPagetop&quot;&gt;">
								<outline text="[%pagetop%]"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
								<outline text="[%bodytext%]"/>
								<outline text="&lt;div class=&quot;divFooter&quot;&gt;">
									<outline text="&lt;p&gt;[%copyright%]&lt;/p&gt;"/>
									<outline text="&lt;p&gt;Last udpate: [%now%].&lt;/p&gt;"/>
									<outline text="[%socialMediaLinks%]"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;script&gt;">
								<outline text="$(document).ready (function () {">
									<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
									<outline text="});"/>
									</outline>
								<outline text="&lt;/script&gt;"/>
								</outline>
							<outline text="&lt;/body&gt;"/>
							</outline>
						<outline text="&lt;/html&gt;"/>
						</outline>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildOldSchool ()"/>
			</outline>
		</body>
	</opml>
